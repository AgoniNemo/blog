<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AgoniNemo&#39;s blog</title>
  <subtitle>在你想要放弃的那一刻,想想为什么当初坚持走到这里...</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://agoninemo.github.io/blog/"/>
  <updated>2018-03-13T11:33:42.429Z</updated>
  <id>http://agoninemo.github.io/blog/</id>
  
  <author>
    <name>AgoniNemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell学习</title>
    <link href="http://agoninemo.github.io/blog/2018/03/10/shell%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://agoninemo.github.io/blog/2018/03/10/shell学习（一）/</id>
    <published>2018-03-10T04:58:04.000Z</published>
    <updated>2018-03-13T11:33:42.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shell脚本语言-echo"><a href="#Shell脚本语言-echo" class="headerlink" title="Shell脚本语言-echo"></a>Shell脚本语言-echo</h3><pre><code>    1、显示普通字符串
        echo &quot;iPhoneX&quot;

    2、显示转义字符
        echo &quot;  &quot; hello world &quot;  &quot;

    3、显示变量
        h=&quot;hello&quot;
        echo &quot;${h} world&quot;

    4、显示换行
        正确写法（-e：表示开启转义功能）
        echo -e &quot;hello \n world未来&quot;

    5、不换行
        注意：&quot;-e&quot;开启转义功能，&quot;\c&quot;表示不换行
        echo -e &quot;hello未来 \c &quot;
        echo &quot;科技&quot;

    6、显示一个执行命令
        要求：输出当前时间
        echo `date`

    7、退出命令
        语法：exit 状态-&gt;退出程序
        写法一
            h=&quot;hello world&quot;
            echo ${h}
            exit
            echo &quot;出bug了！&quot;
        写法二
            h=&quot;404找不到错误&quot;
            echo ${h}
            exit 0    

            age=100
            if(age &gt; 100){
                exit 1
            }
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!--more--&gt;</div><div class="line"></div><div class="line">### Shell脚本语言-数组</div><div class="line"></div><div class="line">```	1、语法				数组名=(值1 值2 值3…)	2、初始化数组		方式一			name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)			#输出			echo $name			#默认：打印第一个元素		方式二			name=()			name[0]=&quot;404&quot;			name[1]=&quot;Andy&quot;			name[2]=&quot;柚芒子&quot;			name[3]=&quot;全班最菜&quot;			echo $&#123;name[0]&#125;  $&#123;name[1]&#125;	3、读取数组		语法结构：$&#123;数组名[下标]&#125;		name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)		#输出一个元素				echo $&#123;name[0]&#125;		#输出所有-&gt;&quot;@&quot;表示输出所有的数据		echo $&#123;name[@]&#125;	4、数组长度		方式一：获取数组元素个数			语法：$&#123;#数组名[@]&#125;			代码：				name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)				echo $&#123;#name[@]&#125;			结果：4		方式二：获取数组元素个数			语法：$&#123;#数组名[*]&#125;			代码：				name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)				echo $&#123;#name[*]&#125;			结果：4		方式三：获取单个元素-&gt;字符长度			语法：$&#123;#数组名[下标]&#125;			代码：				name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)				echo $&#123;#name[2]&#125;			结果：3</div></pre></td></tr></table></figure>

### Shell脚本语言-传递参数
</code></pre><pre><code>1、语法定义
    ./文件名称.sh 参数1 参数2 参数3...
2、案例
    脚本内容如下：
        #${0}-&gt;表示文件名称
        #${1}-&gt;表示参数1
        #${2}-&gt;表示参数2
        echo ${0} ${1}  ${2}
    执行脚本代码：
        ./hello.sh &quot;hello&quot; &quot;world&quot;

3、特殊字符
    3.1 $#：获得脚本输入参数个数
        脚本内容如下：
            echo ${#}    
        执行脚本代码：
            ./hello.sh &quot;hello&quot; &quot;world&quot;
        执行脚本结果：2

    3.2 $*：显示整个脚本输入参数列表
        脚本内容如下：
            echo ${*}    
        执行脚本代码：
            ./hello.sh &quot;hello&quot; &quot;world&quot;
        执行脚本结果：&quot;hello&quot; &quot;world&quot;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Shell脚本语言-基本运算符</div><div class="line"></div><div class="line">```	 1、算数运算符		1.1 &quot;+&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a + $b`			echo &quot;c的值：$c&quot;		1.2 &quot;-&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a - $b`			echo &quot;c的值：$c&quot;		1.3 &quot;*&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a \* $b`			echo &quot;c的值：$c&quot;		1.4 &quot;/&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a / $b`			echo &quot;c的值：$c&quot;		1.5 &quot;%&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a % $b`			echo &quot;c的值：$c&quot;		1.6 &quot;=&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=$a			echo &quot;b的值：$b&quot;				1.7 &quot;==&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			if [ $a == $b ]			then				echo &quot;a等于b&quot;			else				echo &quot;a不等于b&quot;			fi	2、关系运算符		2.1 &quot;-eq&quot;：检测两个数是否相等，当等返回true			a=100			b=200			if [ $a -eq $b ]			then				echo &quot;a等于b&quot;			else				echo &quot;a不等于b&quot;			fi		2.2 &quot;-ne&quot;：检测两个数是否相等，不相等返回true			a=100			b=200			if [ $a -ne $b ]			then				echo &quot;a不等于b&quot;			else				echo &quot;a等于b&quot;			fi		2.3 &quot;-gt&quot;：检测左边数是否大于右边数，如果是，返回true			a=100			b=200			if [ $a -gt $b ]			then				echo &quot;a大于b&quot;			else				echo &quot;a小于b&quot;			fi		2.4 &quot;-lt&quot;：检测左边数是否小于右边数，如果是，返回true			a=100			b=200			if [ $a -lt $b ]			then				echo &quot;a小于b&quot;			else				echo &quot;a大于b&quot;			fi		2.5 &quot;-ge&quot;：检测左边数是否(大于+等于)右边数，如果是，返回true			a=100			b=200			if [ $a -ge $b ]			then				echo &quot;a大于等于b&quot;			else				echo &quot;a小于b&quot;			fi		2.6 &quot;-le&quot;：检测左边数是否(小于+等于)右边数，如果是，返回true			a=100			b=200			if [ $a -le $b ]			then				echo &quot;a小于等于b&quot;			else				echo &quot;a大于b&quot;			fi	3、布尔值运算符		3.1 &quot;!&quot;：非运算，表达式为true，返回true，否则返回false			a=100			b=200			if [ $a != $b ]			then				echo &quot;a不等于b&quot;			fi		3.2 &quot;-o&quot;：或运算，有一个表达式为true，则返回true			a=100			b=200			if [ $a -lt 200 -o $b -gt 200 ]			then				echo &quot;成立&quot;			fi		3.3 &quot;-a&quot;：与运算，两个表达式为true，则返回true			a=100			b=200			if [ $a -lt 200 -a $b -gt 200 ]			then				echo &quot;成立&quot;			else				echo &quot;不成立&quot;			fi	4、逻辑运算符		4.1 &quot;&amp;&amp;&quot;：逻辑且-&gt;and			a=100			b=200			if [ $a -lt 200 ] &amp;&amp; [ $b -gt 200 ]			then				echo &quot;成立&quot;			else				echo &quot;不成立&quot;			fi			4.2 &quot;||&quot;：逻辑 OR			a=100			b=200			if [ $a -lt 200 ] || [ $b -gt 200 ]			then				echo &quot;成立&quot;			else				echo &quot;不成立&quot;			fi	5、字符串运算？		5.1 &quot;=&quot;：检测两个字符串是否相等，如果相等返回true			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			else				echo &quot;字符串a不等于字符串b&quot;			fi		5.2 &quot;!=&quot;：检测两个字符串是否相等，如果不相等返回true			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a != $b ]			then				echo &quot;字符串a不等于字符串b&quot;			else				echo &quot;字符串a等于字符串b&quot;			fi			5.3 &quot;-z&quot;：检测字符串长度是否为0，如果是返回true			a=&quot;nemo&quot;			if [ -z $a ]			then				echo &quot;a不为空，存在&quot;			else				echo &quot;a不存在值&quot;			fi		5.4 &quot;-n&quot;：检测字符串长度是否为0，如果不是0，返回true			a=&quot;nemo&quot;			if [ -n $a ]			then				echo &quot;a存在&quot;			else				echo &quot;a不存在值&quot;			fi		5.5 &quot;字符串&quot;：检测字符串是否为空，不为空返回true			a=&quot;nemo&quot;			if [ $a ]			then				echo &quot;a不为空&quot;			else				echo &quot;a为空&quot;			fi	6、文件测试运算符？		file=&quot;/Users/name/Desktop/test.sh&quot;		6.1 &quot;-d file&quot;：检测文件是不是一个目录，如果是，那么返回true			if [ -d $file ]			then 				echo &quot;是一个目录&quot;			else				echo &quot;不是一个目录&quot;			fi		6.2 &quot;-r file&quot;：检测文件是否可读，如果是，那么返回true			if [ -r $file ]			then 				echo &quot;可读&quot;			else				echo &quot;不可读&quot;			fi		6.3 &quot;-w file&quot;：检测文件是否可写，如果是，那么返回true			if [ -w $file ]			then 				echo &quot;可写&quot;			else				echo &quot;不可写&quot;			fi		6.4 &quot;-x file&quot;：检测文件是否是可执行文件，如果是，那么返回true			if [ -x $file ]			then 				echo &quot;可执行&quot;			else				echo &quot;不可执行&quot;			fi		6.5 &quot;-f file&quot;：检测文件是否是一个普通文件（既不是目录，也不是设备文件），如果是，那么返回true			if [ -f $file ]			then 				echo &quot;文件为普通文件&quot;			else				echo &quot;文件为特殊文件&quot;			fi		6.6 &quot;-s file&quot;：检测文件是否为空（文件有内容），如果是，那么返回true			if [ -s $file ]			then 				echo &quot;文件有内容&quot;			else				echo &quot;文件没有内容&quot;			fi		6.7 &quot;-e file&quot;：检测文件是否存在（包含了：目录和文件），如果是，那么返回true			if [ -e $file ]			then 				echo &quot;存在&quot;			else				echo &quot;不存在&quot;			fi```### Shell脚本语言-流程控制</div><div class="line">```		1、&quot;if&quot;语句		语法结构			if [条件]			then				代码			fi		代码结构			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			fi	2、&quot;if else&quot;语句		语法结构			if [条件]			then				代码			else				代码			fi		代码结构			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			else				echo &quot;字符串a不等于字符串b&quot;			fi	3、&quot;if-else-if-else&quot;		语法结构			if [条件]			then				代码			elif [条件]			then				代码			else				代码			fi				代码结构			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			elif [ $a ]			then				echo &quot;字符串a不为空&quot;			else				echo &quot;字符串a不等于字符串b&quot;			fi		4、&quot;for&quot;循环语句		语法结构			for 变量名 in item1 item2 item3 …			do				代码			done		代码案例一			for name in &quot;nemo&quot; &quot;嗯&quot; &quot;嘻嘻&quot; &quot;月眼&quot;			do   				echo $&#123;name&#125;			done			5、&quot;while&quot;循环		语法结构			while(条件)			do				代码			done		代码案例一			a=1			while(($a&lt;10))			do   				echo $&#123;a&#125;				a=`expr $a + 1`			done	6、&quot;case&quot;语句		语法结构			case 值 in			模式1)				代码				;;			模式2)				代码				;;			模式3)				代码				;;			sac		代码案例一			number=1			case $number in			1) echo &quot;等于1&quot;				;;			2) echo &quot;等于2&quot;				;;			3) echo &quot;等于3&quot;				;;			esac</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Shell脚本语言-echo&quot;&gt;&lt;a href=&quot;#Shell脚本语言-echo&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本语言-echo&quot;&gt;&lt;/a&gt;Shell脚本语言-echo&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    1、显示普通字符串

    
    </summary>
    
    
      <category term="shell" scheme="http://agoninemo.github.io/blog/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Git多用户配置ssh</title>
    <link href="http://agoninemo.github.io/blog/2017/12/05/Git%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AEssh/"/>
    <id>http://agoninemo.github.io/blog/2017/12/05/Git多用户配置ssh/</id>
    <published>2017-12-05T13:29:57.000Z</published>
    <updated>2017-12-05T13:33:11.102Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-d3f62ea2b28e2fad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git_github_ssh_linux.jpg"></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>之前配置了gitlab后，发现在多次切换账号比较的麻烦，所以博主就配置了多用户的ssh，现在把过程给记录下来，方便以后查询。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 公钥放在`~/.ssh/`目录，email@email.com可以改成其他邮箱好做区别，id_rsa可以改成github_id_rsa，表示用于github</div><div class="line">ssh-keygen -t rsa -C &quot;email@email.com&quot; -f ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>在<code>~/.ssh/</code>下创建config，执行命令<code>vim ~/.ssh/config</code>,如果已经创建了就编辑，博主的<code>config</code>如下(host随意即可，方便自己记忆，后续在添加remote是还需要用到)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#github qq168520@163.com</div><div class="line">host github</div><div class="line">    hostname github.com</div><div class="line">    User Agoni</div><div class="line">    IdentityFile ~/.ssh/github_id_rsa</div><div class="line"></div><div class="line">#gitlab xiezhuocheng@mjwon.com</div><div class="line">host gitlab</div><div class="line">    hostname http://10.10.10.79</div><div class="line">    User Agoni</div><div class="line">    Port 11000</div><div class="line">    IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line">#gitlab qq168520@163.com</div><div class="line">host oschina</div><div class="line">    hostname git.oschina.net</div><div class="line">    User Agoni</div><div class="line">    IdentityFile ~/.ssh/oschina_id_rsa</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查看系统ssh-key代理</div><div class="line">ssh-add -l</div><div class="line"></div><div class="line">显示</div><div class="line">2048 SHA256:9Qq7xLqqtlDOehS7Aw5mlRdVAq8XrUlm6tKeXzMnD4 /Users/xxx/.ssh/id_rsa (RSA)</div><div class="line">2048 SHA256:KmwrjIrdqQWdBF3f9FIhbIlvdjo6+tbSJXms1TWuB4 /Users/xxx/.ssh/oschina_id_rsa (RSA)</div><div class="line">2048 SHA256:YDzombL5ndt0bAVulwvANumbEX9TFQ/iDO51AzN5F0 /Users/xxx/.ssh/github_id_rsa (RSA)</div><div class="line"></div><div class="line"># 如果出现The agent has no identities. 则表示没有代理</div><div class="line">ssh-add -D</div><div class="line"></div><div class="line"># 依次将不同的ssh添加代理(如果使用 ssh-add ~/.ssh/id_rsa的时候报Could not open a connection to your authentication agent错误</div><div class="line">，则需要先运行一下 ssh-agent bash 命令后再执行 ssh-add ...等命令)</div><div class="line">ssh-add -K ~/.ssh/id_rsa</div><div class="line">ssh-add -K ~/.ssh/github_id_rsa</div><div class="line">ssh-add -K ~/.ssh/oschina_id_rsa</div></pre></td></tr></table></figure>
<p>测试ssh:<code>ssh -T git@github.com</code><br>你会得到如下提示，表示这个ssh公钥已经获得了权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi USERNAME! You&apos;ve successfully authenticated, but github does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>配置完成后，在连接非默认帐号的github仓库时，远程库的地址要对应地做一些修改，比如现在添加user帐号下的一个仓库test，则需要这样添加：(user是github的用户名, github是上面配置的host)<br><code>git remote add test git@github:user/test.git</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-d3f62ea2b28e2fad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;git_github_ssh_linux.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;p&gt;之前配置了gitlab后，发现在多次切换账号比较的麻烦，所以博主就配置了多用户的ssh，现在把过程给记录下来，方便以后查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://agoninemo.github.io/blog/tags/git/"/>
    
      <category term="ssh" scheme="http://agoninemo.github.io/blog/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>First Translation</title>
    <link href="http://agoninemo.github.io/blog/2017/11/18/First%20Translation/"/>
    <id>http://agoninemo.github.io/blog/2017/11/18/First Translation/</id>
    <published>2017-11-18T05:26:33.000Z</published>
    <updated>2017-11-18T05:44:36.402Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/timg.jpg" alt="pic"></p>
<h3 id="前方"><a href="#前方" class="headerlink" title="前方"></a>前方</h3><p>当你的知识支撑不了你的野心时，你就该静下心去学习！—–无名者 </p>
<h4 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h4><p>欢迎来到Swift.org<br><br>欢迎来到Swift 社区，让我们一起构建一种编程语言，让它在任何平台都可以把每一个人的想法变成应用程序。<br></p>
<p>在2014公布后，它很快成为发展最快的语言之一。Swift 使写的软件（编程）极其安全与快速的设计。我们的目标与野心：我们想要编程简单的事变成更简单，困难的事变成也可能实现。</p>
<p>对于学习者来说，学习Swift 能更好的了解现在编程的概念与更好的实践。现在Swift 开源了，他们将可以运用到更广泛的平台中，从移动设置到桌面到云平台。<br></p>
<a id="more"></a>
<h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Welcome to Swift.org</div><div class="line"></div><div class="line">Welcome to the Swift community. Together we are working to build a programming language to empower everyone to turn their ideas into apps on any platform.</div><div class="line"></div><div class="line">Announced in 2014, the Swift programming language has quickly become one of the fastest growing languages in history. Swift makes it easy to write software that is incredibly fast and safe by design. Our goals for Swift are ambitious: we want to make programming simple things easy, and difficult things possible.</div><div class="line"></div><div class="line">For students, learning Swift has been a great introduction to modern programming concepts and best practices. And because it is open, their Swift skills will be able to be applied to an even broader range of platforms, from mobile devices to the desktop to the cloud.</div></pre></td></tr></table></figure>
<p>部分词：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">excited 兴奋</div><div class="line">chapter 章</div><div class="line">quickly 快速</div><div class="line">became 成为</div><div class="line">one of 其中之一</div><div class="line">design 设计</div><div class="line">general 普通</div><div class="line">purpose 用途</div><div class="line">modern 现代</div><div class="line">programming 编程</div><div class="line">concepts 概念</div><div class="line">Announced 公布</div><div class="line">goals 目标</div><div class="line">difficult 困难</div><div class="line">possible 可能</div><div class="line">introduction 采用</div><div class="line">devices 设置</div><div class="line">desktop 桌面</div><div class="line">cloud 云</div><div class="line">applied 应用的</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orfd017lz.bkt.clouddn.com/assets/inset/timg.jpg&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前方&quot;&gt;&lt;a href=&quot;#前方&quot; class=&quot;headerlink&quot; title=&quot;前方&quot;&gt;&lt;/a&gt;前方&lt;/h3&gt;&lt;p&gt;当你的知识支撑不了你的野心时，你就该静下心去学习！—–无名者 &lt;/p&gt;
&lt;h4 id=&quot;译文&quot;&gt;&lt;a href=&quot;#译文&quot; class=&quot;headerlink&quot; title=&quot;译文&quot;&gt;&lt;/a&gt;译文&lt;/h4&gt;&lt;p&gt;欢迎来到Swift.org&lt;br&gt;&lt;br&gt;欢迎来到Swift 社区，让我们一起构建一种编程语言，让它在任何平台都可以把每一个人的想法变成应用程序。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;在2014公布后，它很快成为发展最快的语言之一。Swift 使写的软件（编程）极其安全与快速的设计。我们的目标与野心：我们想要编程简单的事变成更简单，困难的事变成也可能实现。&lt;/p&gt;
&lt;p&gt;对于学习者来说，学习Swift 能更好的了解现在编程的概念与更好的实践。现在Swift 开源了，他们将可以运用到更广泛的平台中，从移动设置到桌面到云平台。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://agoninemo.github.io/blog/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>AWS搭建SS</title>
    <link href="http://agoninemo.github.io/blog/2017/11/14/AWS%E6%90%AD%E5%BB%BASS/"/>
    <id>http://agoninemo.github.io/blog/2017/11/14/AWS搭建SS/</id>
    <published>2017-11-14T12:00:33.000Z</published>
    <updated>2017-11-15T15:03:44.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-f0e3b22b8912f00e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h3><p>之前博主使用的是XX-net,虽然不是很快但是用来查资料也是够用了，但是用了一年后，用了不，可用的IP都被封了，坑爹呀，查个资料，百度个半天都没百出来。所以博主决定自己梯子，于是有了下面这篇文章。</p>
<a id="more"></a>
<h3 id="申请-AWS"><a href="#申请-AWS" class="headerlink" title="申请 AWS"></a>申请 AWS</h3><p>点<a href="https://amazonaws-china.com/cn/" target="_blank" rel="external">AWS</a>进入首界面<br><img src="http://upload-images.jianshu.io/upload_images/1610969-a3fce91bd566e078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p>点注册，进入注册界面，由于没有截图，所以说下需要注意的地方，里面的信息都要用<code>英文</code>填写，里面的信息都要用<code>英文</code>填写，里面的信息都要用<code>英文</code>填写，重要的事件说三遍，在验证信用卡时，要注意会被扣钱，6.66人民币，要扣钱了，才算验证成功（有句mmp，不知当讲不当讲，说好的免费呢！！！还需要注意的是，在没有用超的情况下，是免费的，限额为：每个月提供 15GB 免费流量与 750小时免费时长），在电话认证那里，会有电话打到你留下的手机上，你只要等等她说完你就把界面上的<code>PIN</code>号码输入，然后就完成了。最后你的邮件会收到邮件，说你AWS已经注册完成。</p>
<p>然后登录账号，点启动虚拟机<br><img src="http://upload-images.jianshu.io/upload_images/1610969-bfd59bb75d93f734.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面"></p>
<p>选择虚拟机<code>Ubuntu Server 16.04 LTS（HVM），SSD Volume Tpye</code>如果界面没有变的话，是第四个，或者点左边的<code>仅免费套餐</code><br><img src="http://upload-images.jianshu.io/upload_images/1610969-30964070350dcb34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>这个实例选择默认的或者如下图选择一样<br><img src="http://upload-images.jianshu.io/upload_images/1610969-125b24a86585e4bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>第3与第4直接默认就行了，第5步的话密钥与值可以随便填写<br><img src="http://upload-images.jianshu.io/upload_images/1610969-f70d593ffc7141f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>第6步规则按下面这样填写就可以了<br><img src="http://upload-images.jianshu.io/upload_images/1610969-dbd1421ce79ddc6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>点启动后弹出的窗口，这里要注意，在输入完成<code>密钥对名称</code>后，要点<code>下载密钥对</code>，点<code>下载密钥对</code>，点<code>下载密钥对</code>，重要的事情说三遍，最后点<code>启动实例</code>。这里要主意一点这个窗口中有ssh 命令要复制下来，下面要用到（类似这样的：ssh -i “*.pem” ec2-user@ec2-11-111-11-111.ap-northeast-1.compute.amazonaws.com）</p>
<p>设置账单通知（土豪请忽略）<br><img src="http://upload-images.jianshu.io/upload_images/1610969-61f1be1fa85ca968.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1610969-0a1b3dd83bf12d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p>点实例–&gt;选择后点连接<br><img src="http://upload-images.jianshu.io/upload_images/1610969-2cef18369a97d0e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p>博主用的是mac，所以可以在终端中直接连接，打开终端运行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#  /Users/xxx/Downloads/SecretKeyValue.pem为你下载的密钥对绝对路径</div><div class="line">chmod 400 /Users/xxx/Downloads/SecretKeyValue.pem</div><div class="line"></div><div class="line"># 连接远程虚拟机（ec2-user 是用户名，Amazon Linux AMI默认的是ec2-user，</div><div class="line">ec2-11-111-11-111.ap-northeast-1.compute.amazonaws.com 是你的服务器的公有DNS，这些信息右键点击你的实例，点击连接，弹出的提示框里都写着）</div><div class="line">ssh -i /Users/xxx/Downloads/SecretKeyValue.pem ec2-user@ec2-11-111-11-111.ap-northeast-1.compute.amazonaws.com</div><div class="line"></div><div class="line"></div><div class="line"># 使用root权限</div><div class="line">sudo -s</div></pre></td></tr></table></figure>
<h3 id="Debian-Ubuntu-安装方式"><a href="#Debian-Ubuntu-安装方式" class="headerlink" title="Debian/Ubuntu:安装方式"></a>Debian/Ubuntu:安装方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 更新apt-get，这里要注意，如果上面的虚拟机选择的是centos的话，是没有apt-get的，centos用的是yum，下面有介绍安装方法</div><div class="line">apt-get update</div><div class="line"></div><div class="line"># 安装python包管理工具(安装shadowsocks需要,提示时填yes)</div><div class="line">apt-get install python-setuptools</div><div class="line">apt-get install python-pip</div></pre></td></tr></table></figure>
<h3 id="CentOS安装方式（如果是Ubuntu，可以跳这一步）"><a href="#CentOS安装方式（如果是Ubuntu，可以跳这一步）" class="headerlink" title="CentOS安装方式（如果是Ubuntu，可以跳这一步）"></a>CentOS安装方式（如果是Ubuntu，可以跳这一步）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 安装shadowsocks（提示时填yes）</div><div class="line">pip install shadowsocks</div><div class="line"></div><div class="line"># 创建shadowsocks文件夹用来放一些配置文件</div><div class="line">mkdir /etc/shadowsocks</div><div class="line"></div><div class="line"># 编辑配置文件</div><div class="line">vim /etc/shadowsocks/config.json</div></pre></td></tr></table></figure>
<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>多个用户使用的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line"> &quot;server&quot;:&quot;0.0.0.0&quot;，  </div><div class="line"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,  </div><div class="line"> &quot;local_port&quot;:1080,  </div><div class="line">  &quot;port_password&quot;: &#123;  </div><div class="line">     &quot;8381&quot;: &quot;foobar1&quot;,  </div><div class="line">     &quot;8382&quot;: &quot;foobar2&quot;,  </div><div class="line">     &quot;8383&quot;: &quot;foobar3&quot;,  </div><div class="line">     &quot;8384&quot;: &quot;foobar4&quot;  </div><div class="line"> &#125;,  </div><div class="line"> &quot;timeout&quot;:300,  </div><div class="line"> &quot;method&quot;:&quot;aes-256-cfb&quot;,  </div><div class="line"> &quot;fast_open&quot;: false  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>单个用户使用的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;: 8381,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;foobar1&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;:false,</div><div class="line">    &quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="配置完成后重启配置"><a href="#配置完成后重启配置" class="headerlink" title="配置完成后重启配置"></a>配置完成后重启配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动Shadowsocks</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 停止Shadowsocks</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d stop</div><div class="line"></div><div class="line"># 重启Shadowsocks服务</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d restart</div></pre></td></tr></table></figure>
<h4 id="设置Shadowsocks开机启动"><a href="#设置Shadowsocks开机启动" class="headerlink" title="设置Shadowsocks开机启动"></a>设置Shadowsocks开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/rc.local</div><div class="line"></div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure>
<p>下载客户端</p>
<p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">Windows客户端下载地址</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="external">macOS客户端下载地址</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="external">Linux客户端下载地址</a></p>
<p>安装之后，添加服务器，地址为AWS的外网地址，登录AWS控制台，查看正在运行中的实例，在右边<code>IPv4 公有 IP</code>找到。 端口号为刚才配置Shadowsocks服务器时的端口号，密码也是刚才配置的，设置完之后保存，接下来就可以自由的浪了！</p>
<p>参考文章：</p>
<p><a href="https://sunny856.xyz/1537" target="_blank" rel="external">https://sunny856.xyz/1537</a></p>
<p><a href="http://celerysoft.github.io/2016-01-15.html" target="_blank" rel="external">http://celerysoft.github.io/2016-01-15.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-f0e3b22b8912f00e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前文&quot;&gt;&lt;a href=&quot;#前文&quot; class=&quot;headerlink&quot; title=&quot;前文&quot;&gt;&lt;/a&gt;前文&lt;/h3&gt;&lt;p&gt;之前博主使用的是XX-net,虽然不是很快但是用来查资料也是够用了，但是用了一年后，用了不，可用的IP都被封了，坑爹呀，查个资料，百度个半天都没百出来。所以博主决定自己梯子，于是有了下面这篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ss" scheme="http://agoninemo.github.io/blog/tags/ss/"/>
    
      <category term="aws" scheme="http://agoninemo.github.io/blog/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins从零开始</title>
    <link href="http://agoninemo.github.io/blog/2017/11/06/Jenkins%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"/>
    <id>http://agoninemo.github.io/blog/2017/11/06/Jenkins从零开始/</id>
    <published>2017-11-06T11:48:24.000Z</published>
    <updated>2017-11-06T11:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-75b3f9d0e4cdcbd4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>要做到项目的自动构建，你需求了解下Jenkins的安装，这文章是博主从零开始安装的过程，记录下了踩过的坑，分享给有需要的童鞋。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>因为Jenkins是一个用Java编写的开源的持续集成工具，所以需要java环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看CentOS自带JDK是否已安装</div><div class="line">yum list installed |grep java</div><div class="line"></div><div class="line"># 卸载JDK相关文件 java-1.7.0-openjdk（根据你上面的打印出的log，*表示卸载掉java 1.7.0的所有openjdk相关文件）</div><div class="line">yum -y remove java-1.7.0-openjdk*</div><div class="line"></div><div class="line"># 卸载tzdata-java</div><div class="line">yum -y remove tzdata-java.noarch</div></pre></td></tr></table></figure>
<h3 id="查看yum库中的Java安装包"><a href="#查看yum库中的Java安装包" class="headerlink" title="查看yum库中的Java安装包"></a>查看yum库中的Java安装包</h3><blockquote>
<p>yum -y list java*</p>
</blockquote>
<p>以下为打印的log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">已加载插件：fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">* base: mirrors.njupt.edu.cn</div><div class="line">* extras: mirror.bit.edu.cn</div><div class="line">* updates: mirrors.aliyun.com</div><div class="line">base                                                                                                        | 3.7 kB     00:00</div><div class="line">extras                                                                                                      | 3.4 kB     00:00</div><div class="line">gitlab_gitlab-ee/signature                                                                                  |  836 B     00:00</div><div class="line">gitlab_gitlab-ee/signature                                                                                  | 1.0 kB     00:00 ...</div><div class="line">gitlab_gitlab-ee-source/signature                                                                           |  836 B     00:00</div><div class="line">gitlab_gitlab-ee-source/signature                                                                           |  951 B     00:00 ...</div><div class="line">updates                                                                                                     | 3.4 kB     00:00</div><div class="line">updates/primary_db                                                                                          | 4.7 MB     00:00</div><div class="line">可安装的软件包</div><div class="line">java-1.5.0-gcj.x86_64                                                1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.5.0-gcj-devel.x86_64                                          1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.5.0-gcj-javadoc.x86_64                                        1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.5.0-gcj-src.x86_64                                            1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.6.0-openjdk.x86_64                                            1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-demo.x86_64                                       1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-devel.x86_64                                      1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-javadoc.x86_64                                    1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-src.x86_64                                        1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.7.0-openjdk.x86_64                                            1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-demo.x86_64                                       1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-devel.x86_64                                      1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-javadoc.noarch                                    1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-src.x86_64                                        1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.8.0-openjdk.x86_64                                            1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-debug.x86_64                                      1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-demo.x86_64                                       1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-demo-debug.x86_64                                 1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-devel.x86_64                                      1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-devel-debug.x86_64                                1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-headless.x86_64                                   1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-headless-debug.x86_64                             1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-javadoc.noarch                                    1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-javadoc-debug.noarch                              1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-src.x86_64                                        1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-src-debug.x86_64                                  1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java_cup.x86_64                                                      1:0.10k-5.el6                                          base</div><div class="line">java_cup-javadoc.x86_64                                              1:0.10k-5.el6                                          base</div><div class="line">java_cup-manual.x86_64                                               1:0.10k-5.el6                                          base</div><div class="line">javacc.x86_64                                                        4.1-0.5.el6                                            base</div><div class="line">javacc-demo.x86_64                                                   4.1-0.5.el6                                            base</div><div class="line">javacc-manual.x86_64                                                 4.1-0.5.el6                                            base</div><div class="line">javassist.noarch                                                     3.9.0-6.el6                                            base</div><div class="line">javassist-javadoc.noarch                                             3.9.0-6.el6                                            base</div></pre></td></tr></table></figure>
<h4 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令"></a>执行安装命令</h4><blockquote>
<p> yum -y install java-1.8.0-openjdk*</p>
</blockquote>
<p>Jenkins需要用到git，在安装git之前，要安装一些依赖（主要原因是minimal版的centos没有相应的工具，如果你的有可以不要安装，但是博主建议你升级下）</p>
<blockquote>
<p>sudo yum -y install gcc autoconf automake libtool make gettext zlib zlib-devel</p>
<p>sudo yum -y install perl-ExtUtils-MakeMaker package</p>
</blockquote>
<p>git下载（版本号可以自己修改，现在最新的是2.15的，博主下2.14的就可以了）</p>
<blockquote>
<p>wget <a href="https://Github.com/Git/Git/archive/v2.14.3.tar.gz" target="_blank" rel="external">https://Github.com/Git/Git/archive/v2.14.3.tar.gz</a></p>
</blockquote>
<p>解压git</p>
<blockquote>
<p>tar -xvf v2.14.3.tar.gz -C /usr/git/</p>
</blockquote>
<p>编译，安装git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">make configure</div><div class="line">./configure --prefix=/usr/local/ --with-curl --with-expat</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>设置环境变量，编辑<code>sudo vim /etc/profile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export GIT_HOME=/usr/local/git</div><div class="line">export PATH=$PATH:$GIT_HOME/bin:$GIT_HOME/libexec/git-core</div></pre></td></tr></table></figure>
<p>保存后使其立即生效:<br><code>source /etc/profile</code></p>
<p>安装git可能通到的报错：</p>
<p>1.In file included from credential-store.c:1:<br>cache.h:43:18: 警告：zlib.h：</p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install zlib zlib-devel expat-devel</div></pre></td></tr></table></figure>
<p>2.tclsh failed; using unoptimized loading</p>
<p>解决方法：<br><code>yum install -y gettext</code></p>
<h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><p>因为是网络安装，可能会出现404，多试几次，就可以了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</div><div class="line">rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</div><div class="line">yum install jenkins</div></pre></td></tr></table></figure>
<h4 id="修改Jenkins配置"><a href="#修改Jenkins配置" class="headerlink" title="修改Jenkins配置"></a>修改Jenkins配置</h4><p>进入到配置文件<code>vi /etc/sysconfig/jenkins</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 端口修改</div><div class="line">将</div><div class="line">JENKINS_PORT=&quot;8080&quot;</div><div class="line">修改为</div><div class="line">JENKINS_PORT=&quot;12000&quot;</div><div class="line"></div><div class="line">开启端口</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 12000 -j ACCEPT</div><div class="line"></div><div class="line">防火墙规则保</div><div class="line">/etc/rc.d/init.d/iptables save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动jenkins</div><div class="line">service jenkins start</div></pre></td></tr></table></figure>
<p>安装完成后，下面可以使用<code>http://&lt;域名&gt;:12000</code>登录了，第一次登录时，会有个密码，这个界面会提供一个像这样的<code>/var/lib/jenkins/secrets/initialAdminPassword</code>路径，密码就在里面，可以使用<code>cat</code>命令查看密码。在下一个界面，选择默认的安装方式就可以了。再下一个界面就是要创建管理员，然后就可以使用了。</p>
<p>参考文章：</p>
<p><a href="http://www.cnblogs.com/boxuan/articles/6434109.html" target="_blank" rel="external">http://www.cnblogs.com/boxuan/articles/6434109.html</a></p>
<p><a href="http://www.cnblogs.com/yangcb/p/5852380.html" target="_blank" rel="external">http://www.cnblogs.com/yangcb/p/5852380.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-75b3f9d0e4cdcbd4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;要做到项目的自动构建，你需求了解下Jenkins的安装，这文章是博主从零开始安装的过程，记录下了踩过的坑，分享给有需要的童鞋。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://agoninemo.github.io/blog/tags/Jenkins/"/>
    
      <category term="Git" scheme="http://agoninemo.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Centos 安装GitLab</title>
    <link href="http://agoninemo.github.io/blog/2017/11/02/Centos-%E5%AE%89%E8%A3%85GitLab/"/>
    <id>http://agoninemo.github.io/blog/2017/11/02/Centos-安装GitLab/</id>
    <published>2017-11-02T11:36:16.000Z</published>
    <updated>2017-11-29T08:42:39.675Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-f3ef73bb372c30dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上周末公司说要搭建一个Gitlabe用来管理代码，于是自己就开始琢磨了，其中配置邮件这里踩了一个坑，被坑了两天时间，现把搭建过程记录下来。</p>
<a id="more"></a>
<p>注意事项:</p>
<p>1.注意你的服务器需要2G以上内存（博主用的虚拟机，当时设置1G的内存然后就访问的时候报个502…）<br>2.Centos的版本是6.5的，用7.0的小伙伴可能部分有些不一样。</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>先下载Gitlabe—–<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/" target="_blank" rel="external">Gitlab地址</a></p>
<p>博主使用的是虚拟机安装所以有远程桌面，这一步可以跳过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">如果链接远程桌面时，提示&quot;远程桌面连接无法验证您希望连接的计算机的身份&quot;</div><div class="line">解决方法：</div><div class="line">1. 通过连接管理终端功能连接进入云服务器。</div><div class="line">2. 点击任务栏powershell,然后输入命令gpedit.msc，输入完成后回车，回车后会显示本地组策略编辑器。</div><div class="line">3. 依次找到【计算机配置】-&gt;【管理模板】-&gt;【windows组件】-&gt;【远程桌面服务】-&gt;【远程桌面会话主机】-&gt;【安全】-&gt;【远程（RDP）连接要求使用指定的安全层】</div><div class="line">4. 双击【远程（RDP）连接要求使用指定的安全层</div><div class="line">5. 修改为已启用，安全层选择 rdp，最后点击应用确认</div></pre></td></tr></table></figure></p>
<h5 id="将系统防火墙打开HTTP和SSH访问"><a href="#将系统防火墙打开HTTP和SSH访问" class="headerlink" title="将系统防火墙打开HTTP和SSH访问"></a>将系统防火墙打开HTTP和SSH访问</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum install openssh-server</div><div class="line">sudo yum install postfix （看情况来，如果你想用163，qq之类的发邮件可以不用执行这句）</div><div class="line">sudo lokkit -s http -s ssh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp 待上传文件名 linux用户名@服务器IP:存放到服务器的哪个位置</div><div class="line"></div><div class="line">比如：scp /Users/xxx/Downloads/gitlab-ce-10.0.0-ce.0.el6.x86_64.rpm root@10.10.10.70:/home/soft/</div></pre></td></tr></table></figure>
<p>也可以用<a href="https://cyberduck.en.softonic.com/mac" target="_blank" rel="external">Cyberduck </a>工具来上传文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd 到上传的Gitlabe的目录下，执行命令</div><div class="line">rpm -i gitlab-ce-10.0.0-ce.0.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<p>配置gitlab</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">将系统防火墙打开HTTP和SSH访问</div><div class="line"></div><div class="line">sudo yum install openssh-server</div><div class="line">sudo yum install postfix （看情况来，如果你想用163，qq之类的发邮件可以不用执行这句）</div><div class="line">sudo lokkit -s http -s ssh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</div><div class="line"></div><div class="line">sudo yum install -y gitlab-ee</div></pre></td></tr></table></figure>
<h4 id="配置Gitlab"><a href="#配置Gitlab" class="headerlink" title="配置Gitlab"></a>配置Gitlab</h4><p>GitLab默认会占用80、8080和9090端口，如果你想安装Jenkins，会通到端口冲突，Jenkins默认也会使用8080端口，所以，这一步操作将会修改GitLab的默认端口为11000、11001和11002。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/gitlab/gitlab.rb</div><div class="line"></div><div class="line">将：</div><div class="line">external_url &apos;http://127.0.0.1&apos;</div><div class="line">修改为：</div><div class="line">external_url &apos;http://&lt;你的服务器地址或域名&gt;:11000&apos;</div><div class="line"></div><div class="line">将：</div><div class="line">unicorn[&apos;port&apos;] = 8080</div><div class="line">修改为：</div><div class="line">unicorn[&apos;port&apos;] = 11001</div><div class="line"></div><div class="line">将：</div><div class="line">prometheus[&apos;listen_address&apos;] = &apos;localhost:9090&apos;</div><div class="line">修改为：</div><div class="line">prometheus[&apos;listen_address&apos;] = &apos;localhost:11002&apos;</div></pre></td></tr></table></figure>
<h4 id="每次修改完时，记得要使用reconfigure命令重新配置"><a href="#每次修改完时，记得要使用reconfigure命令重新配置" class="headerlink" title="每次修改完时，记得要使用reconfigure命令重新配置"></a>每次修改完时，记得要使用reconfigure命令重新配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<p>PS:这里比较重要，如果你的Gitlab是搭建在Centos系统上的，需要开放上面的端口（因为Centos默认开放的端口只有22）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 开放端口11000（记得还有11001和11002也要设置）</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 11000 -j ACCEPT</div><div class="line"># 将修改永久保存到防火墙中（不设置的话，下次重启上面的设置就会失效）</div><div class="line">/etc/rc.d/init.d/iptables save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看安装后的程序运行情况</div><div class="line">sudo gitlab-ctl status</div><div class="line"></div><div class="line"># 重启Gitlab服务</div><div class="line">sudo gitlab-ctl restart</div><div class="line"></div><div class="line"># 启动和关闭Gitlab</div><div class="line">sudo gitlab-ctl start/stop</div></pre></td></tr></table></figure>
<h3 id="邮箱设置（下面这里需要注意的地方，就是要把-号去掉，默认有-这是被注释的）"><a href="#邮箱设置（下面这里需要注意的地方，就是要把-号去掉，默认有-这是被注释的）" class="headerlink" title="邮箱设置（下面这里需要注意的地方，就是要把#号去掉，默认有#这是被注释的）"></a>邮箱设置（下面这里需要注意的地方，就是要把#号去掉，默认有#这是被注释的）</h3><p>PS :这里要说一个坑，就是在安装<code>postfix</code>后，你再去设置其他的邮箱是没有效果的，博主也没有试过两者并存。所以你可以执行<code>yum list | grep postfix</code>查看是否安装了<code>postfix</code>，如果安装了，你可以执行<code>yum remove postfix</code>进行删除</p>
<p>如果你在上面的设置中，选择了<code>postfix</code>发邮件，那么设置方法如下：</p>
<p>执行<code>vi /etc/gitlab/gitlab.rb</code>进入到配置文件，修改下面的参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">external_url &apos;http://&lt;你的服务器地址或域名&gt;:11000&apos;</div><div class="line"></div><div class="line"># gitlab_rails[&apos;gitlab_ssh_host&apos;] = &apos;ssh.host_example.com&apos;</div><div class="line"># gitlab_rails[&apos;time_zone&apos;] = &apos;UTC&apos;</div><div class="line"></div><div class="line">### Email Settings</div><div class="line"> gitlab_rails[&apos;gitlab_email_enabled&apos;] = true</div><div class="line"> gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;gitlab@http://&lt;你的服务器地址或域名&gt;&apos;</div><div class="line"> gitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;GitLab&apos;</div><div class="line"># gitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;noreply@example.com&apos;</div></pre></td></tr></table></figure>
<p>设置完成后，重配<code>postfix</code>，执行<code>sudo dpkg-reconfigure postfix</code> 或者<br><code>sudo vi /etc/postfix/main.cf</code></p>
<p>执行<code>gitlab-ctl tail</code>实时查看所有执行日志，当然你也可以进入<code>/var/log/maillog</code>，查看log，想了解更多的<code>postfix</code>设置的点<a href="http://wiki.ubuntu.org.cn/UbuntuHelp:PostfixBasicSetupHowto/zh" target="_blank" rel="external">这里</a></p>
<h4 id="163邮箱设置"><a href="#163邮箱设置" class="headerlink" title="163邮箱设置"></a>163邮箱设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">### Email Settings</div><div class="line"> gitlab_rails[&apos;gitlab_email_enabled&apos;] = true</div><div class="line"> </div><div class="line">### GitLab email server settings</div><div class="line">###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html</div><div class="line">###! **Use smtp instead of sendmail/postfix.**</div><div class="line"></div><div class="line"> gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.163.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_port&apos;] = 25</div><div class="line"> gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxxx@163.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_password&apos;] = &quot;这里填授权密码&quot;</div><div class="line"> gitlab_rails[&apos;smtp_domain&apos;] = &quot;163.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class="line"> gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_tls&apos;] = true</div><div class="line"></div><div class="line">###! **Can be: &apos;none&apos;, &apos;peer&apos;, &apos;client_once&apos;, &apos;fail_if_no_peer_cert&apos;**</div><div class="line">###! Docs: http://api.rubyonrails.org/classes/ActionMailer/Base.html</div><div class="line"> gitlab_rails[&apos;smtp_openssl_verify_mode&apos;] = &apos;peer&apos;</div><div class="line"> user[&apos;git_user_email&apos;] = &quot;xxxx@163.com&quot;</div><div class="line"> gitlab_rails[&apos;gitlab_email_from&apos;] = &quot;xxxx@163.com&quot;</div></pre></td></tr></table></figure>
<h4 id="QQ企业邮箱设置"><a href="#QQ企业邮箱设置" class="headerlink" title="QQ企业邮箱设置"></a>QQ企业邮箱设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_port&apos;] = 465</div><div class="line"> gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxx@域名.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_password&apos;] = &quot;密码&quot;</div><div class="line"> gitlab_rails[&apos;smtp_domain&apos;] = &quot;域名.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class="line"> gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_tls&apos;] = true</div><div class="line"></div><div class="line">###! **Can be: &apos;none&apos;, &apos;peer&apos;, &apos;client_once&apos;, &apos;fail_if_no_peer_cert&apos;**</div><div class="line">###! Docs: http://api.rubyonrails.org/classes/ActionMailer/Base.html</div><div class="line"> gitlab_rails[&apos;smtp_openssl_verify_mode&apos;] = &apos;none&apos;</div><div class="line"> user[&apos;git_user_email&apos;] = &quot;xxx@域名.com&quot;</div><div class="line"> gitlab_rails[&apos;gitlab_email_from&apos;] = &quot;xxx@域名.com&quot;</div></pre></td></tr></table></figure>
<p>上面两个邮箱的设置，参数<code>user[&#39;git_user_email&#39;]</code>与<code>gitlab_rails[&#39;gitlab_email_from&#39;]</code>是手动添加上去的。在<code>gitlab.rb</code>里也是有这两个参数的，只不过是被注释了。</p>
<h4 id="测试邮箱"><a href="#测试邮箱" class="headerlink" title="测试邮箱"></a>测试邮箱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 进入控制台</div><div class="line">gitlab-rails console</div><div class="line">// 发送测试邮件</div><div class="line">Notify.test_email(&apos;收件人邮箱&apos;, &apos;邮件标题&apos;, &apos;邮件正文&apos;).deliver_now</div></pre></td></tr></table></figure>
<p>更多的邮箱设置点<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md" target="_blank" rel="external">这里</a></p>
<h4 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h4><p>批量添加用户，下面是批量添加的脚本，复制就可用，也可以从<a href="https://github.com/AgoniNemo/other" target="_blank" rel="external">这里</a>下载<br>private_token可以从root用户Settings–&gt;Account查到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#批量创建gitlab用户</div><div class="line"></div><div class="line">url_path=&quot;http://&lt;地址&gt;/api/v4/users&quot;</div><div class="line">private_token=&quot;private_token&quot;</div><div class="line"></div><div class="line">userinfo=&apos;&apos;</div><div class="line">if [[ $# &gt; 0 ]]</div><div class="line">  then</div><div class="line">  echo &quot;路径:$1&quot;</div><div class="line">  userinfo=$1</div><div class="line">else</div><div class="line">  echo &quot;~~~~~~~~~~~~请输入添加用户文件的地址~~~~~~~~~~~~~~~&quot;</div><div class="line">  read path</div><div class="line">  userinfo=$path</div><div class="line">fi</div><div class="line"></div><div class="line">while read line</div><div class="line">do</div><div class="line">    password=`echo $line | awk &apos;&#123;print $1&#125;&apos;`</div><div class="line">    mail=`echo $line | awk &apos;&#123;print $2&#125;&apos;`</div><div class="line">    username=`echo $line | awk &apos;&#123;print $3&#125;&apos;`</div><div class="line">    name=`echo $line | awk &apos;&#123;print $4&#125;&apos;`</div><div class="line">    curl -d &quot;password=$password&amp;email=$mail&amp;username=$username&amp;name=$name&amp;private_token=$private_token&quot; &quot;$url_path&quot;</div><div class="line"></div><div class="line">done &lt;$userinfo</div></pre></td></tr></table></figure></p>
<p>使用时，需要一个添加用户的text文件，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">12345678 test123@qq.com testname1 测试1</div><div class="line">12345678 528634141@qq.com testname2 测试2</div></pre></td></tr></table></figure></p>
<p>脚本使用，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh /Users/xxx/Desktop/GitLabAddUser.sh</div></pre></td></tr></table></figure></p>
<h3 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your.email@example.com&quot; -b 4096</div><div class="line"></div><div class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<h4 id="安装过程中出现的问题："><a href="#安装过程中出现的问题：" class="headerlink" title="安装过程中出现的问题："></a>安装过程中出现的问题：</h4><p>1.在浏览器中访问GitLab出现502错误<br>原因：1.内存不足。2.修改了 gitlab.rb配置文件没有执行重新配置命令。<br>解决办法：1.检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。<br>2.使用sudo gitlab-ctl reconfigure重新配置。</p>
<p>2.80端口冲突<br>原因：Nginx默认使用了80端口。<br>解决办法：为了使Nginx与Apache能够共存，并且为了简化GitLab的URL地址，Nginx端口保持不变，修改Apache的端口为4040。这样就可以直接用使用ip访问Gitlab。而禅道则可以使用4040端口进行访问，像这样：xxx.xx.xxx.xx:4040/zentao。具体修改的地方在/etc/httpd/conf/httpd.conf这个文件中，找到Listen 80这一句并将之注释掉，在底下添加一句Listen 4040，保存后执行service httpd restart重启apache服务即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Listen 4040</div></pre></td></tr></table></figure>
<p>3.GitLab头像无法正常显示</p>
<p>原因：gravatar被墙</p>
<p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">编辑 /etc/gitlab/gitlab.rb</div><div class="line">将</div><div class="line">#gitlab_rails[&apos;gravatar_plain_url&apos;] = &apos;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&apos;</div><div class="line">修改为：</div><div class="line">gitlab_rails[&apos;gravatar_plain_url&apos;] = &apos;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&apos;</div><div class="line">然后在命令行执行：</div><div class="line">sudo gitlab-ctl reconfigure </div><div class="line">sudo gitlab-rake cache:clear RAILS_ENV=production</div></pre></td></tr></table></figure>
<p>4.EOFError: end of file reached<br>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">将</div><div class="line">gitlab_rails[&apos;smtp_tls&apos;]  = false</div><div class="line">修改为：</div><div class="line">gitlab_rails[&apos;smtp_tls&apos;] = true</div></pre></td></tr></table></figure></p>
<h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p>用户之前已经设置了其他的邮箱，修改邮箱后，发现原来的邮箱还是可以用的，你需要在<code>Settings--&gt;Emails</code>里删除原来的邮箱。</p>
<p>Ps:最后有什么不明白的，可以在下方评论或私信博主。</p>
<p>参考文章：</p>
<p><a href="https://segmentfault.com/a/1190000002722631" target="_blank" rel="external">https://segmentfault.com/a/1190000002722631</a></p>
<p><a href="https://www.douban.com/note/640641236/" target="_blank" rel="external">https://www.douban.com/note/640641236/</a></p>
<p><a href="https://my.oschina.net/kylinq/blog/868590" target="_blank" rel="external">https://my.oschina.net/kylinq/blog/868590</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-f3ef73bb372c30dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上周末公司说要搭建一个Gitlabe用来管理代码，于是自己就开始琢磨了，其中配置邮件这里踩了一个坑，被坑了两天时间，现把搭建过程记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitLab" scheme="http://agoninemo.github.io/blog/tags/GitLab/"/>
    
      <category term="Centos" scheme="http://agoninemo.github.io/blog/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Heroku部署失败</title>
    <link href="http://agoninemo.github.io/blog/2017/10/28/Heroku%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5/"/>
    <id>http://agoninemo.github.io/blog/2017/10/28/Heroku部署失败/</id>
    <published>2017-10-28T15:02:46.000Z</published>
    <updated>2017-11-02T11:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-79a956f261d8c785.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用vapor做的后端应用已经在heroku上跑了有一段时间，也遇到一些问题，下面这个问题就是博主在升级了swift 4.0后遇到的，分享出来给同样遇到这些问题的童鞋一个解决思路，如果你有更好方法可以在下方评论。</p>
<a id="more"></a>
<h2 id="以下为部署时的log"><a href="#以下为部署时的log" class="headerlink" title="以下为部署时的log"></a>以下为部署时的log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Counting objects: 19, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (19/19), done.</div><div class="line">Writing objects: 100% (19/19), 4.88 KiB | 2.44 MiB/s, done.</div><div class="line">Total 19 (delta 12), reused 0 (delta 0)</div><div class="line">remote: Compressing source files... done.</div><div class="line">remote: Building source:</div><div class="line">remote:</div><div class="line">remote: -----&gt; Swift app detected</div><div class="line">remote: Cloning into &apos;swiftenv&apos;...</div><div class="line">remote: Swift 3 Heroku Installer</div><div class="line">remote: 🔢  Version: 3.1.1</div><div class="line">remote: 🖥  Operating System: ubuntu1404</div><div class="line">remote: 📦 Installing Swiftenv</div><div class="line">remote: Cloning into &apos;/app/.swiftenv&apos;...</div><div class="line">remote: 🐦 Installing Swift</div><div class="line">remote: Downloading https://swift.org/builds/swift-3.1.1-release/ubuntu1604/swift-3.1.1-RELEASE/swift-3.1.1-RELEASE-ubuntu16.04.tar.gz</div><div class="line">remote: /tmp/swiftenv-3.1.1- /tmp/build_554a6f1c55a490cc4f7d6cb2cc75faaa</div><div class="line">remote:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">remote:                                  Dload  Upload   Total   Spent    Left  Speed</div><div class="line">remote: 100  117M  100  117M    0     0  5651k      0  0:00:21  0:00:21 --:--:-- 7384k</div><div class="line">remote: /tmp/build_554a6f1c55a490cc4f7d6cb2cc75faaa</div><div class="line">remote: 3.1.1 has been installed.</div><div class="line">remote: ✅  Done</div><div class="line">remote: precompile</div><div class="line">remote: -----&gt; Building Package ... this will take a while</div><div class="line">remote: swift-build: error: unsatisfiable</div><div class="line">remote:  !     Push rejected, failed to compile Swift app.</div><div class="line">remote:</div><div class="line">remote:  !     Push failed</div><div class="line">remote: Verifying deploy...</div><div class="line">remote:</div><div class="line">remote: !    Push rejected to xxxserver.</div><div class="line">remote:</div><div class="line">To https://git.heroku.com/xxx.git</div><div class="line">! [remote rejected] master -&gt; master (pre-receive hook declined)</div><div class="line">error: failed to push some refs to &apos;https://git.heroku.com/xxx.git&apos;</div></pre></td></tr></table></figure>
<p>这个问题比较的明显，就是swift的版本对不上，打包不了，当前博主的版本为4.0。脑海中第一个方法就是降级，但是想想，感觉有点不现实，所以只能试试多版本切换了。</p>
<blockquote>
<p>swift版本切换工具 swiftenv</p>
</blockquote>
<p>安装很简单，用<a href="http://www.jianshu.com/p/d229ac7fe77d" target="_blank" rel="external">brew</a>就行了，一行命令搞定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install kylef/formulae/swiftenv</div><div class="line"></div><div class="line">// 安装完成后，可以使用下面的命令查看本地安装的所有版本</div><div class="line">swiftenv versions</div></pre></td></tr></table></figure>
<p>因为要使用到的版本为3.1.1，而本地的版本只有一个就是4.0，所以我们要安装一个3.1.1的，swiftenv已经为我们提供了安装命令install，直接使用就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swiftenv install 3.1.1</div></pre></td></tr></table></figure>
<p>特别说明下，安装好后，版本会直接切换到3.1.1，所以不需要在切换了。当然，你也许只想要这个项目的版本是3.1.1，其他的要最新的，这个需求swiftenv也可以做到，首先你要设置全局的版本，然后再设置局部的版本，就像这个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 新打开一个终端，运行命令</div><div class="line">swiftenv global 4.0</div><div class="line"></div><div class="line">// 切换到你要设置版本项目的根目录下</div><div class="line">swiftenv local 3.1.1</div></pre></td></tr></table></figure>
<p>以上设置的完成时，你的全局版本为4.0，而你的项目的版本为3.1.1，想了解更多的swiftenv命令的可以点<a href="https://swiftenv.fuller.li/en/latest/commands.html#" target="_blank" rel="external">这里</a>。</p>
<p>O了，再把代码上传到heroku上打包，就是这么简单。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-79a956f261d8c785.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用vapor做的后端应用已经在heroku上跑了有一段时间，也遇到一些问题，下面这个问题就是博主在升级了swift 4.0后遇到的，分享出来给同样遇到这些问题的童鞋一个解决思路，如果你有更好方法可以在下方评论。&lt;/p&gt;
    
    </summary>
    
    
      <category term="heroku" scheme="http://agoninemo.github.io/blog/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Heroku休眠问题</title>
    <link href="http://agoninemo.github.io/blog/2017/09/09/Heroku%E4%BC%91%E7%9C%A0%E9%97%AE%E9%A2%98/"/>
    <id>http://agoninemo.github.io/blog/2017/09/09/Heroku休眠问题/</id>
    <published>2017-09-08T16:16:04.000Z</published>
    <updated>2017-09-08T16:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-4ba1b1ccb1800215.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic.jpg"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用Heroku部署应用时，都会遇到一个问题，就是免费的Heroku，在30分钟之内没有访问的话，应用会进入休眠，如果你的应用有一个时间间隔的轮询或者你的应用需要做一些后台操作，这时，会被Heroku强行给休眠。只有当下次有访问时，应用才会被唤醒。而且，还有一个限制就是一天之内最长存活时间不能大于18个小时，所以当前问题就是要解决如何在18个小时的限制内合理的让应用存活。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>先说一个比较省时省力的方法，就是每隔一段时间，发一个请求。博主之前使用的是<a href="http://jk.cloud.360.cn/" target="_blank" rel="external">360网站服务监控</a>，注册完成后进入控制台，选择HTTP监控，创建一个监控项，选择HTTP/HTTPS监控，可以监控多个网站，自定义请求方法。当然这个方法符合大多数应用的需求了。这个方法比较的简单，就不细说了，而且这个时间间隔最长的为60分钟，感觉有点短，需求有点不符合博主的需求。</p>
<p>现在说说第二种方法，这种方法是要<a href="http://www.jianshu.com/p/ae1dbd031d3e" target="_blank" rel="external">科学上网的（不知道这个文章什么时候会被封）</a>.可定时候比较长，可以一天，一周。使用也是比较的简单，点<a href="https://www.google.com/sheets/about/" target="_blank" rel="external">这里</a>进入界面后，点转到google表格，在B1格填上1，如下图（博主的有运行过脚本，所以是3）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1610969-918ef6ccc1574cbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>点工具–&gt;脚本编译器，在myFunction方法里填上以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var d = new Date();</div><div class="line">  var hours = d.getHours();</div><div class="line">  var currentTime = d.toLocaleDateString();</div><div class="line">  var counter = SpreadsheetApp.getActiveSheet().getRange(&apos;B1&apos;).getValues();</div><div class="line"> </div><div class="line">  if (hours &lt;= 6 &amp;&amp; hours &gt;= 22) &#123;</div><div class="line">    var response = UrlFetchApp.fetch(&quot;这里填写你要请求的地址&quot;);</div><div class="line">    SpreadsheetApp.getActiveSheet().getRange(&apos;A&apos; + counter).setValue(&apos;Visted at &apos; + currentTime + &quot; &quot; + hours + &quot;h&quot;);</div><div class="line">    SpreadsheetApp.getActiveSheet().getRange(&apos;B1&apos;).setValue(Number(counter) + 1);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>选择修改–&gt;当前项目触发器，选择好了保存，如果遇到下面的错误，解决方法：点<a href="https://developers.google.com/apps-script/guides/client-verification" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>xxx needs your permission to access your data on Google</p>
</blockquote>
<p> 最后要保存，保存好了以后这个代码就会以你设置的时间运行，上面的代码博主设置的是晚上22点到早上6点前，这个时候访问。</p>
<p> 参考文章：</p>
<p> <a href="https://medium.com/@pandachain/keep-free-heroku-app-awake-during-a-specific-period-using-google-app-script-in-2017-63fe37ee9e9f" target="_blank" rel="external">Keep free Heroku app awake during a specific period using Google App Script in 2017</a></p>
<p> <a href="https://quickleft.com/blog/6-easy-ways-to-prevent-your-heroku-node-app-from-sleeping/" target="_blank" rel="external">6 Easy Ways to Prevent Your Heroku Node App From Sleeping</a></p>
<p>Ps:还有什么不明白的，可以私信博主。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-4ba1b1ccb1800215.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;pic.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在使用Heroku部署应用时，都会遇到一个问题，就是免费的Heroku，在30分钟之内没有访问的话，应用会进入休眠，如果你的应用有一个时间间隔的轮询或者你的应用需要做一些后台操作，这时，会被Heroku强行给休眠。只有当下次有访问时，应用才会被唤醒。而且，还有一个限制就是一天之内最长存活时间不能大于18个小时，所以当前问题就是要解决如何在18个小时的限制内合理的让应用存活。&lt;/p&gt;
    
    </summary>
    
    
      <category term="heroku" scheme="http://agoninemo.github.io/blog/tags/heroku/"/>
    
      <category term="vapor" scheme="http://agoninemo.github.io/blog/tags/vapor/"/>
    
  </entry>
  
  <entry>
    <title>swift上传文件</title>
    <link href="http://agoninemo.github.io/blog/2017/09/01/Swift%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://agoninemo.github.io/blog/2017/09/01/Swift上传文件/</id>
    <published>2017-09-01T11:41:19.000Z</published>
    <updated>2017-09-06T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-c87e0a95952f5395.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic.jpg"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在使用Vapor遇到很多的问题，坑也填了不少，下面就来说说由这个坑引发一系列的问题。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在应用里，需要使用保存用户的上传头像，那么问题来了，如果发布到heroku上，空间是有限的，然而用户量是不可估计的，所以在对比了国内几家的OSS后，选择了<a href="https://portal.qiniu.com/signup?code=3lcfmuw7yntci" target="_blank" rel="external">七牛对象存储</a>做为图片的存储空间，上传的图片的库已经找好，用的是Alamofire。<br><a id="more"></a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在使用Alamofire时，发现一个了问题，我们都知道Alamofire这个库使用得最多的iOS开发，而用Alamofire做iOS的网络请求，它的内部返回的结果都是在主线程下执行的，这样做的确方便了iOS开发的，但是在Vapor里主线程是会被拦截而不被触发的，所以在使用Alamofire上传图片时，结果是不会返回的。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>第一想到的是Alamofire是否有相关的API可以使用，但是遗憾的是，只有在返回结果后，对结果进行处理时才有，所以这个方案fail。第三方的实现不了，那只能自己实现这个功能了。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在查看了七牛的文档后，看到<a href="https://developer.qiniu.com/kodo/api/1312/upload" target="_blank" rel="external">七牛上传api</a>是表单上传，先来看个示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Content-Type:   multipart/form-data; boundary=分隔线</div><div class="line"></div><div class="line">--分隔线</div><div class="line">Content-Disposition:       form-data; name=&quot;token&quot;</div><div class="line">&lt;uploadToken&gt;</div><div class="line">--分隔线</div><div class="line">Content-Disposition:       form-data; name=&quot;key&quot;</div><div class="line">&lt;key&gt;</div><div class="line">--分隔线</div><div class="line">Content-Disposition:       form-data; name=&quot;file&quot;; filename=&quot;&lt;fileName&gt;&quot;</div><div class="line">Content-Type:              application/octet-stream</div><div class="line">Content-Transfer-Encoding: binary</div><div class="line">&lt;fileBinaryData&gt;</div><div class="line">--分隔线--</div></pre></td></tr></table></figure>
<p>上面的示例中，需要传入的参数有三个,token,key,file。在七牛中，<a href="https://developer.qiniu.com/kodo/manual/1208/upload-token" target="_blank" rel="external">token</a>是要自己生成的，这里就不多说明了，想了解的话可以私信博主。上传的<code>boundary=分隔线</code>是给后台解析时用的，博主看到Alamofire里的是以这个<code>String(format: &quot;Alamofire.boundary.%08x%08x&quot;, arc4random(), arc4random())</code>为分隔线的，博主的分隔线只是把Alamofire给去掉。</p>
<p>最后生成像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type:   multipart/form-data; boundary=boundary.73e735e3732b6c0e</div></pre></td></tr></table></figure></p>
<p>知道怎么生成就开始构建了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">let url = URL(string:&quot;http://up.qiniu.com&quot;)</div><div class="line"></div><div class="line">var request = URLRequest.init(url: url!);</div><div class="line">// 请求类型</div><div class="line">request.httpMethod = &quot;POST&quot;;</div><div class="line">// 超时时间</div><div class="line">request.timeoutInterval = 30;</div><div class="line"></div><div class="line">// 设置分隔线</div><div class="line">let boundary = String(format: &quot;boundary.%08x%08x&quot;, arc4random(), arc4random())</div><div class="line">let contentType = String(format: &quot;multipart/form-data;boundary=%@&quot;, boundary)</div><div class="line">request.addValue(contentType, forHTTPHeaderField: &quot;Content-Type&quot;)</div><div class="line"></div><div class="line">// 创建body</div><div class="line">var body = Data();</div><div class="line"></div><div class="line">// 请求参数</div><div class="line">let dict = [&quot;token&quot;:token,&quot;key&quot;: key]</div><div class="line">let keys = dict.keys;</div><div class="line"></div><div class="line">for key in keys &#123;</div><div class="line">    body.append(String(format:&quot;--%@\r\n&quot;,boundary).data(using: .utf8)!)</div><div class="line">    body.append(String(format:&quot;Content-Disposition:form-data;name=\&quot;%@\&quot;\r\n\r\n&quot;,key as String).data(using: .utf8)!)</div><div class="line">    body.append(&quot;\(dict[key]!)\r\n&quot;.data(using: .utf8)!)</div><div class="line">&#125;</div><div class="line">// 数据之前要用 --分隔线 来隔开 ，否则后台会解析失败</div><div class="line">body.append(String(format:&quot;--%@\r\n&quot;,boundary).data(using: .utf8)!)</div><div class="line"></div><div class="line">// 文件</div><div class="line">let key = &quot;1.jpg&quot;</div><div class="line"></div><div class="line">// 文件主体</div><div class="line">let data = UIImagePNGRepresentation(UIImage.init(named: key)!);</div><div class="line"></div><div class="line">let file = &quot;file&quot;</div><div class="line">// 传入最后一个参数</div><div class="line">body.append(String(format:&quot;Content-Disposition:form-data;name=\&quot;%@\&quot;;filename=\&quot;\(key)\&quot;\r\n&quot;, file).data(using: .utf8)!)</div><div class="line"></div><div class="line">// 文件类型</div><div class="line">body.append(&quot;Content-Type:image/jpeg\r\n\r\n&quot;.data(using: .utf8)!)</div><div class="line"></div><div class="line">// 添加文件主体</div><div class="line">body.append(data)</div><div class="line"></div><div class="line">// 使用\r\n来表示这个这个值的结束符</div><div class="line">body.append(&quot;\r\n&quot;.data(using: .utf8)!)</div><div class="line"></div><div class="line">// --分隔线-- 为整个表单的结束符</div><div class="line">body.append(String(format:&quot;--%@--\r\n&quot;,boundary).data(using: .utf8)!)</div><div class="line"></div><div class="line">// 上传表单</div><div class="line">URLSession.shared.uploadTask(with: request, from: body) &#123; (data, resp, error) in</div><div class="line"></div><div class="line">	do&#123;</div><div class="line">	    let d = try JSONSerialization.jsonObject(with: data!, options: .mutableContainers)</div><div class="line">	    print(d)</div><div class="line">	&#125;catch&#123;</div><div class="line">	    print(error)</div><div class="line">	&#125;</div><div class="line">&#125;.resume()</div></pre></td></tr></table></figure>
<p>上面的代码在OS上是没问题的，但是在Linux上就会报错（更新于2017.9.6）</p>
<blockquote>
<p>fatal error: shared is not yet implemented: file Foundation/NSURLSession/NSURLSession.swift </p>
</blockquote>
<p>这是由于使用的URLSession.shared在Linux上还没有被实现，<a href="https://developerslogblog.wordpress.com/2017/04/14/swift-3-on-linux-software-development/" target="_blank" rel="external">这里</a>有说道原因。如果想了解还有那些在Linux上缺失的可以点<a href="https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Status.md" target="_blank" rel="external">这里</a>。shared不能使用，我们就换个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 生成body的方法和上面的一样</div><div class="line">request.httpBody = body</div><div class="line"></div><div class="line">// 使用URLSessionConfiguration.default来生成URLSession</div><div class="line">let session = URLSession(</div><div class="line">        configuration:URLSessionConfiguration.default, delegate: nil, delegateQueue: nil)</div><div class="line"></div><div class="line">let dataTask = session.dataTask(with: request, completionHandler: &#123;[weak self] (data, response, error) -&gt; Void in</div><div class="line">            let tuple = self?.c(data: data, response: response, err: error);</div><div class="line">            completion((tuple?.0)!,tuple?.1)</div><div class="line">        &#125;)</div><div class="line">dataTask.resume()</div></pre></td></tr></table></figure>
<p>以上就是一个很全面的一次表单多参数上传的示例了，还有不明白的童鞋可以私信博主。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-c87e0a95952f5395.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;pic.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在使用Vapor遇到很多的问题，坑也填了不少，下面就来说说由这个坑引发一系列的问题。&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;在应用里，需要使用保存用户的上传头像，那么问题来了，如果发布到heroku上，空间是有限的，然而用户量是不可估计的，所以在对比了国内几家的OSS后，选择了&lt;a href=&quot;https://portal.qiniu.com/signup?code=3lcfmuw7yntci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七牛对象存储&lt;/a&gt;做为图片的存储空间，上传的图片的库已经找好，用的是Alamofire。&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://agoninemo.github.io/blog/tags/swift/"/>
    
      <category term="文件上传" scheme="http://agoninemo.github.io/blog/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>blog首界面实现</title>
    <link href="http://agoninemo.github.io/blog/2017/07/29/blog%E9%A6%96%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
    <id>http://agoninemo.github.io/blog/2017/07/29/blog首界面实现/</id>
    <published>2017-07-29T04:40:32.000Z</published>
    <updated>2017-08-05T04:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>非常感谢一个不知名的博主（偶然间看到的一个博客，发现进入他的博客前，有一个动画界面，非常的好看，点<a href="https://agoninemo.github.io/">这里</a>观看）</p>
<p>开始我们的正题，首先我们要去git上创建一个放首界面的仓库，命名规则是：用户名+github.io<br><a id="more"></a></p>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/git.png" alt="git"></p>
<p>把<a href="https://git.oschina.net/AgoniNemo/backup" target="_blank" rel="external">备份</a>下载下来，按照下面的方式修改为自己的<br><img src="https://git.oschina.net/AgoniNemo/backup/raw/master/html.png" alt="修改html"></p>
<p>备份文件夹里有个favicon.ico图片，把它换为自己的头像就行。当然，你也可以修改html文件里的33行。<br></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">把favicon.ico修改为一个网络地址图片</div><div class="line">&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</div><div class="line"></div><div class="line">修改后（https://git.oschina.net/AgoniNemo/backup/raw/master/html.png为网络图片地址）</div><div class="line">&lt;link rel=&quot;icon&quot; href=&quot;https://git.oschina.net/AgoniNemo/backup/raw/master/html.png&quot; type=&quot;image/x-icon&quot;&gt;</div></pre></td></tr></table></figure>
<p>修改完成后，上传到刚刚创建的git创建去（这个步骤不会的可以自行百度）。</p>
<p>好了首界面就搭建完成了，下面来说说要hexo里要修改的东西,打开根项目的_config.yml文件，修改内容如下：</p>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/blogPic.png" alt="_config.yml修改"></p>
<p>PS:这里要特别的说明下，因为博主的主界面在git上创建的仓库是blog(真正的地址是用户名 + github.io/blog，也就是说第一张图里的Respository name博主填写的是blog)，所以root则是/blog/</p>
<p>好了主要过程就是这样，有什么不明白的可以在下面留言（评论系统需要翻墙，哇嘎嘎）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;非常感谢一个不知名的博主（偶然间看到的一个博客，发现进入他的博客前，有一个动画界面，非常的好看，点&lt;a href=&quot;https://agoninemo.github.io/&quot;&gt;这里&lt;/a&gt;观看）&lt;/p&gt;
&lt;p&gt;开始我们的正题，首先我们要去git上创建一个放首界面的仓库，命名规则是：用户名+github.io&lt;br&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://agoninemo.github.io/blog/tags/blog/"/>
    
      <category term="html" scheme="http://agoninemo.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>用七牛做hexo图床</title>
    <link href="http://agoninemo.github.io/blog/2017/06/18/%E7%94%A8%E4%B8%83%E7%89%9B%E5%81%9Ahexo%E5%9B%BE%E5%BA%8A/"/>
    <id>http://agoninemo.github.io/blog/2017/06/18/用七牛做hexo图床/</id>
    <published>2017-06-18T03:04:35.000Z</published>
    <updated>2017-06-18T04:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>博主用的是Mac系统，下面的命令在windows上有些不同,原理上是一样的，可以在下载七牛命令工具的那个网页查找windows下的命令<br><br>为什么要用七牛做图床，博主觉得以下两点就行了：</p>
<p><ul><br>    <li>它是免费的</li><br>    <li>它有10G的空间</li><br></ul><br><a id="more"></a><br>现在先去做注册了七牛：<a href="https://portal.qiniu.com/signup?code=3lcfmuw7yntci" target="_blank" rel="external">点这里注册</a></p>
<p>注册好了，登录以后点对象存储：<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/1qn.png" alt=""></p>
<p>新建存储空间（创建好了在存储空间列表里可以看到，博主的是blog,还可以在右边的内容管理里看到上传的文件）<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/2qn.png" alt=""><br><br></p>
<p>下面来说说怎样上传，先<a href="https://github.com/qiniu/qshell?ref=developer.qiniu.com" target="_blank" rel="external">点这里</a>去到git上下载七牛的命令工具。<br>下载好以后，找到这个文件，给他重命名为qshell。</p>
<p>打开终端,输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv qshell的绝对路径 /usr/local/bin/（比如：mv /Users/xxxx/Downloads/qsshell /usr/local/bin/）</div></pre></td></tr></table></figure>
<p>再输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x /usr/local/bin/qshell</div></pre></td></tr></table></figure></p>
<p>这个命令就是给qshell这个文件执行权限，完成后再输入下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qshell account AK SK</div></pre></td></tr></table></figure>
<p>上面的AK，SK可以在七牛的这个界面找到:</p>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/3qn.png" alt=""><br><br></p>
<p>下面需要一个json文件，新建文件（比如：新建qnConf.json放在桌面）<br>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">            &quot;bucket&quot;: &quot;blog&quot;,</div><div class="line">            &quot;src_dir&quot;: &quot;/Users/xxx/Documents/Blog/qImg&quot;,</div><div class="line">            &quot;overwrite&quot;: true,</div><div class="line">            &quot;rescan_local&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>bucket的值填上七牛上存储空间的名字（博主的是blog），src_dir是本地要上传到七牛空间的图片，都放这个qImg文件夹。其他两个key不要管，如果想了解可以<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md" target="_blank" rel="external">点这里</a>。</p>
<p>打开终端，输入命令上传图片，图片少就快<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qshell qupload 10  /Users/xxx/Documents/Blog/qnConf.json</div></pre></td></tr></table></figure></p>
<p>后面的路径要修改为你创建的qnConf.json绝对路径，那个数字10是指并发上传的协程数量，默认为1，即文件一个个上传，对于大量小文件来说，可以通过提高该参数值来提升同步速度。<br></p>
<p>觉得麻烦的童鞋<a href="https://github.com/AgoniNemo/other" target="_blank" rel="external">点这里</a>下载博主已经写好的脚本。<br>最后说下图片地址，从下面的界面找到测试域名：<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/4qn.png" alt=""><br><br><br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">域名是这样的</div><div class="line">17lz.bkt.clouddn.com</div><div class="line"></div><div class="line">图片地址是这样</div><div class="line">http://17lz.bkt.clouddn.com/avatar.png</div></pre></td></tr></table></figure>
<p>后面的avatar.png是图片名字，如果在你上面的文件夹里还是文件夹，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/Documents/Blog/qImg是同步的文件</div><div class="line">qimg里面有个image文件夹里面有个1.pgn图片</div><div class="line">在七牛的图片地址是：</div><div class="line">http://17lz.bkt.clouddn.com/image/1.png</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博主用的是Mac系统，下面的命令在windows上有些不同,原理上是一样的，可以在下载七牛命令工具的那个网页查找windows下的命令&lt;br&gt;&lt;br&gt;为什么要用七牛做图床，博主觉得以下两点就行了：&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;它是免费的&lt;/li&gt;&lt;br&gt;    &lt;li&gt;它有10G的空间&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="sh" scheme="http://agoninemo.github.io/blog/tags/sh/"/>
    
      <category term="hexo" scheme="http://agoninemo.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我与ps</title>
    <link href="http://agoninemo.github.io/blog/2017/06/12/%E6%88%91%E4%B8%8Eps/"/>
    <id>http://agoninemo.github.io/blog/2017/06/12/我与ps/</id>
    <published>2017-06-12T12:54:09.000Z</published>
    <updated>2017-06-16T11:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160; 第一次搞Ps的时候，还是比较的早，那时的版本好像还是4.0没有现在这么强大，也没有这么多的功能。<br>&#160; &#160; &#160; &#160; 博主当时还在念初中，还记得那个时候是在QQ的一个bbs模块里看到别人的教程的，当时是给一个长得很漂亮的女生染发、美瞳。那对当初的博主来说，是多么的神奇，于是，博主就走了为期两个月的学习之旅。当然，现在已经没有当初那种感觉了，下面是博主最新的一个设计，也是前年的了，人呀，就是懒呀！<br><a id="more"></a><br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/icon.png" alt="程序猿专用"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 第一次搞Ps的时候，还是比较的早，那时的版本好像还是4.0没有现在这么强大，也没有这么多的功能。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 博主当时还在念初中，还记得那个时候是在QQ的一个bbs模块里看到别人的教程的，当时是给一个长得很漂亮的女生染发、美瞳。那对当初的博主来说，是多么的神奇，于是，博主就走了为期两个月的学习之旅。当然，现在已经没有当初那种感觉了，下面是博主最新的一个设计，也是前年的了，人呀，就是懒呀！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://agoninemo.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>不能说的秘密</title>
    <link href="http://agoninemo.github.io/blog/2017/06/11/%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://agoninemo.github.io/blog/2017/06/11/不能说的秘密/</id>
    <published>2017-06-11T10:13:53.000Z</published>
    <updated>2017-11-15T15:04:53.771Z</updated>
    
    <content type="html"><![CDATA[<script src=/blog/js/crypto-js.js></script><script>
function doDecrypt(pwd, onError) {
	console.log("in doDecrypt");
	var txt = document.getElementById("enc_content").innerHTML;
	var plantext;
	try {
	  	var bytes = CryptoJS.AES.decrypt(txt, pwd);
		plaintext = bytes.toString(CryptoJS.enc.Utf8);
	} catch(err) {
		if(onError) {onError(err);}
		return;
	}
	document.getElementById("enc_content").innerHTML = plaintext;
	document.getElementById("enc_content").style.display = "block";
   document.getElementById("enc_passwd").style.display = "none";
}
</script>
<div id="enc_content" style="display:none">U2FsdGVkX18yNgRvXZsF2Jp04AUKQaulb7LINxcVHqfuKS1UoB6X/qCF9UKE6OgKPYXq8yFyL+Dxqbi9WgBxNLnuQh1jvTjVNXWdH0VrFsiDI48fO4n8i/eSkgFefv0q73cKixYzeUYKuVsowAWv0MR8dfptt8DD5eXPJmHxKXHKpTBKx7TWLVRrXsFFzlteIb3SnHIiAdB3c18bLpDXZ+JBag+8cDduB0IKROafJueVKyhATKn5EG5YJwapAdYoeeihWsaNmV33shv+ZQG4E/nS8XblHxDDkHxvLCI53WlXEwvfkdafxmaAEpx3q+JSe0n5HaoI1aUar7Qhy19p4k/zREkSkHsm3EE+Y/jELQBNyDYuirGsupJaoI09QjwoMGuePzVntWrK3SgQObpKdzxjP0KupZxnR+IY/vCg4DCJ8GIUo9hfNmDZU+XtUDwrlNmUyX8hQcn9GFM+jYkz9Fqts82bFHiLAjpJdLdDNE4dh6f37fHmnp6gHYfyxhjmMYOHFMPYXdOmZcZEEeZuI1fP4BEJDD4Q/gu7mx1dHx0=</div><div id="enc_passwd"> <input id="enc_pwd_input" type="text" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div>
<script>
var onError = function(error) {
	document.getElementById("enc_error").innerHTML = "password error!"
};
function decrypt() {
var passwd = document.getElementById("enc_pwd_input").value;
console.log(passwd);
doDecrypt(passwd, onError);
}
</script>
</div>]]></content>
    
    <summary type="html">
    
      &lt;script src=/blog/js/crypto-js.js&gt;&lt;/script&gt;&lt;script&gt;
function doDecrypt(pwd, onError) {
	console.log(&quot;in doDecrypt&quot;);
	var txt = document.get
    
    </summary>
    
    
      <category term="能看到吗？" scheme="http://agoninemo.github.io/blog/tags/%E8%83%BD%E7%9C%8B%E5%88%B0%E5%90%97%EF%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://agoninemo.github.io/blog/2017/06/11/%E9%9A%8F%E7%AC%94/"/>
    <id>http://agoninemo.github.io/blog/2017/06/11/随笔/</id>
    <published>2017-06-11T09:38:19.000Z</published>
    <updated>2017-06-11T10:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<p> 就像你看到，这就是随笔！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 就像你看到，这就是随笔！&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://agoninemo.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用脚本生成包文件问题汇总</title>
    <link href="http://agoninemo.github.io/blog/2017/06/11/%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90%E5%8C%85%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://agoninemo.github.io/blog/2017/06/11/使用脚本生成包文件问题汇总/</id>
    <published>2017-06-11T09:28:57.000Z</published>
    <updated>2017-06-11T09:38:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-描述文件引起的问题。"><a href="#1-描述文件引起的问题。" class="headerlink" title="1.描述文件引起的问题。"></a>1.描述文件引起的问题。</h3><blockquote>
<p>Provisioning profile “iOS Team Provisioning Profile: com.ccc.xxxx” is Xcode managed, but signing settings require a manually managed profile.</p>
</blockquote>
<p>这个问题是由于在自动管理证书时，直接运行生成的描述文件（也就是Target-&gt;General-&gt;Automatically manage signing打勾的情况，这个描述文件在开发者中心是找不到的，只存在本地），这个描述文件与填写的证书所需的描述文件不一致造成的（天知道为什么不同  T_T），重新再去开发者中心生成新的再安装就好了。</p>
<a id="more"></a>
<h3 id="2-勾选了手动选择证书"><a href="#2-勾选了手动选择证书" class="headerlink" title="2.勾选了手动选择证书"></a>2.勾选了手动选择证书</h3><blockquote>
<p>Provisioning profile “ReleaseProfiles” doesn’t include signing certificate “iPhone Developer: XXX (3R7YA7C56E)”.</p>
</blockquote>
<p>这个问题是由于下面两个地方选择了证书的原因：<br><img src="http://upload-images.jianshu.io/upload_images/1610969-8350ed708ae43d3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不要选择"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1610969-7d30097c9b8bb4c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不能打勾"></p>
<p>PS：还有一个地方是要注意的，如果Target-&gt;General-&gt;Automatically manage signing打勾了，要去掉。</p>
<p>解决方法就是：有勾的去掉勾，有选择的，去掉选择。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-描述文件引起的问题。&quot;&gt;&lt;a href=&quot;#1-描述文件引起的问题。&quot; class=&quot;headerlink&quot; title=&quot;1.描述文件引起的问题。&quot;&gt;&lt;/a&gt;1.描述文件引起的问题。&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Provisioning profile “iOS Team Provisioning Profile: com.ccc.xxxx” is Xcode managed, but signing settings require a manually managed profile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题是由于在自动管理证书时，直接运行生成的描述文件（也就是Target-&amp;gt;General-&amp;gt;Automatically manage signing打勾的情况，这个描述文件在开发者中心是找不到的，只存在本地），这个描述文件与填写的证书所需的描述文件不一致造成的（天知道为什么不同  T_T），重新再去开发者中心生成新的再安装就好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sh" scheme="http://agoninemo.github.io/blog/tags/sh/"/>
    
      <category term="Python" scheme="http://agoninemo.github.io/blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>iOS脚本打包</title>
    <link href="http://agoninemo.github.io/blog/2017/06/10/iOS%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85/"/>
    <id>http://agoninemo.github.io/blog/2017/06/10/iOS脚本打包/</id>
    <published>2017-06-10T12:12:38.000Z</published>
    <updated>2017-09-08T16:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有写过关于使用Python怎样通过Xcode自带的脚手架项目打包，当时那个也是比较简单的单一的，只能打测试包。那时，人也比较的懒，也说没什么了，反正正式包还是用Xcode来打。到现在有点时间了，就又重写了一个，可以说比上一个强大了太多了，支持上传到fir,邮件发送。<a href="https://github.com/AgoniNemo/Auto-IPA" target="_blank" rel="external">下载地址</a></p>
<a id="more"></a>
<p>自动打包说白了就是使用苹果的<code>xcodebuild</code>来实现脚本打包，这个工具在下载了Xcode后，就已经下载下来了，下面来介绍下使用，由于现在的项目都是使用工作空间来集成第三方库的，所以下面使用的是工作空间打包（没有使用cocoapods的童鞋，快去用起来吧），下面说简单说说它的使用。</p>
<p>在终端Archive包导出的完整命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -workspace 项目路径.xcworkspace -scheme Target名字 -configuration 环境（Release或者Debug,默认release） -archivePath Archive包导出路径 clean archive build CODE_SIGN_IDENTITY=&quot;证书名称&quot; PROVISIONING_PROFILE=&quot;配置文件名称&quot; PRODUCT_BUNDLE_IDENTIFIER=&quot;bundleID&quot;</div></pre></td></tr></table></figure>
<p>PROVISIONING_PROFILE xcode里的配置文件名称</p>
<p>CODE_SIGN_IDENTITY  证书名称</p>
<p>导出Archive包有什么用呢，其实这个Archive只是一个打包的方案，它里面会有打包时需要的一些信息，下面执行打包命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild  -exportArchive -archivePath Archive包的路径 -exportOptionsPlist plist配置文件的数据 -exportPath 导出IPA包的路径</div></pre></td></tr></table></figure>
<p>以上就是一个完整的打包命令了，你可以把这两个命令用脚本记录下来</p>
<p>如果对xcodebuild感兴趣，可以在终端执行下面的命令查看详情</p>
<blockquote>
<p>man xcodebuild</p>
</blockquote>
<p>如果你不想折腾，可以使用上面博主写的那个脚本，已经放在git上了。</p>
<h3 id="使用脚本有几个要注意的地方："><a href="#使用脚本有几个要注意的地方：" class="headerlink" title="使用脚本有几个要注意的地方："></a>使用脚本有几个要注意的地方：</h3><ul>
<li>在使用前，先把使用的ruby版本设置成2.0.0版本（在终端执行命令rvm use system）</li>
<li>在下载的文件里找到conf.ini文件，填写需要的证书、描述文件等名字</li>
<li>如果Target-&gt;General-&gt;Automatically manage signing打勾了，要去掉，如下图<br><img src="http://upload-images.jianshu.io/upload_images/1610969-74c4a6f7564c45f8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正确方式"></li>
</ul>
<h3 id="下面来说说怎么找到证书、描述文件"><a href="#下面来说说怎么找到证书、描述文件" class="headerlink" title="下面来说说怎么找到证书、描述文件"></a>下面来说说怎么找到证书、描述文件</h3><ul>
<li>iPhone Developer: xxxxx@xxx.com (LJV3E98B44)就是了</li>
<li>还可以右键–&gt;显示简介，常用名称就是了<br><img src="http://upload-images.jianshu.io/upload_images/1610969-0976addfe850abc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5D8EE31F-9512-440C-B11F-5291CBF69C8F.png"></li>
<li>描述文件就有点麻烦了，先进入到下面的路径<blockquote>
<p>~/Library/MobileDevice/Provisioning Profiles 这是描述文件的路径</p>
</blockquote>
</li>
<li>可以看到描述文件，如果你有多个项目建议你先copy一份放桌面，然后删除全部文件，在安装你从开发者中心下载的描述文件，这时，你在这个文件里就能看到描述文件名字了<br><a href="http://www.jianshu.com/p/7762f79ab1ef" target="_blank" rel="external">其他问题汇总</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有写过关于使用Python怎样通过Xcode自带的脚手架项目打包，当时那个也是比较简单的单一的，只能打测试包。那时，人也比较的懒，也说没什么了，反正正式包还是用Xcode来打。到现在有点时间了，就又重写了一个，可以说比上一个强大了太多了，支持上传到fir,邮件发送。&lt;a href=&quot;https://github.com/AgoniNemo/Auto-IPA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://agoninemo.github.io/blog/tags/iOS/"/>
    
      <category term="ipa" scheme="http://agoninemo.github.io/blog/tags/ipa/"/>
    
      <category term="打包" scheme="http://agoninemo.github.io/blog/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>用UIWebView加载本地文件（设置fragment问题）</title>
    <link href="http://agoninemo.github.io/blog/2017/06/10/%E7%94%A8UIWebView%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%EF%BC%88%E8%AE%BE%E7%BD%AEfragment%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    <id>http://agoninemo.github.io/blog/2017/06/10/用UIWebView加载本地文件（设置fragment问题）/</id>
    <published>2017-06-10T11:54:26.000Z</published>
    <updated>2017-06-10T12:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在加载网络的html的时候，有些html加载太慢了，所以就把整个包文件给放到项目中去了。比如像下面这样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1610969-db40573326464895.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="记得选creat folder references"><br>别告诉我你不知道怎么加载蓝色的文件？<br>PS:好吧，下面就是加载方法：<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/1610969-7fdc735aff652472.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拖文件到项目中的选项"><br>为什么要这么选？因为选第一个的话，你本地的html文件里引用的其他js,css文件就要修改路径了，如果文件多的话，工作量就大了。<br>下面问题就来了，比如网络加载的html的URL是这样的：</p>
<blockquote>
<p><a href="http://www.xxx.com/#!/cb" target="_blank" rel="external">http://www.xxx.com/#!/cb</a></p>
</blockquote>
<p>下面是博主加载本地html的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot; inDirectory:@&quot;dist&quot;];</div><div class="line">NSURL * url = [NSURL fileURLWithPath:path];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:url];</div><div class="line">[_webView loadRequest:request];</div></pre></td></tr></table></figure></p>
<p>然后加载出来了一个空的界面，最后发现要加index.html后面加#!/cb的，当然就想这个容易。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSURL * url = [NSURL fileURLWithPath:[NSString stringWithFormat:@&quot;%@#!/cb&quot;,path]];</div></pre></td></tr></table></figure></p>
<p>URL改成上面那种后，就连界面都加载不出来了，T^T<br>查看了下加载的错误信息，发现是#号被转义了，在网上找下转义的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString *encodedString = (NSString *)CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)url, (CFStringRef)@&quot;!NULL,&apos;()*+,-./:;=?@_~%#[]&quot;, NULL, kCFStringEncodingUTF8);</div></pre></td></tr></table></figure></p>
<p>然后还是没什么用还是加载失败！！！<br>后来发现是方向有问题，URL创建的方法是fileURLWithPath，这个是给个路径的，在后面加东西肯定会出错的，因为这个路径是不存在的。在网上查了下资料，#号叫锚点，是网页内部的超级链接。于是就想像是不是在URL内部设置的。去stackoverflow搜索了下，找到了解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSURL * url = [NSURL fileURLWithPath:path];</div><div class="line">NSString *fragment = @&quot;#!/cb&quot;;</div><div class="line">url = [NSURL URLWithString:fragment relativeToURL:url];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:url];</div></pre></td></tr></table></figure></p>
<p>PS：如果还有更好的方法请在下面评论或者私信博主。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在加载网络的html的时候，有些html加载太慢了，所以就把整个包文件给放到项目中去了。比如像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-db40573326464895.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;记得选creat folder references&quot;&gt;&lt;br&gt;别告诉我你不知道怎么加载蓝色的文件？&lt;br&gt;PS:好吧，下面就是加载方法：&lt;br&gt;
    
    </summary>
    
    
      <category term="ios" scheme="http://agoninemo.github.io/blog/tags/ios/"/>
    
      <category term="UIWebView" scheme="http://agoninemo.github.io/blog/tags/UIWebView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://agoninemo.github.io/blog/2017/06/10/hello-world/"/>
    <id>http://agoninemo.github.io/blog/2017/06/10/hello-world/</id>
    <published>2017-06-10T05:10:11.000Z</published>
    <updated>2017-06-11T10:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hello" scheme="http://agoninemo.github.io/blog/tags/Hello/"/>
    
  </entry>
  
</feed>
