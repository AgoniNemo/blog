<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AgoniNemo&#39;s blog</title>
  <subtitle>在你想要放弃的那一刻,想想为什么当初坚持走到这里...</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://agoninemo.github.io/blog/"/>
  <updated>2021-05-01T02:21:56.371Z</updated>
  <id>http://agoninemo.github.io/blog/</id>
  
  <author>
    <name>AgoniNemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gulp+sass构建小程序</title>
    <link href="http://agoninemo.github.io/blog/2021/05/01/gulp-sass%E6%9E%84%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://agoninemo.github.io/blog/2021/05/01/gulp-sass构建小程序/</id>
    <published>2021-05-01T02:21:04.000Z</published>
    <updated>2021-05-01T02:21:56.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用原生的样式写小程序，在没用过<code>sass</code>写的样式，可能还好。如果用了<code>sass</code>写了之后，你就再也不想写原生的小程序样式了。太不习惯了，很多便利都享受不到，太痛苦了。于是，博主查阅了一些资料与文章，总结了一套方案。</p>
<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>网上的方案主要流行的两种：</p>
<blockquote>
<p>使用vsCode里的一个插件<code>Easy Sass</code></p>
</blockquote>
<p>这个方案就是在编写<code>sass</code>保存后，会自动生成样式代码，你可以在设置里配置样式，比如<code>wxss</code>、<code>css</code>等等。</p>
<blockquote>
<p>gulp工作流</p>
</blockquote>
<p>通过<a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/" target="_blank" rel="external">gulp</a>编写脚本，把编写与运行的小程序分开，实时输出新的有效改动，生成相应的<code>sass</code>文件，还可以配置不同环境编译出来的代码与不同环境的打包。</p>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p>由于要安装的比较多，就不一一给出了，这是总共需要安装的依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">&quot;autoprefixer&quot;: &quot;^9.7.3&quot;,（CSS前缀问题的神器，一些css兼容问题）</div><div class="line">&quot;babel-eslint&quot;: &quot;^10.1.0&quot;,（代码规范）</div><div class="line">&quot;del&quot;: &quot;^6.0.0&quot;,（文件删除）</div><div class="line">&quot;gulp&quot;: &quot;^4.0.2&quot;,（ci）</div><div class="line">&quot;gulp-imagemin&quot;: &quot;^7.1.0&quot;,（图片压缩）</div><div class="line">&quot;gulp-notify&quot;: &quot;^3.2.0&quot;,（用于log通知）</div><div class="line">&quot;gulp-plumber&quot;: &quot;^1.2.1&quot;,（阻止 gulp 出错导致进程退出并输出错误日志）</div><div class="line">&quot;gulp-postcss&quot;: &quot;^9.0.0&quot;,（JS插件来对CSS进行转换的工具）</div><div class="line">&quot;gulp-rename&quot;: &quot;^2.0.0&quot;,（重命名）</div><div class="line">&quot;gulp-replace&quot;: &quot;^1.0.0&quot;,（字符串替换）</div><div class="line">&quot;gulp-sass&quot;: &quot;^4.1.0&quot;,（编译sass文件）</div><div class="line">&quot;gulp-tap&quot;: &quot;^2.0.0&quot;,（遍历文件进行处理）</div><div class="line">&quot;path&quot;: &quot;^0.12.7&quot;,（path 模块提供了一些用于处理文件路径的小工具）</div><div class="line">&quot;yargs&quot;: &quot;^16.2.0&quot;（命令行构造工具Yargs）</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>wxml文件 处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const wxml = () =&gt; &#123;</div><div class="line">return gulp</div><div class="line">        .src(wxmlFiles, &#123; since: gulp.lastRun(wxml) &#125;)</div><div class="line">        .pipe(gulp.dest(distPath));</div><div class="line">&#125;;</div><div class="line">gulp.task(wxml);</div></pre></td></tr></table></figure>
<p>js文件 处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const js = () =&gt; &#123;</div><div class="line">return gulp</div><div class="line">        .src(jsFiles, &#123; since: gulp.lastRun(js) &#125;)</div><div class="line">        .pipe(gulp.dest(distPath));</div><div class="line">&#125;;</div><div class="line">gulp.task(js);</div></pre></td></tr></table></figure>
<p>json文件 处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const json = () =&gt; &#123;</div><div class="line">return gulp</div><div class="line">        .src(jsonFiles, &#123; since: gulp.lastRun(json) &#125;)</div><div class="line">        .pipe(gulp.dest(distPath));</div><div class="line">&#125;;</div><div class="line">gulp.task(json);</div></pre></td></tr></table></figure>
<p>图片文件压缩 处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const img = () =&gt; &#123;</div><div class="line">return gulp</div><div class="line">        .src(imageFiles, &#123; since: gulp.lastRun(img) &#125;)</div><div class="line">        .pipe(imagemin())</div><div class="line">        .pipe(gulp.dest(distPath));</div><div class="line">&#125;;</div><div class="line">gulp.task(img);</div></pre></td></tr></table></figure>
<p>创建watch</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(&quot;watch&quot;, done =&gt; &#123;</div><div class="line">const watchSassFiles = [</div><div class="line">    ...sassFiles,</div><div class="line">    ...DIRECTIMPORT.map(item =&gt; `!$&#123;srcPath&#125;/$&#123;item&#125;/**/*`)</div><div class="line">];</div><div class="line">gulp.watch(jsFiles, js);</div><div class="line">gulp.watch(jsonFiles, json);</div><div class="line">gulp.watch(imageFiles, img);</div><div class="line">gulp.watch(wxmlFiles, wxml);</div><div class="line">done();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>dev工作流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(</div><div class="line">    &quot;dev&quot;,</div><div class="line">    gulp.series(</div><div class="line">        &quot;clean&quot;,</div><div class="line">        gulp.parallel(&quot;wxml&quot;, &quot;js&quot;, &quot;json&quot;, &quot;wxss&quot;, &quot;img&quot;, &quot;devEnv&quot;),</div><div class="line">        &quot;watch&quot;</div><div class="line">    )</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>gulp dev</code>命令就可以看到sass转换成原生样式的项目了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;用原生的样式写小程序，在没用过&lt;code&gt;sass&lt;/code&gt;写的样式，可能还好。如果用了&lt;code&gt;sass&lt;/code&gt;写了之后，你就再也不想写原生的小程序样式了。太不习惯了，很多便利都享受不到，太痛苦了。于是，博主查阅了一些资料与文章，总结了一套方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://agoninemo.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>汇编学习一</title>
    <link href="http://agoninemo.github.io/blog/2021/04/23/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://agoninemo.github.io/blog/2021/04/23/汇编学习一/</id>
    <published>2021-04-23T15:01:49.000Z</published>
    <updated>2021-05-01T02:19:32.165Z</updated>
    
    <content type="html"><![CDATA[<h4 id="bl标号"><a href="#bl标号" class="headerlink" title="bl标号"></a>bl标号</h4><ul>
<li>将下一条指令的地址放入lr(x30)寄存器</li>
<li>转到标号处执行指令</li>
</ul>
<h4 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h4><ul>
<li>默认使用lr(x30)寄存器的值,通过底层指令提示CPU此处作为下条指令地址!</li>
</ul>
<blockquote>
<p>ARM64平台的特色指令,它面向硬件做了优化处理的</p>
</blockquote>
<h4 id="x30寄存器"><a href="#x30寄存器" class="headerlink" title="x30寄存器"></a>x30寄存器</h4><p>x30寄存器存放的是函数的返回地址.当ret指令执行时刻,会寻找x30寄存器保存的地址值!</p>
<blockquote>
<p>注意:在函数嵌套调用的时候.需要讲x30入栈!</p>
</blockquote>
<a id="more"></a>
<h3 id="指令与寄存器"><a href="#指令与寄存器" class="headerlink" title="指令与寄存器"></a>指令与寄存器</h3><ul>
<li>str/stp(前者操作一个寄存器，后者前者操作两个寄存器) 指令 ：将数据从寄存器中读出来,存到内存中</li>
<li>ldr/ldp(前者操作一个寄存器，后者前者操作两个寄存器) 指令 ：将数据从内存中读出来,存到寄存器中</li>
<li>lr 寄存器，也叫x30 寄存器（里面保存着下一条执行的指令）</li>
<li>pc 寄存器 指向马上要执行的代码地址</li>
<li>sp 寄存器 指向了我们的栈，当操作了sp使用内存sub后，结束时要add, 这叫栈平衡（每个函数调用完毕之后，将拉伸的栈空间平衡（将sp加回去））</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>我们都知道函数调用会开辟一段空间（栈空间），但开辟的空间是和什么有关的呢？没错，就是函数的局部变量、参数决定的，系统每次拉伸都是0x10（16 Byte）对齐的。当然，如果这个函数不是叶子函数的话，那么还会涉及到x30、x29寄存器的保护。ARM64下函数的参数是存放到x0到x7(w0到w7)这8个寄存器里面，如果超过8个参数多余的就会入栈，通常情况下函数的返回值放在x0 寄存器里。</p>
<blockquote>
<p>函数嵌套调用：</p>
</blockquote>
<ul>
<li>| - A(开辟) –&gt; B（开辟） –&gt; A（开辟）</li>
<li>| - A&lt;–&gt;A 死的递归（内存溢出）</li>
</ul>
<blockquote>
<p>内存分区域</p>
</blockquote>
<ul>
<li>代码区  特点: 可读可写可执行</li>
<li>栈区域  放参数和局部变量</li>
<li>堆区域  动态申请 可读可写</li>
<li>全局:   可读可写</li>
<li>常量区: 只读!</li>
</ul>
<blockquote>
<p>adrp  x0, 1</p>
</blockquote>
<ul>
<li><ol>
<li>将1的值,左移12位 1 0000 0000 0000 == 0x1000</li>
</ol>
</li>
<li><ol>
<li>将PC寄存器的低12位清零 0x1002e6874  ==&gt; 0x1002e6000</li>
</ol>
</li>
<li><ol>
<li>0x1002e6000 + 0x1000 ==&gt; 0x1002e7000   给 X0 寄存器!!</li>
</ol>
</li>
</ul>
<p>##cmp（Compare）比较指令<br>CMP 把一个寄存器的内容和另一个寄存器的内容或立即数进行比较。但不存储结果，只是正确的更改标志。一般CMP做完判断后会进行跳转，后面通常会跟上B指令！</p>
<ul>
<li>BL 标号：跳转到标号处执行</li>
<li>B.GT  标号：比较结果是<strong>大于（greater than）</strong>，执行标号，否则不跳转</li>
<li>B.GE  标号：比较结果是<strong>大于等于（greater than or equal to）</strong>，执行标号，否则不跳转</li>
<li>B.EQ  标号：比较结果是<strong>等于</strong>，执行标号，否则不跳转</li>
<li>B.HI  标号：比较结果是<strong>无符号大于</strong>，执行标号，否则不跳转</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;bl标号&quot;&gt;&lt;a href=&quot;#bl标号&quot; class=&quot;headerlink&quot; title=&quot;bl标号&quot;&gt;&lt;/a&gt;bl标号&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将下一条指令的地址放入lr(x30)寄存器&lt;/li&gt;
&lt;li&gt;转到标号处执行指令&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ret&quot;&gt;&lt;a href=&quot;#ret&quot; class=&quot;headerlink&quot; title=&quot;ret&quot;&gt;&lt;/a&gt;ret&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;默认使用lr(x30)寄存器的值,通过底层指令提示CPU此处作为下条指令地址!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ARM64平台的特色指令,它面向硬件做了优化处理的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;x30寄存器&quot;&gt;&lt;a href=&quot;#x30寄存器&quot; class=&quot;headerlink&quot; title=&quot;x30寄存器&quot;&gt;&lt;/a&gt;x30寄存器&lt;/h4&gt;&lt;p&gt;x30寄存器存放的是函数的返回地址.当ret指令执行时刻,会寻找x30寄存器保存的地址值!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:在函数嵌套调用的时候.需要讲x30入栈!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="汇编" scheme="http://agoninemo.github.io/blog/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>命令收集</title>
    <link href="http://agoninemo.github.io/blog/2021/04/03/%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <id>http://agoninemo.github.io/blog/2021/04/03/命令收集/</id>
    <published>2021-04-03T04:43:29.000Z</published>
    <updated>2021-04-03T05:54:57.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lipo"><a href="#lipo" class="headerlink" title="lipo"></a>lipo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 查看架构</div><div class="line">$ lipo -info &lt;#构架路径#&gt;</div><div class="line"># 删除架构</div><div class="line">$ lipo &lt;#构架路径#&gt;-thin arm64 -output &lt;#新构架路径#&gt;</div><div class="line"># 合并架构</div><div class="line">$ lipo -create &lt;#构架路径1#&gt; &lt;#构架路径2#&gt; -output &lt;#新构架路径#&gt;</div></pre></td></tr></table></figure>
<h2 id="monkeyparser"><a href="#monkeyparser" class="headerlink" title="monkeyparser"></a>monkeyparser</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 恢复符号表</div><div class="line">$ monkeyparser restoresymbol -t  &lt;#MACH-O#&gt; -o &lt;#新MACH-O#&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lipo&quot;&gt;&lt;a href=&quot;#lipo&quot; class=&quot;headerlink&quot; title=&quot;lipo&quot;&gt;&lt;/a&gt;lipo&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="命令" scheme="http://agoninemo.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>安装MonkeyDev</title>
    <link href="http://agoninemo.github.io/blog/2021/03/27/%E5%AE%89%E8%A3%85MonkeyDev/"/>
    <id>http://agoninemo.github.io/blog/2021/03/27/安装MonkeyDev/</id>
    <published>2021-03-27T09:33:58.000Z</published>
    <updated>2021-05-01T02:16:27.376Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1.环境要求</p>
<ul>
<li>安装最新的theos</li>
</ul>
<blockquote>
<p>sudo git clone –recursive <a href="https://github.com/theos/theos.git" target="_blank" rel="external">https://github.com/theos/theos.git</a> /opt/theos</p>
</blockquote>
<ul>
<li>安装ldid(如安装theos过程安装了ldid，跳过)</li>
</ul>
<blockquote>
<p>brew install ldid</p>
</blockquote>
<a id="more"></a>
<ul>
<li>配置免密码登录越狱设备(如果没有越狱设备，跳过)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -P &apos;&apos;</div><div class="line">ssh-copy-id -i /Users/username/.ssh/id_rsa root@ip</div></pre></td></tr></table></figure>
<h3 id="或者安装sshpass自己设置密码"><a href="#或者安装sshpass自己设置密码" class="headerlink" title="或者安装sshpass自己设置密码:"></a>或者安装sshpass自己设置密码:</h3><blockquote>
<p>brew install <a href="https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb" target="_blank" rel="external">https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</a></p>
</blockquote>
<h3 id="MonkeyDev的安装指令"><a href="#MonkeyDev的安装指令" class="headerlink" title="MonkeyDev的安装指令"></a>MonkeyDev的安装指令</h3><p>(1). 命令选择指定的Xcode进行安装</p>
<p>sudo xcode-select -s /Applications/Xcode-beta.app</p>
<h3 id="默认安装的Xcode为"><a href="#默认安装的Xcode为" class="headerlink" title="默认安装的Xcode为:"></a>默认安装的Xcode为:</h3><blockquote>
<p>xcode-select -p</p>
</blockquote>
<h3 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令:"></a>执行安装命令:</h3><blockquote>
<p>sudo /bin/sh -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-install" target="_blank" rel="external">https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-install</a>)”</p>
</blockquote>
<h3 id="MonkeyDev卸载"><a href="#MonkeyDev卸载" class="headerlink" title="MonkeyDev卸载"></a>MonkeyDev卸载</h3><blockquote>
<p>sudo /bin/sh -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-uninstall" target="_blank" rel="external">https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-uninstall</a>)”</p>
</blockquote>
<h3 id="MonkeyDev更新"><a href="#MonkeyDev更新" class="headerlink" title="MonkeyDev更新"></a>MonkeyDev更新</h3><p>如果没有发布特殊说明，使用如下命令更新即可:</p>
<blockquote>
<p>sudo /bin/sh -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-update" target="_blank" rel="external">https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-update</a>)”</p>
</blockquote>
<h3 id="安装LookinServer"><a href="#安装LookinServer" class="headerlink" title="安装LookinServer"></a>安装LookinServer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;LookinServer&apos;, :configurations =&gt; [&apos;Debug&apos;]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;1.环境要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装最新的theos&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo git clone –recursive &lt;a href=&quot;https://github.com/theos/theos.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/theos/theos.git&lt;/a&gt; /opt/theos&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;安装ldid(如安装theos过程安装了ldid，跳过)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;brew install ldid&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ios" scheme="http://agoninemo.github.io/blog/tags/ios/"/>
    
      <category term="逆向" scheme="http://agoninemo.github.io/blog/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS组件化开发-下篇</title>
    <link href="http://agoninemo.github.io/blog/2021/02/19/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91-%E4%B8%8B%E7%AF%87/"/>
    <id>http://agoninemo.github.io/blog/2021/02/19/iOS组件化开发-下篇/</id>
    <published>2021-02-19T12:49:43.000Z</published>
    <updated>2021-02-19T12:50:23.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上篇回顾与补充"><a href="#上篇回顾与补充" class="headerlink" title="上篇回顾与补充"></a>上篇回顾与补充</h3><p>上篇说到，我们要做项目的组件化，要用到<a href="https://cocoapods.org" target="_blank" rel="external">cocoapods</a>，这个是关键，然后用<code>cocoapods</code>做一个私有索引库，再利用<code>cocoapods</code>创建一个私有库，可以使用它的创建模板命令<code>pod lib create &lt;#type#&gt;</code>，在反馈的信息中，可以选择是否导入几个主流的测试框架对这个组件编写测试用例。然后是编写<code>xxx.podSpec</code>文件，这个文件比较的关键。在下篇中，我们会详细聊聊，上篇中我们已经完成了一个组件的创建、推送、导入，如果你的项目不做二进制化，那只能说组件化也只是完成了一小部分，项目的二进制化才是关键点，博主之前做过测试，同样的代码，二进制化的项目比源码的全量编译快<code>35%</code>，而且项目越大时间差距就越大。</p>
<h3 id="现有方案"><a href="#现有方案" class="headerlink" title="现有方案"></a>现有方案</h3><p>之前在做二进制化时，博主查找了大量的资料，对比了比较的多，先介绍下现有方案</p>
<ul>
<li>在<code>xxx.podSpec</code>文件里环境变量来判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if ENV[&apos;lib&apos;]</div><div class="line">    s.vendored_frameworks = &apos;xxx/Classes/*.framework&apos;</div><div class="line">else</div><div class="line">    s.source_files = &apos;xxx/Classes/**/*&apos;</div><div class="line">end</div><div class="line"></div><div class="line"># 使用时</div><div class="line">lib=1 pod install </div><div class="line"></div><div class="line">每次切换都有问题，有时需要清理Xcode缓存，再重启Xcode。有时甚至要重启电脑才行。</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/tripleCC/cocoapods-bin" target="_blank" rel="external">cocoapods-bin</a> (已经不维护)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">它的二进制化的策略是采用双私有源，因为需要后台的文件服务器，而且与cocoapods紧耦合，需要随时跟进维护</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/CocoaPods/cocoapods-packager" target="_blank" rel="external">cocoapods-packager</a> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">该库已经有很长一段时间不维护了，很多问题都未解决，对于swift特别的不友好</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/leavez/cocoapods-binary" target="_blank" rel="external">cocoapods-binary</a>(官方推荐)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">二进制切换到源码文件的时候都会删除二级制文件，再切回来就要重新编译新的二级制文件，这个过程比较耗时</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/MeetYouDevs/cocoapods-imy-bin" target="_blank" rel="external">cocoapods-imy-bin</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个比较新的插件，需要构建自己的文件服务器，还有些兼容性问题，待观察中...</div></pre></td></tr></table></figure>
<p>由于以上原因，是博主放弃使用上面的方案。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在看了这么多的方案，博主也有了一些启发，采用一个私有库做为第三方库的组件源，使用<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Cartfile</a>去中心化管理工具做第三方库的二进制化。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>在上篇中我们安装了<code>Homebrew</code>，可以直接使用它来安装<code>carthage</code>，终端（terminal）运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install carthage</div><div class="line"></div><div class="line"># 安装完成后可以使用下面的命令来查看版本</div><div class="line">carthage version</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>环境搭建完成后，我们先建一个私有库，这相当于一个中间件，所有的第三方库都通过这个库去引用，我们先用<code>pod lib create CarthageSDK</code>来创建一个组件库<br>，然后<code>cd Example</code>文件里，在端（terminal）运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 创建Cartfile文件，用于引用第三方库</div><div class="line">touch Cartfile</div><div class="line"></div><div class="line"># 编写Cartfile</div><div class="line">vim Cartfile</div><div class="line"></div><div class="line"># 加入如下第三方库，保存退出</div><div class="line">github &quot;SVProgressHUD/SVProgressHUD&quot;,&apos;~&gt; 2.2.5&apos;</div><div class="line"></div><div class="line"># 运行命令</div><div class="line">carthage update --platform iOS</div></pre></td></tr></table></figure>
<p>然后你就会发现出现如下错误，不要着急，这是因为<a href="https://github.com/Carthage/Carthage/issues/3019" target="_blank" rel="external">模拟器与系统库冲突引起的</a>，最新版本还没有解决，但是在<code>Carthage</code>里关闭的<code>issues</code>中有看到<a href="https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md" target="_blank" rel="external">解决方案</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*** Building scheme &quot;SVProgressHUD iOS&quot; in SVProgressHUD.xcworkspace</div><div class="line">Build Failed</div><div class="line">Task failed with exit code 1:.....</div></pre></td></tr></table></figure></p>
<p>解决了这个问题后，在端（terminal）运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">carthage.sh update --platform iOS</div></pre></td></tr></table></figure></p>
<p>等待完成后，我们可以看到在<code>Example</code>文件夹里有个<code>Carthage</code>文件夹，进入<code>Build/iOS</code>里面就可以看到下载好第三方的二进制文件了。由于git的忽略文件的原因，我们需要把这些第三方的二进制文件给拷贝到与<code>Classes</code>同级的目录，命名为<code>iOS</code>,这里博主写了个简单脚本，更新并复制文件夹。然后<code>CartfileSDK.podspec</code>的文件可以这样编写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">    s.name = &apos;CartfileSDK&apos;</div><div class="line">    s.version = &apos;0.1.0&apos;</div><div class="line">    s.summary = &apos;A short description of CartfileSDK.&apos;</div><div class="line"></div><div class="line">    s.description = &lt;&lt;-DESC</div><div class="line">        TODO: Add long description of the pod here.</div><div class="line">    DESC</div><div class="line"></div><div class="line">    s.homepage = &apos;https://github.com/xxx&apos;</div><div class="line">    s.license = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">    s.author = &#123; &apos;swiftcafex&apos; =&gt; &apos;xxx@gmail.com&apos; &#125;</div><div class="line">    s.source = &#123; :git =&gt; &apos;https://github.com/xxx/CartfileSDK.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line">    s.ios.deployment_target = &apos;8.0&apos;</div><div class="line">    s.default_subspec = &apos;Empty&apos;</div><div class="line">    s.static_framework = true</div><div class="line"></div><div class="line">    s.subspec &apos;Empty&apos; do |ss|</div><div class="line">        ss.source_files = &apos;CartfileSDK/Classes/*&apos;</div><div class="line">    end</div><div class="line"></div><div class="line">    s.subspec &apos;SVProgressHUD&apos; do |ss|</div><div class="line">        ss.source_files = &apos;CartfileSDK/iOS/SVProgressHUD.framework/Headers/*&apos;</div><div class="line">        ss.vendored_frameworks = &apos;CartfileSDK/iOS/SVProgressHUD.framework&apos;</div><div class="line">    end</div><div class="line"></div><div class="line">    s.subspec &apos;SVProgressHUDCore&apos; do |ss|</div><div class="line">        ss.dependency &apos;SVProgressHUD&apos;,&apos;~&gt; 2.2.5&apos;</div><div class="line">    end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>默认的<code>Empty</code>里有一个什么也没写的头文件—-<code>Cartfile.h</code>，加这个文件是因为空的文件推不上<code>coccoapods</code>，然后导入的时候也是很简单在<code>Podfile</code> 可以这样写<code>pod Cartfile/SVProgressHUDCore</code>导入源码，<code>pod Cartfile/SVProgressHUD</code>导入二进制文件，<code>.podSpecs</code>文件的依赖也是同理，<code>s.dependency Cartfile/SVProgressHUDCore</code>导入源码，<code>s.dependency Cartfile/SVProgressHUD</code>导入二进制文件。以后项目要导入第三方文件就更新这个组件库就行了，以后依赖的组件，都是通过这个组件，一般也不会随便的更新第三库的，所以也不会很麻烦。</p>
<p>总结：通过这次的项目二进制化，学到了很多东西，也遇到了很多的坑，在不断的填坑成长了很多。送给自己一句话：当你停下来休息的时候，不要忘记别人还在奔跑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;上篇回顾与补充&quot;&gt;&lt;a href=&quot;#上篇回顾与补充&quot; class=&quot;headerlink&quot; title=&quot;上篇回顾与补充&quot;&gt;&lt;/a&gt;上篇回顾与补充&lt;/h3&gt;&lt;p&gt;上篇说到，我们要做项目的组件化，要用到&lt;a href=&quot;https://cocoapods.org&quot;
    
    </summary>
    
    
      <category term="组件化" scheme="http://agoninemo.github.io/blog/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS组件化开发-上篇</title>
    <link href="http://agoninemo.github.io/blog/2021/01/13/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91-%E4%B8%8A%E7%AF%87/"/>
    <id>http://agoninemo.github.io/blog/2021/01/13/iOS组件化开发-上篇/</id>
    <published>2021-01-13T13:15:30.000Z</published>
    <updated>2021-01-13T14:25:50.909Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/iu.jpeg" alt="IU引流"></p>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>在还没有<a href="https://cocoapods.org" target="_blank" rel="external">cocoapods</a>的时候，iOS开发都自己去<code>GitHub</code>上，下载自己需要的第三方库然后通过源码集成，然后每次第三方库更新的时候，还要再去<code>GitHub</code>下载，一个还好，如果多个，就很繁琐，还浪费时间。于是基于这样的情况下，使用<code>ruby</code>语言由<code>Eloy Durán</code>与<code>Fabio Pelosin</code>开发的<a href="https://cocoapods.org" target="_blank" rel="external">cocoapods</a>孕育而生。当然iOS的组件化，也开始了大规模的发展。</p>
<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>业界最常用的组件有3种方式:</p>
<ul>
<li>cocoapods私有库</li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Cartfile</a>去中心化管理工具</li>
<li>多工程管理（为每个模块创建一个xcodeproj）</li>
</ul>
<p>本文主要介绍第一种，其他两种，感兴趣的可以自行<a href="https://www.google.com/" target="_blank" rel="external">google</a></p>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>安装<code>cocoapods</code>之前，需要安装<a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a>,这是一个包管理工具，终端（terminal）运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</div></pre></td></tr></table></figure></p>
<p>建议开启科学上网再安装，这样会快点。安装完成可以使用<code>brew -v</code>查看版本。</p>
<p><code>cocoapods</code>是用gem ruby实现的，要想使用它首先需要有gem ruby的环境。且 MAC 的 OS X系统默认已经可以运行ruby。终端（terminal）运行查看<code>sources</code>命令：<br><code>gem sources -l</code>，如果是第一次安装，是没有打印的，如果已经有源了会显示以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*** CURRENT SOURCES ***</div><div class="line">https://rubygems.org/</div></pre></td></tr></table></figure>
<p>多个源有多个地址，现在最新的是<code>https://gems.ruby-china.com/</code>，更换<code>sources</code>终端（terminal）运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</div></pre></td></tr></table></figure>
<p>开始安装<code>cocoapods</code>终端（terminal）运行：<code>sudo gem install -n /usr/local/bin cocoapods</code><br>安装完成后，终端（terminal）运行<code>pod setup</code>，这个过程会比较长，建议科学上网。<br>最后你需要一个管理私有代码的地方，你可以去看几年前博主写的<a href="https://agoninemo.github.io/blog/2017/11/02/Centos-%E5%AE%89%E8%A3%85GitLab/#more">Centos 安装GitLab</a>来搭建一个私有的代码仓库，也可以使用免费的<a href="https://gitee.com/" target="_blank" rel="external">码云</a>。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>其实使用<code>cocoapods</code>做组件化也有好几种方案,其实表现的比较好的是使用<a href="https://github.com/MeetYouDevs/cocoapods-imy-bin" target="_blank" rel="external">cocoapods-imy-bin</a>插件的方案，但这个方案对于硬件方案有比较大的要求，感兴趣的童鞋可以去看看，现在说的是博主总结的适合个人开发的方案。</p>
<blockquote>
<p>1.创建一个存放私有库的集合仓库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 注意：先要创建的是一个空的git创建，不需要有README.md</div><div class="line">pod repo add &lt;#name#&gt; https://github.com/xxx/xxx.git</div></pre></td></tr></table></figure>
<blockquote>
<p>2.创建一个组件</p>
</blockquote>
<p><code>pod lib create &lt;#type#&gt;</code></p>
<p>然后会网上下载模版填写一些信息，当然创建一个新的库就要填写一些，就很烦，于是写了个很简单的脚本：<br><code>printf &#39;&lt;#userName#&gt;\n&lt;#e-mail#&gt;\niOS\n&lt;#ObjC,Swift#&gt;\nYes\nNone\nNo\n&lt;#prefix#&gt;\n&#39; | pod lib create &lt;#type#&gt;</code></p>
<p>替换相应的&lt;#…#&gt;就可以用了。创建完成后，会自动打开这个组件工程，假设你输入的<code>pod lib create NMDemo</code>创建出来的工程，<code>NMDemo.podSpec</code>文件大概是这样的，以下都是以<code>NMDemo</code>为例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">    s.name = &apos;NMDemo&apos;</div><div class="line">    s.version = &apos;0.1.0&apos;</div><div class="line">    s.summary = &apos;NMDemo项目&apos;</div><div class="line">    s.description = &lt;&lt;-DESC</div><div class="line">        演示 CocoaPods 的私有组件创建</div><div class="line">    DESC</div><div class="line"></div><div class="line">    s.homepage = &apos;https://github.com/xxx&apos;</div><div class="line">    s.license = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">    s.author = &#123; &apos;swiftcafex&apos; =&gt; &apos;xxx@gmail.com&apos; &#125;</div><div class="line">    s.source = &#123; :git =&gt; &apos;https://github.com/xxx/NMDemo.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line">    s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">    s.source_files = &apos;NMDemo/Classes/**/*&apos;</div><div class="line">    #s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 3.2&apos;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>到组件的根目录（_Pods.xcodeproj文件所在的地方），进入<code>NMDemo</code>，可以看到两个文件<code>Assets</code>与<code>Classes</code>，<code>Classes</code>里有个<code>readme.md</code>空文件，删除它，把代码放到这个<code>Classes</code>这个文件夹下就行了。注意到<code>NMDemo.podSpec</code>文件中的配置<code>s.source_files = &#39;NMDemo/Classes/**/*&#39;</code>，如果你需要配置二级目录的话，假如<code>Classes</code>里有<code>A</code>与<code>B</code>两个文件需要这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s.subspec &apos;A&apos; do |ss|</div><div class="line">    ss.source_files = &apos;NMDemo/Classes/A/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line">s.subspec &apos;B&apos; do |ss|</div><div class="line">    ss.source_files = &apos;NMDemo/Classes/B/*.&#123;h,m&#125;&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>当然，一般最好有个头文件引入这两个文件里的内容，这个就需要一个头文件，放在<code>Classes</code>文件夹下的一个<code>.h</code>文件，在上面的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s.source_files = &apos;NMDemo/Classes/*.h&apos;</div><div class="line">s.subspec &apos;A&apos; do |ss|</div><div class="line">    ss.source_files = &apos;NMDemo/Classes/A/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line">s.subspec &apos;B&apos; do |ss|</div><div class="line">    ss.source_files = &apos;NMDemo/Classes/B/*.&#123;h,m&#125;&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>下面来说说依赖这个问题，这里分两种：</p>
<ul>
<li>依赖本地文件</li>
</ul>
<p>比如，<code>A</code>文件里的某个文件依赖<code>B</code>文件里的某个文件，上面配置修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s.source_files = &apos;NMDemo/Classes/*.h&apos;</div><div class="line">s.subspec &apos;A&apos; do |ss|</div><div class="line">    ss.dependency &apos;NMDemo/B&apos;</div><div class="line">    ss.source_files = &apos;NMDemo/Classes/A/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line">s.subspec &apos;B&apos; do |ss|</div><div class="line">    ss.source_files = &apos;NMDemo/Classes/B/*.&#123;h,m&#125;&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<ul>
<li>依赖网络的第三方库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 直接在外部这样写就可以了，也可以写到s.subspec里</div><div class="line">s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 3.2&apos;</div></pre></td></tr></table></figure>
<p>更多的配置可以到<a href="https://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="external">这里</a>查看。</p>
<p>到了这里如果你的项目不需要二进制化，就你可以跳到<code>3.提交私有组件</code>。</p>
<p>现在来说说博主的配置方案，有三个subspec，<code>Core</code>，<code>Products</code>，<code>Universal</code>。先上配置，以<code>NMDemo</code>为例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">    s.name = &apos;NMDemo&apos;</div><div class="line">    s.version = &apos;0.1.0&apos;</div><div class="line">    s.summary = &apos;NMDemo项目&apos;</div><div class="line">    s.description = &lt;&lt;-DESC</div><div class="line">        演示 CocoaPods 的私有组件创建</div><div class="line">    DESC</div><div class="line"></div><div class="line">    s.homepage = &apos;https://github.com/xxx&apos;</div><div class="line">    s.license = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">    s.author = &#123; &apos;swiftcafex&apos; =&gt; &apos;xxx@gmail.com&apos; &#125;</div><div class="line">    s.source = &#123; :git =&gt; &apos;https://github.com/xxx/NMDemo.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line"></div><div class="line">    s.ios.deployment_target = &apos;8.0&apos;</div><div class="line">    s.default_subspec = &apos;Universal&apos;</div><div class="line"></div><div class="line">    s.subspec &apos;Core&apos; do |ss|</div><div class="line">        ss.source_files = &apos;NMDemo/Classes/*.h&apos;</div><div class="line">        ss.subspec &apos;A&apos; do |sss|</div><div class="line">            sss.dependency &apos;NMDemo/Core/B&apos;</div><div class="line">            sss.source_files = &apos;NMDemo/Classes/A/*.&#123;h,m&#125;&apos;</div><div class="line">        end</div><div class="line">        ss.subspec &apos;B&apos; do |sss|</div><div class="line">            sss.source_files = &apos;NMDemo/Classes/B/*.&#123;h,m&#125;&apos;</div><div class="line">        end</div><div class="line">    end</div><div class="line"></div><div class="line">    s.subspec &apos;Products&apos; do |ss|</div><div class="line">        ss.pod_target_xcconfig = &#123; &apos;EXCLUDED_ARCHS[sdk=iphonesimulator*]&apos; =&gt; &apos;arm64&apos; &#125;</div><div class="line">        ss.source_files = &apos;NMDemo/Classes/*.h&apos;</div><div class="line">        ss.vendored_frameworks = &apos;NMDemo/Products/NMDemo.framework&apos;</div><div class="line">    end</div><div class="line"></div><div class="line">    s.subspec &apos;Universal&apos; do |ss|</div><div class="line">        # 表示pod 本身被依赖时，修改的编译选项</div><div class="line">        ss.pod_target_xcconfig = &#123; &apos;EXCLUDED_ARCHS[sdk=iphonesimulator*]&apos; =&gt; &apos;arm64&apos; &#125;</div><div class="line">        ss.source_files = &apos;NMDemo/Classes/*.h&apos;</div><div class="line">        ss.vendored_frameworks = &apos;NMDemo/Universal/NMDemo.framework&apos;</div><div class="line">    end</div><div class="line">end</div></pre></td></tr></table></figure>
<p><code>Core</code>为源码，<code>Products</code>为正式环境静态库，<code>Universal</code>为通用静态库，一般通过<code>s.default_subspec</code>来配置默认加载。然后开发者都需要导入的时候可以在<code>Podfile</code>通过，<code>pod &#39;NMDemo/Core&#39;</code>与<code>pod &#39;NMDemo&#39;</code>来切换源码与静态库。这里提下在<code>Universal</code>与<code>Products</code>里分别放入通用与正式环境静态库。</p>
<blockquote>
<p>3.提交私有组件</p>
</blockquote>
<p>提交前，先验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># https://github.com/xxx/xxx.git为私有索引库（命令 pod repo add &lt;#name#&gt; https://github.com/xxx/xxx.git添加的仓库）</div><div class="line"># --skip-import-validation是因为cocoapods检查的时候是用模拟器编译的，而如果组件没有包含i386架构的静态库，就会不通过，只有设置导入不验证才能通过</div><div class="line">pod lib lint --allow-warnings --sources=https://github.com/CocoaPods/Specs.git,https://github.com/xxx/Specs.git --skip-import-validation</div></pre></td></tr></table></figure>
<p>提交私有组件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># &lt;#name#&gt; 为命令pod repo add &lt;#name#&gt; https://github.com/xxx/xxx.git添加的索引库名称</div><div class="line"># 根目录执行，在执行这命令前，记得把组件提交到git上</div><div class="line">pod repo push &lt;#name#&gt; NMDemo.podspec --sources=https://github.com/CocoaPods/Specs.git,https://github.com/xxx/Specs.git --allow-warnings</div></pre></td></tr></table></figure>
<p>使用时，在<code>Podfile</code>里设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">use_frameworks!</div><div class="line">source &apos;https://github.com/xxx/Specs.git&apos;</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class="line"></div><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line"></div><div class="line">target &apos;NMDemo_Example&apos; do</div><div class="line">    # pod &apos;NMDemo&apos;, :path =&gt; &apos;../&apos;</div><div class="line">    pod &apos;NMDemo&apos;</div><div class="line">end</div><div class="line"></div><div class="line">post_install do |installer|</div><div class="line">    installer.pods_project.build_configurations.each do |config|</div><div class="line">        config.build_settings[&quot;EXCLUDED_ARCHS[sdk=iphonesimulator*]&quot;] = &quot;arm64&quot;</div><div class="line">    end</div><div class="line">end</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/iu.jpeg&quot; alt=&quot;IU引流&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;&gt;&lt;/a&gt;历史&lt;/h3&gt;&lt;p&gt;在还没有&lt;a href=&quot;https://cocoapods.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cocoapods&lt;/a&gt;的时候，iOS开发都自己去&lt;code&gt;GitHub&lt;/code&gt;上，下载自己需要的第三方库然后通过源码集成，然后每次第三方库更新的时候，还要再去&lt;code&gt;GitHub&lt;/code&gt;下载，一个还好，如果多个，就很繁琐，还浪费时间。于是基于这样的情况下，使用&lt;code&gt;ruby&lt;/code&gt;语言由&lt;code&gt;Eloy Durán&lt;/code&gt;与&lt;code&gt;Fabio Pelosin&lt;/code&gt;开发的&lt;a href=&quot;https://cocoapods.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cocoapods&lt;/a&gt;孕育而生。当然iOS的组件化，也开始了大规模的发展。&lt;/p&gt;
    
    </summary>
    
    
      <category term="组件化" scheme="http://agoninemo.github.io/blog/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>组件化中pod报错记录与解决方案</title>
    <link href="http://agoninemo.github.io/blog/2020/12/13/%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%ADpod%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://agoninemo.github.io/blog/2020/12/13/组件化中pod报错记录与解决方案/</id>
    <published>2020-12-13T08:49:49.000Z</published>
    <updated>2021-01-13T14:25:51.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集成cocoapods的时候报错"><a href="#集成cocoapods的时候报错" class="headerlink" title="集成cocoapods的时候报错"></a>集成cocoapods的时候报错</h3><p>Pods written in Swift can only be integrated as frameworks; add use_frameworks! to your Podfile or target to opt into using it. The Swift Pods being used are: ReactiveCocoa, ReactiveSwift, and Result</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解决：在想应的pod &apos;ReactiveCocoa&apos;下添加use_frameworks!</div><div class="line">ps:注意use_frameworks!后面的！号</div></pre></td></tr></table></figure>
<h3 id="集成cocoapods的时候报错-1"><a href="#集成cocoapods的时候报错-1" class="headerlink" title="集成cocoapods的时候报错"></a>集成cocoapods的时候报错</h3><p>‘xxx’ file not found with  include; use “quotes” instead</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决：引用路径的问题，更改引用路径。例如：#import &lt;JSONModel.h&gt;，改成#import &lt;JSONModel/JSONModel.h&gt; 就可以了</div></pre></td></tr></table></figure>
<h3 id="集成cocoapods的时候报错-2"><a href="#集成cocoapods的时候报错-2" class="headerlink" title="集成cocoapods的时候报错"></a>集成cocoapods的时候报错</h3><p>include of non-modular header inside framework module ‘XXX’: ‘XXX’ [-Werror,-Wnon-modular-include-in-framework-module]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决：引用路径的问题，更改引用路径。例如：#import &quot;JSONModel.h&quot;，改成#import &lt;JSONModel/JSONModel.h&gt; 就可以了</div></pre></td></tr></table></figure>
<h3 id="集成cocoapods的时候报错-3"><a href="#集成cocoapods的时候报错-3" class="headerlink" title="集成cocoapods的时候报错"></a>集成cocoapods的时候报错</h3><p>include of non-modular header inside framework module ‘XXX’: ‘XXX’ [-Werror,-Wnon-modular-include-in-framework-module]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解决：如果第3条解决不了，在pod spec lint后添加--use-libraries。同时在pod trunk push 或者pod repo push 【私有库】的后添加--use-libraries</div><div class="line">--use-libraries表示使用静态库或者是framework，这里主要是解决当我们依赖一些framework库后校验提示找不到库的时候用到。</div></pre></td></tr></table></figure>
<h3 id="集成cocoapods的时候报错-4"><a href="#集成cocoapods的时候报错-4" class="headerlink" title="集成cocoapods的时候报错:"></a>集成cocoapods的时候报错:</h3><p>Encountered an unknown error (Unable to find a specification for xxx depended upon by xxx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决：在集成cocoapods的时候添加私有或者公有或者两者都有的sources。如公有的sources。pod repo push xiaofengCocoapodsRepo --sources=https://github.com/CocoaPods/Specs.git</div></pre></td></tr></table></figure>
<h3 id="集成cocoapods的时候报错-5"><a href="#集成cocoapods的时候报错-5" class="headerlink" title="集成cocoapods的时候报错"></a>集成cocoapods的时候报错</h3><p>The ‘Pods-<em>*</em>_Example’ target has transitive dependencies that include statically linked binaries: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Podfile 设置</div><div class="line">use_frameworks!</div><div class="line"></div><div class="line">.podspec 设置</div><div class="line">s.static_framework = true</div></pre></td></tr></table></figure>
<h3 id="repo-push的时候报错"><a href="#repo-push的时候报错" class="headerlink" title="repo push的时候报错"></a>repo push的时候报错</h3><ul>
<li>ERROR | [iOS] [XXX/XXX] file patterns: The <code>vendored_frameworks</code> pattern did not match any file.  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">检查Frameworks的路径是不是正确的</div><div class="line">原因是git 没有push，repo push 走的是网络验证，pod lib lint 走的是本地验证</div></pre></td></tr></table></figure>
<h3 id="以下报错缺少cup架构引起"><a href="#以下报错缺少cup架构引起" class="headerlink" title="以下报错缺少cup架构引起"></a>以下报错缺少cup架构引起</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 报错一</div><div class="line">ld: building for iOS Simulator, but linking in dylib built for iOS, file &apos;.framework/FBAllocationTracker&apos; for architecture arm64</div><div class="line"></div><div class="line"># 报错二</div><div class="line">Undefined symbols for architecture i386:</div><div class="line">  &quot;_OBJC_CLASS_$_NMRouter&quot;, referenced from:</div><div class="line">      objc-class-ref in AppDelegate.o</div><div class="line">  &quot;_Default&quot;, referenced from:</div><div class="line">      -[QMUIConfigurationTemplate themeName] in QMUIConfigurationTemplate.o</div><div class="line">  &quot;_IdentifierDark&quot;, referenced from:</div><div class="line">      ___55-[QMUIConfigurationTemplate applyConfigurationTemplate]_block_invoke in QMUIConfigurationTemplate.o</div><div class="line">      ___55-[QMUIConfigurationTemplate applyConfigurationTemplate]_block_invoke_2 in QMUIConfigurationTemplate.o</div><div class="line">      ___55-[QMUIConfigurationTemplate applyConfigurationTemplate]_block_invoke_3 in QMUIConfigurationTemplate.o</div><div class="line">      -[QMUIConfigurationTemplateDark themeName] in QMUIConfigurationTemplateDark.o</div><div class="line">  &quot;_OBJC_CLASS_$_XXXXXX&quot;, referenced from:</div><div class="line">      objc-class-ref in AppDelegate.o</div><div class="line">  &quot;_XXXXXIdentifier&quot;, referenced from:</div><div class="line">      -[QMUIConfigurationTemplate shouldApplyTemplateAutomatically] in QMUIConfigurationTemplate.o</div><div class="line">      -[QMUIConfigurationTemplateDark shouldApplyTemplateAutomatically] in QMUIConfigurationTemplateDark.o</div><div class="line">ld: symbol(s) not found for architecture i386</div><div class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div></pre></td></tr></table></figure>
<p>在 Build Setting -&gt; Excluded Architectures 添加 <code>Any iOS Simulator SDK</code> 对应的值为 <code>arm64 i386</code></p>
<p>PS:这是设置为排除i386、arm64架构</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;集成cocoapods的时候报错&quot;&gt;&lt;a href=&quot;#集成cocoapods的时候报错&quot; class=&quot;headerlink&quot; title=&quot;集成cocoapods的时候报错&quot;&gt;&lt;/a&gt;集成cocoapods的时候报错&lt;/h3&gt;&lt;p&gt;Pods written i
    
    </summary>
    
    
      <category term="pod" scheme="http://agoninemo.github.io/blog/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>活着</title>
    <link href="http://agoninemo.github.io/blog/2020/11/09/%E6%B4%BB%E7%9D%80/"/>
    <id>http://agoninemo.github.io/blog/2020/11/09/活着/</id>
    <published>2020-11-08T16:13:44.000Z</published>
    <updated>2021-01-13T14:25:51.002Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>以前博主很喜欢看小说，也许是喜欢那种精神上的满足感吧。后来，写的小一点的小说越来越少了，就在网上找了下。开始注意到这个小说是因为它的名字吧，在开篇里，作者都在用一种欣慰的语气来述说这个写作经历。怀着好奇，博主开始了阅读。</p>
<p>更新于 2020-11-12  00:30:48</p>
<h4 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h4><p>刚读完，就一个字，惨。福贵是真的惨，亲手把一个又一个的亲人给送走。其实开始的时候，福贵这么一个人设很不讨读者喜欢。年经的时候，什么都沾，真的败家，不过话又说回来了，如果他真不败家，可能在那个特殊时期，就要被斗倒了。在家珍被他爹接回家的时候，博主开始同情了福贵，之前的种种，也随着故事的开展而消散了。在那种送走了自己的儿子，又送走自己的老婆时，博主是真的哭了，一个三十岁的大男人，哭得像个孩子一样，不知道是为了福贵，还是为未知的将来。也就在这时，博主才真正的了解到书名《活着》，在那种情况，人很难再活下去，精神都要崩溃了。也为里面的福贵的那种一定要活下去的情绪感染了。其实在那个时期，能活下去是真的难，博主命还算好，没有经历过那个时期，但是，小时候，博主也是苦呀，家里也很苦难，想起来，也为自己的父母感慨，真不知道那么难的日子他们是怎么过的。想想现在的日子，不知道我们欲望太高了，还是生活太好过了，人的想法多了，总感觉自己的日子苦。其实比起书里的福贵，我们的生活好太多了，一万倍都有了，人也许要常常的忆苦思甜才行，要不幸福感太低了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;以前博主很喜欢看小说，也许是喜欢那种精神上的满足感吧。后来，写的小一点的小说越来越少了，就在网上找了下。开始注意到这个小说是因为它的名字吧，
    
    </summary>
    
    
      <category term="reading" scheme="http://agoninemo.github.io/blog/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>组件化一些注意与问题</title>
    <link href="http://agoninemo.github.io/blog/2020/11/01/%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%B8%8E%E9%97%AE%E9%A2%98/"/>
    <id>http://agoninemo.github.io/blog/2020/11/01/组件化一些注意与问题/</id>
    <published>2020-11-01T08:10:21.000Z</published>
    <updated>2021-01-13T14:25:51.050Z</updated>
    
    <content type="html"><![CDATA[<p>创建模板与推着的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">创建模板：pod lib create 名字</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 添加索引库</div><div class="line">pod repo add Specs 地址</div><div class="line"></div><div class="line"># 校验本地库</div><div class="line">pod lib lint --allow-warnings</div><div class="line"></div><div class="line"># 推送静态库的索引</div><div class="line">pod repo push Specs name.podspec --allow-warnings</div><div class="line"></div><div class="line"># 更新某个索引</div><div class="line">pod repo update Specs</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># podspec文件的依赖问题</div><div class="line">假设私有库叫NMKit,在Classes里，分别有A、B、C、D 4个文件夹和NMKit.h文件，A文件夹有A.h、A.m文件，B文件夹有B.h、B.m文件，C文件夹有C.h、C.m文件，D文件夹有D.h、D.m文件。</div><div class="line">他们的依赖关系是A依赖B，B依赖C，C依赖D。</div><div class="line"></div><div class="line">podspec文件应该是这样的：</div><div class="line"></div><div class="line">s.source_files = &apos;NMKit/Classes/NMKit.h&apos;</div><div class="line"></div><div class="line">s.subspec &apos;D&apos; do |ss|</div><div class="line">	ss.source_files = &apos;NMKit/Classes/D/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line"></div><div class="line">s.subspec &apos;C&apos; do |ss|</div><div class="line">	ss.dependency &apos;NMKit/D&apos;</div><div class="line">	ss.source_files = &apos;NMKit/Classes/C/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line"></div><div class="line">s.subspec &apos;B&apos; do |ss|</div><div class="line">	ss.dependency &apos;NMKit/C&apos;</div><div class="line">	ss.source_files = &apos;NMKit/Classes/B/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line"></div><div class="line">s.subspec &apos;A&apos; do |ss|</div><div class="line">	ss.dependency &apos;NMKit/B&apos;</div><div class="line">	ss.source_files = &apos;NMKit/Classes/A/*.&#123;h,m&#125;&apos;</div><div class="line">end</div><div class="line">  </div><div class="line"></div><div class="line">PS:可以看出依赖的写法路径是生成Pod后的路径,同一个文件夹下的文件引用，不需要添加依赖</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># The repo `Specs` at `../../../../.cocoapods/repos/Specs` is not clean</div><div class="line"># git 已经变动 </div><div class="line">cd ../../../../.cocoapods/repos/Specs （这是上面给的路径）</div><div class="line">git clean -f</div><div class="line">pod cache clean --all</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pod install 出错</div><div class="line">[!] CocoaPods could not find compatible versions for pod &quot;NMNetwork/Main&quot;:</div><div class="line">  In Podfile:</div><div class="line">    Network (from `../`) was resolved to 0.1.0, which depends on</div><div class="line">      Network/Main (= 0.1.0)</div><div class="line"></div><div class="line">Specs satisfying the `Network/Main (= 0.1.0)` dependency were found, but they required a higher minimum deployment target.</div><div class="line"></div><div class="line">检查Podfile里的platform :ios与xx.podspec文件中的s.ios.deployment_target是否一致</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">pod lib lint 出错</div><div class="line"></div><div class="line"> -&gt; NMKit (0.1.0)</div><div class="line">    - ERROR | [iOS] unknown: Encountered an unknown error (Unable to find a specification for `NMXXX` depended upon by `NMKit `</div><div class="line"></div><div class="line">You have either:</div><div class="line"> * out-of-date source repos which you can update with `pod repo update` or with `pod install --repo-update`.</div><div class="line"> * mistyped the name or version.</div><div class="line"> * not added the source repo that hosts the Podspec to your Podfile.</div><div class="line"></div><div class="line">Note: as of CocoaPods 1.0, `pod repo update` does not happen on `pod install` by default.</div><div class="line">) during validation.</div><div class="line"></div><div class="line">--private 代表私有</div><div class="line">--use-libraries 依赖了静态库</div><div class="line">--allow-warnings 允许警告</div><div class="line"> --sources= 指定了私有Repo地址和cocoapods官方的Repo</div><div class="line">pod lib lint --sources=git@git.xxxx.git,https://github.com/CocoaPods/Specs.git --private --use-libraries --allow-warnings</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># --no-mangle</div><div class="line">表示不使用name mangling技术，pod package默认是使用这个技术的。我们能在用pod package生成二进制库的时候会看到终端有输出Mangling symbols和Building mangled framework。表示使用了这个技术。如果你的pod库没有其他依赖的话，那么不使用这个命令也不会报错。但是如果有其他依赖，不使用--no-mangle这个命令的话，那么你在工程里使用生成的二进制库的时候就会报错：Undefined symbols for architecture x86_64</div><div class="line"></div><div class="line"># 加 --library 表示打包.a</div><div class="line"># --force 强制覆盖之前存在的文件</div><div class="line"># --embedded 生成静态.framework </div><div class="line">pod package name.podspec --library --force --no-mangle --spec-sources=http://xxx.git,https://github.com/CocoaPods/Specs.git</div></pre></td></tr></table></figure>
<h4 id="源码与静态库切换"><a href="#源码与静态库切换" class="headerlink" title="源码与静态库切换"></a>源码与静态库切换</h4><p>方案一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#默认使用Framework</div><div class="line">s.default_subspec = &apos;Framework&apos;</div><div class="line"></div><div class="line">s.subspec &apos;Source&apos; do |ss|</div><div class="line">  [这里放源码]</div><div class="line">   ss.source_files = &apos;A/Classes/**/*&apos;,</div><div class="line">end</div><div class="line"></div><div class="line">s.subspec &apos;Framework&apos; do |ss|</div><div class="line">	[这里放静态库头文件]</div><div class="line">	 ss.source_files = &apos;A/Classes/**/*&apos;</div><div class="line">  if ENV[&apos;ENV&apos;]</div><div class="line">      ss.vendored_frameworks = &apos;ProductsTest.framework&apos;</div><div class="line">  else</div><div class="line">      ss.vendored_frameworks = &apos;UniversalTest.framework&apos;</div><div class="line">  end</div><div class="line">end</div><div class="line"></div><div class="line"></div><div class="line">#使用使用源码</div><div class="line">#pod &apos;NMImagePicker/Source&apos;</div><div class="line">#使用使用静态库</div><div class="line">#pod &apos;NMImagePicker/Framework&apos;</div><div class="line">#使用使用生产环境静态库</div><div class="line">ENV pod install</div></pre></td></tr></table></figure>
<p>方案二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if ENV[&apos;ENV&apos;] == &apos;1&apos;</div><div class="line">  ss.source_files = &apos;Test/Classes/Test.h&apos; </div><div class="line">  s.vendored_frameworks = &apos;Test/Products/Test.framework&apos;</div><div class="line">elsif ENV[&apos;ENV&apos;] == &apos;2&apos;</div><div class="line">  s.source_files = &apos;Test/Classes/Test.h&apos;</div><div class="line">  s.vendored_frameworks = &apos;Test/Universal/Test.framework&apos;</div><div class="line">else</div><div class="line">  s.source_files = &apos;Test/Classes/**/*&apos;</div><div class="line">end</div><div class="line"></div><div class="line"></div><div class="line">ENV=2 pod install</div></pre></td></tr></table></figure>
<p>两种方案都差不多，第二种看来比较简单，但是如果记错了<code>ENV</code>，也是很头痛的。第一种方案，在于默认加载静态库，后面只需要一个<code>ENV</code>来判断版本，比第二种，有优势，看各人选择吧。</p>
<h3 id="关于iOS架构方面的知识"><a href="#关于iOS架构方面的知识" class="headerlink" title="关于iOS架构方面的知识"></a>关于iOS架构方面的知识</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arm64：iPhone5s，iPhone6、7、8，iPhone6、7、8 Plus，iPhone X，iPad Air，iPad mini2(iPad mini with Retina Display)，</div><div class="line">arm64e：XS/XS Max/XR/ iPhone 11, iPhone 11 pro</div><div class="line">armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display)</div><div class="line">armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4</div><div class="line"></div><div class="line">i386是针对intel通用微处理器32位处理器</div><div class="line">x86_64是针对x86架构的64位处理器</div><div class="line"></div><div class="line">模拟器32位处理器测试需要i386架构，</div><div class="line">模拟器64位处理器测试需要x86_64架构，</div><div class="line">真机32位处理器需要armv7,或者armv7s架构，</div><div class="line">真机64位处理器需要arm64架构。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">模拟器连接了arm64架构包</div><div class="line"></div><div class="line">ld: in Test.framework/Test(Test.o), building for iOS Simulator, but linking in object file built for iOS, file &apos;/Test.framework/Test&apos; for architecture arm64</div><div class="line">    clang: error: linker command failed with exit code 1 (use -v to see invocation)</div><div class="line">    </div><div class="line">    ** BUILD FAILED **</div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/63607158/xcode-12-building-for-ios-simulator-but-linking-in-object-file-built-for-ios" target="_blank" rel="external">Xcode 12, building for iOS Simulator, but linking in object file built for iOS, for architecture arm64</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ld: warning: ignoring file Test.framework/Test, missing required architecture i386 in file Test.framework/Test</div><div class="line"></div><div class="line">pod校验的时候，全校验模拟器架构，说的是缺少所需的i386架构，问题是打的静态库已经不再提供i386架构了，所以只能跳过这个错误，使用以下命令</div><div class="line"></div><div class="line">pod lib lint --skip-import-validation</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建模板与推着的命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;创建模板：pod lib create 名字&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 添加索引库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pod repo add Specs 地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 校验本地库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pod lib lint --allow-warnings&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 推送静态库的索引&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pod repo push Specs name.podspec --allow-warnings&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 更新某个索引&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pod repo update Specs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="pod" scheme="http://agoninemo.github.io/blog/tags/pod/"/>
    
      <category term="组件" scheme="http://agoninemo.github.io/blog/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vapor 4.0开启</title>
    <link href="http://agoninemo.github.io/blog/2020/09/29/Vapor-4-0%E5%BC%80%E5%90%AF/"/>
    <id>http://agoninemo.github.io/blog/2020/09/29/Vapor-4-0开启/</id>
    <published>2020-09-29T06:00:09.000Z</published>
    <updated>2021-01-13T14:25:50.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Vapor还是2.0，swift使用的还是3.0的时候，博主已经用vapor开发过一个小视频的网站了，虽然有这样，那样的问题，但是还是成功的部署在Heroku，就在前几天，更新也Xcode，发现已经不支持<code>swift 3.0</code>了，索性把Vapor和Herku都升级了，现在使用Vapor 4.0开发。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>博主使用的是<code>brew</code>安装的，怕旧版本的<code>Vapor</code>会影响安装，所以先把旧的删除。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew upgrade vapor</div></pre></td></tr></table></figure>
<p>然后出现以下问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Error: Checksum mismatch.</div><div class="line">Expected: ab81211a2052ccaa6d050741c433b728d0641523d8742eef23a5b450811e5104</div><div class="line">  Actual: ab087b15a24b842c6ecfbcddf1695f8e975c73151ddd605b3e1dac1362984d46</div><div class="line"> Archive: /Users/xxx/Library/Caches/Homebrew/portable-ruby-2.6.3.mavericks.bottle.tar.gz</div><div class="line">To retry an incomplete download, remove the file above.</div><div class="line">Error: Failed to upgrade vendor Ruby.</div><div class="line">/usr/local/Homebrew/Library/Homebrew/brew.rb:10:in `&lt;main&gt;&apos;: Homebrew must be run under Ruby 2.6! You&apos;re running 2.3.7. (RuntimeError)</div></pre></td></tr></table></figure>
<p>大概意思是<code>Homebrew</code>要使用<code>ruby 2.6</code>,而你本机运行的是<code>ruby 2.3.7</code>，版本太低，但是帮你自动下载的<code>2.6.3</code>版本又出错，所以你需要先删除那个下载的文件。路径上面已经给出了<code>/Users/xxx/Library/Caches/Homebrew/portable-ruby-2.6.3.mavericks.bottle.tar.gz</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /Users/xxx/Library/Caches/Homebrew/portable-ruby-2.6.3.mavericks.bottle.tar.gz</div></pre></td></tr></table></figure>
<p>然后再<code>brew upgrade vapor</code>删除旧版本，删除完成，再下载新版本<code>brew install vapor</code>，再使用<code>brew list</code>就可以看到安装好的<code>Vapor</code>。</p>
<h4 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h4><p>先<code>cd</code>到创建好的项目目录，使用下面的命令创建项目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vapor new &lt;#项目名字#&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>Would you like to use Fluent? (–fluent)</p>
</blockquote>
<p>这个是问你是不是需要使用<code>Fluent</code>，填入<code>y</code>。Fluent是Swift的ORM框架。它利用Swift的强大类型系统为你的数据库提供易于使用的界面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Which database would you like to use? (--fluent.db)</div><div class="line">1: Postgres (Recommended)</div><div class="line">2: MySQL</div><div class="line">3: SQLite</div><div class="line">4: Mongo</div></pre></td></tr></table></figure>
<p>这个是问你使用什么数据库，填入<code>1</code>，这是它推荐的。还是一个原因是如果你要部署在<code>Herku</code>上，这个<code>Postgres</code>比其他的数据库实惠。然后就可以看到项目已经构建完成了，你可以看到成功信息，<code>cd</code>到你的项目根目录里，使用<code>vapor xcode</code>使用<code>Xcode</code>打开你的项目，最后等待<code>Vapor</code>安装一些使用到的库，安装完成后，才可以运行。PS：这是需要注意的一点就是使用Xcode运行时，左上角菜单查看<code>Xcode -&gt; Toolchains</code>里的<code>swift</code>版本,博主就在这被坑到了，因为之前选择了3.1的版本，一运行就出错，这是建议选<code>Xcode 12</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Vapor还是2.0，swift使用的还是3.0的时候，博主已经用vapor开发过一个小视频的网站了，虽然有这样，那样的问题，但是还是成功
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>V2Ray科学搭建</title>
    <link href="http://agoninemo.github.io/blog/2020/08/21/V2Ray%E7%A7%91%E5%AD%A6%E6%90%AD%E5%BB%BA/"/>
    <id>http://agoninemo.github.io/blog/2020/08/21/V2Ray科学搭建/</id>
    <published>2020-08-21T04:27:15.000Z</published>
    <updated>2021-01-13T14:25:50.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>博主的梯子是19年在Google Cloud搭的，开始的很爽，用了几个月后就开始用不了，后来Google了一些资料，发现SS被针对了，于是开始找新的梯子，找到了用Vmess协议的V2Ray，博主用的是之前Google Cloud搭的，如果你已经有服务器，可以点<a href="#准备">这里跳过</a>，如果你想用AWS来搭建可以看<a href="https://agoninemo.github.io/blog/2017/11/14/AWS%E6%90%AD%E5%BB%BASS/#more">这里</a>。</p>
<a id="more"></a>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g-3.png" alt="1"><br>国家选<code>美国</code>，3月之前还是有<code>中国</code>的，但是后面就没了</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g-2.png" alt="1"><br>账号类型选<code>个人</code>，地址随便填，信用卡、电话填自己的，在成功的，信用卡会被扣1美元，过几分钟，就会返回来的。</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g-1.png" alt="1"><br>进入这个界面可以看到成功了</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g0-2.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g0-1.png" alt="1"><br>创建防火墙规则</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g1.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g2.png" alt="2"><br>分别创建<code>入站</code>与<code>出站</code>规则</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g2-1.png" alt="1"><br>创建<code>入站</code>与<code>出站</code>规则完成后的界面</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g3.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g4.png" alt="1"><br>创建VM实例</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g4-1.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g4-2.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g5.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g6.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g7.png" alt="1"><br>VM实例配置</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g8.png" alt="1"><br>名称随便填（英文）</p>
<h4 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh-key"></a>创建ssh-key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 打开终端输入下面命令</div><div class="line"># 用户名：为创建VM实例的谷歌用户名（没试过其他的名称）</div><div class="line"># 命令： 系统在路径为~/.ssh/的文件夹下生成名为 google 的私钥文件和一个名为 google.pub 的公钥文件</div><div class="line"># 提示填yes</div><div class="line">ssh-keygen -t rsa -f ~/.ssh/google -C 用户名</div><div class="line"></div><div class="line"># 将打印出来的字符全复制到下面的图中</div><div class="line">cat ~/.ssh/google.pub</div></pre></td></tr></table></figure>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g9.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g10.jpg" alt="1"><br>填入刚打印出来的字符</p>
<h4 id="连接到google-cloud"><a href="#连接到google-cloud" class="headerlink" title="连接到google cloud"></a>连接到google cloud</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 连接到google cloud（提示时填yes）</div><div class="line">ssh -i ~/.ssh/google 用户名@外网的ip地址</div><div class="line"></div><div class="line"># 使用root权限</div><div class="line">sudo -s</div></pre></td></tr></table></figure>
<h3 id="PS：可能会遇到的问题-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED-如果出现以上错误，是因为本地的-ssh-known-hosts与远程机器的信息不一致引起的，解决如下："><a href="#PS：可能会遇到的问题-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED-如果出现以上错误，是因为本地的-ssh-known-hosts与远程机器的信息不一致引起的，解决如下：" class="headerlink" title="PS：可能会遇到的问题 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 如果出现以上错误，是因为本地的.ssh/known_hosts与远程机器的信息不一致引起的，解决如下："></a>PS：<code>可能会遇到的问题 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 如果出现以上错误，是因为本地的.ssh/known_hosts与远程机器的信息不一致引起的，解决如下：</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ssh -i ~/.ssh/google xxx@xxx</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</div><div class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</div><div class="line">It is also possible that a host key has just been changed.</div><div class="line">The fingerprint for the ECDSA key sent by the remote host is</div><div class="line">SHA256:8hgJ8jpcBr1tm6HS72FpXwMrjba8MQqlqYJQLPB/Qf4.</div><div class="line">Please contact your system administrator.</div><div class="line">Add correct host key in /Users/xxx/.ssh/known_hosts to get rid of this message.</div><div class="line">Offending ECDSA key in /Users/xxx/.ssh/known_hosts:26</div><div class="line">ECDSA host key for 47.98.233.15 has changed and you have requested strict checking.</div><div class="line">Host key verification failed.</div></pre></td></tr></table></figure>
<p><code>根据上面的信息 Add correct host key in /Users/xxx/.ssh/known_hosts to get rid of this message.</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 编辑文件</div><div class="line">vi 文件路径（比如：/User/xxx/.ssh/known_hosts）</div></pre></td></tr></table></figure>
<p><code>输入i 进入编辑模式，找下图信息中找到ip为47.98.233.15的记录，删除，如下图</code><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g11.jpeg" alt="1"></p>
<p><code>这里的ip与上面错误信息的ip是一致的，要根据自己的错误信息查找。</code></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">开始之前 你要确定你的系列已经有 Curl</div><div class="line">ubuntu/debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -y</div><div class="line">centos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y</div></pre></td></tr></table></figure>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.安装</div><div class="line">2.卸载</div><div class="line">在提示以上信息后输入 1 回车</div></pre></td></tr></table></figure>
<h4 id="V2Ray-传输协议"><a href="#V2Ray-传输协议" class="headerlink" title="V2Ray 传输协议 ="></a>V2Ray 传输协议 =</h4><p><code>选择传输协议，如果没有特别的需求，使用默认的 TCP 传输协议即可，直接回车</code></p>
<h4 id="V2Ray-端口"><a href="#V2Ray-端口" class="headerlink" title="V2Ray 端口 ="></a>V2Ray 端口 =</h4><p><code>选择端口，如果没有特别的需求，使用默认的端口即可，直接回车</code></p>
<h4 id="广告拦截"><a href="#广告拦截" class="headerlink" title="广告拦截 ="></a>广告拦截 =</h4><p><code>是否屏蔽广告，除非你真的需要，一般来说，直接回车即可</code></p>
<h4 id="是否配置-Shadowsocks-Y-N"><a href="#是否配置-Shadowsocks-Y-N" class="headerlink" title="是否配置 Shadowsocks [Y/N]"></a>是否配置 Shadowsocks [Y/N]</h4><p><code>如果不需要就直接回车，否则就输入 Y 回车 ，端口，密码，加密方式这些东西自己看情况配置，博主全部直接回车</code> </p>
<h4 id="如果确保没有什么问题了，按回车继续，出现以下安装信息"><a href="#如果确保没有什么问题了，按回车继续，出现以下安装信息" class="headerlink" title="如果确保没有什么问题了，按回车继续，出现以下安装信息"></a>如果确保没有什么问题了，按回车继续，出现以下安装信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">----------  安装信息 --------</div><div class="line"></div><div class="line"> V2Ray 传输协议 = TCP</div><div class="line"></div><div class="line"> V2Ray 端口 = xxxxx</div><div class="line"> </div><div class="line"> Shadowsocks 端口 = xxxxx</div><div class="line"> </div><div class="line"> Shadowsocks 密码 = xxxxxxx</div><div class="line"></div><div class="line"> Shadowsocks 加密协议 = chacha20-ietf-poly1305</div><div class="line"> </div><div class="line">---------- END -------------</div><div class="line"></div><div class="line">按  Enter 回车键  断续....或按 Ctrl + C 取消.</div></pre></td></tr></table></figure>
<p>回车以后就是完整的信息了，这个要复制、粘贴到记事本保存好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;博主的梯子是19年在Google Cloud搭的，开始的很爽，用了几个月后就开始用不了，后来Google了一些资料，发现SS被针对了，于是开始找新的梯子，找到了用Vmess协议的V2Ray，博主用的是之前Google Cloud搭的，如果你已经有服务器，可以点&lt;a href=&quot;#准备&quot;&gt;这里跳过&lt;/a&gt;，如果你想用AWS来搭建可以看&lt;a href=&quot;https://agoninemo.github.io/blog/2017/11/14/AWS%E6%90%AD%E5%BB%BASS/#more&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vmess" scheme="http://agoninemo.github.io/blog/tags/vmess/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试程序（笔记）</title>
    <link href="http://agoninemo.github.io/blog/2020/08/11/LLDB%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://agoninemo.github.io/blog/2020/08/11/LLDB调试程序（笔记）/</id>
    <published>2020-08-11T11:43:23.000Z</published>
    <updated>2021-03-27T03:11:51.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全称expression，可简写为e"><a href="#全称expression，可简写为e" class="headerlink" title="全称expression，可简写为e"></a>全称expression，可简写为e</h2><p>p（print) 功能是输出原生类型（boolean、integer、float、etc）的信息<br>po（print object）功能是输出objective-c中对象（objects）的信息. (为e -o —的别名)<br>call 同po或p一样, 也是调用. 当不需要显示输出时使用.</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">## 命令别名</div><div class="line">command alias &lt;alias name&gt; expression -l objc -O —-</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">## 获取图层</div><div class="line">e id $view = (id) 0x7fbd71432590</div><div class="line">## 更改图层信息</div><div class="line">e (void) [$view setBackgroundColor:[UIColor redColor]]</div><div class="line">## 刷新界面</div><div class="line">e (void)[CATransaction flush]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">## 定义一个变量str</div><div class="line">e NSString *$str = @&quot;text&quot;</div><div class="line"></div><div class="line"># 普通类型</div><div class="line">e int $a = 2</div><div class="line"></div><div class="line"># 打印结果</div><div class="line">p $a * 19</div><div class="line"></div><div class="line"># 定义数组</div><div class="line">e NSArray *$array = @[ @&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot; ]</div><div class="line"></div><div class="line"># 打印数组个数</div><div class="line">p [$array count]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">## 例子</div><div class="line">e id $nvc = [[[UIApplication sharedApplication] keyWindow] rootViewController]</div><div class="line">e id $vc = [UIViewController new]                                //生成一个vc</div><div class="line">e (void)[[$vc view] setBackgroundColor:[UIColor redColor]]</div><div class="line">e (void)[$vc setTitle:@&quot;new ViewController!&quot;]</div><div class="line">e (void)[$nvc pushViewController:$vc animated:YES]</div><div class="line">e [CATransaction flush]</div></pre></td></tr></table></figure>
<p><code>bt (全称thread backtrace) 打印调用堆栈，加all可打印所有thread的堆栈。程序出错时可使用这个命令.可以把断点放在函数的开头，然后用 thread return 命令重写函数的行为，然后继续。</code></p>
<h2 id="查看所有线程调用栈"><a href="#查看所有线程调用栈" class="headerlink" title="查看所有线程调用栈"></a>查看所有线程调用栈</h2><p>thread backtrace all</p>
<h2 id="列出所有线程"><a href="#列出所有线程" class="headerlink" title="列出所有线程"></a>列出所有线程</h2><p>thread list</p>
<h2 id="可用来控制程序流程-伪造返回值"><a href="#可用来控制程序流程-伪造返回值" class="headerlink" title="可用来控制程序流程, 伪造返回值"></a>可用来控制程序流程, 伪造返回值</h2><p>thread return <exp></exp></p>
<h1 id="获取全部变量值"><a href="#获取全部变量值" class="headerlink" title="获取全部变量值"></a>获取全部变量值</h1><p>frame variable</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 也可以获取单个变量值</div><div class="line">frame v self-&gt;testVar</div><div class="line"># 当前的行数和源码文件，以及其他一些信息</div><div class="line">frame info</div></pre></td></tr></table></figure>
<p>image 可用于寻址，有多个组合命令。常用于寻找栈地址对应的代码位置, 用于查错(能定位出错误代码行数)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 最后为栈地址</div><div class="line">image lookup --address 0x0000000100004af8</div></pre></td></tr></table></figure>
<p>breakpoint(或简写为b) 设置断点. (可在运行过程中添加)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># 第10行设置断点</div><div class="line">breakpoint set -f XXX.m -l 10</div><div class="line"></div><div class="line">breakpoint set -n XXX</div><div class="line">set 是子命令</div><div class="line">-n 是选项 是--name 的缩写</div><div class="line"></div><div class="line"># 第10行设置断点(xxx.m也一样)</div><div class="line">b ViewController.swift:10</div><div class="line"></div><div class="line"># 功能同上</div><div class="line">b 10</div><div class="line"></div><div class="line"># 直接指定函数(符号断点:Xcode GUI中只要方法执行就触发断点, 这里只针对本类)</div><div class="line">b myfunc</div><div class="line"></div><div class="line"># 数组根据Index获取object处设置断点</div><div class="line">b -[NSArray objectAtIndex:]</div><div class="line"></div><div class="line"># 列出所有断点. 简写br li</div><div class="line">breakpoint list</div><div class="line"></div><div class="line"># 禁用1号断点</div><div class="line">br dis 1</div><div class="line"></div><div class="line"># 删除9号断点</div><div class="line">breakpoint delete 9</div><div class="line"></div><div class="line"># 直接返回不执行后面的代码</div><div class="line">thread return</div><div class="line"></div><div class="line"># 禁用/启用</div><div class="line">breakpoint disable 禁用</div><div class="line">breakpoint enable  启用</div><div class="line"></div><div class="line"># 遍历整个项目中满足Game:这个字符的所有方法</div><div class="line">breakpoint set -r Game:</div></pre></td></tr></table></figure>
<p>断点调试命令: c 即process continue，n 即step over下一步, s即step in, thread step-out即step out. (n,s比较常用)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 下一步，单步运行,将子函数当做整体一步执行</div><div class="line">n</div><div class="line"></div><div class="line"># 进入</div><div class="line">s</div><div class="line"></div><div class="line"># 继续执行</div><div class="line">c</div></pre></td></tr></table></figure>
<p>watchpoint: 监听某个实例的变化. (等同于在Xcode调试变量窗口—&gt;右键某个变量—&gt;Watch xx) 注意: watchpoint是分类型的，包括read，write或者read_write类型. 通过Xcode右键添加的只能是write类型.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 为该变量地址设置watchpoint</div><div class="line">watchpoint set self-&gt;test</div><div class="line"></div><div class="line"># 为btn变量设置read_write类型的监听</div><div class="line">watchpoint set v -w read_write btn</div><div class="line"></div><div class="line"># 为该内存地址设置watchpoint，内存地址可从前文提及的`p`命令获取</div><div class="line">watchpoint set expression 0x00007fb27b4969e0</div><div class="line"></div><div class="line"># 为watchpoint 1号加上子命令 `frame info`</div><div class="line">watchpoint command add -o &apos;frame info&apos; 1</div><div class="line"></div><div class="line"># 列出所有watchpoint</div><div class="line">watchpoint list  </div><div class="line"></div><div class="line"># 删除所有watchpoint</div><div class="line">watchpoint delete</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 查看可用平台</div><div class="line">platform list</div><div class="line"></div><div class="line"># 选择运行平台</div><div class="line">platform select ios-simulator</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 当遇到 Thread 5: EXC_BAD_ACCESS (code=1, address=0x0)</div><div class="line"># thread backtrace，作用是打印当前线程信息</div><div class="line">bt</div><div class="line"></div><div class="line"># 查看</div><div class="line">image list</div><div class="line"></div><div class="line"># 查看内存</div><div class="line">register read</div><div class="line"># 查看内存</div><div class="line">x</div><div class="line"></div><div class="line"># 所有线程的调用栈</div><div class="line">thread backtrace all</div><div class="line"></div><div class="line"># 检查帧参数和本地变量</div><div class="line">frame variable</div><div class="line"></div><div class="line"># 使用image 来定位崩溃</div><div class="line">image lookup --address 0x0000000100000de0</div><div class="line"></div><div class="line">frame variable *self</div><div class="line"></div><div class="line"># 查看具体的对象的声明类型</div><div class="line">image lookup --type &lt;Class&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;全称expression，可简写为e&quot;&gt;&lt;a href=&quot;#全称expression，可简写为e&quot; class=&quot;headerlink&quot; title=&quot;全称expression，可简写为e&quot;&gt;&lt;/a&gt;全称expression，可简写为e&lt;/h2&gt;&lt;p&gt;p（print) 功能是输出原生类型（boolean、integer、float、etc）的信息&lt;br&gt;po（print object）功能是输出objective-c中对象（objects）的信息. (为e -o —的别名)&lt;br&gt;call 同po或p一样, 也是调用. 当不需要显示输出时使用.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些面试题整理</title>
    <link href="http://agoninemo.github.io/blog/2020/06/25/%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://agoninemo.github.io/blog/2020/06/25/一些面试题整理/</id>
    <published>2020-06-25T11:53:48.000Z</published>
    <updated>2021-01-13T14:25:51.043Z</updated>
    
    <content type="html"><![CDATA[<p>更新于：2020.9.13</p>
<h3 id="常见的网络协议有哪些"><a href="#常见的网络协议有哪些" class="headerlink" title="常见的网络协议有哪些"></a>常见的网络协议有哪些</h3><p>其实说HTTP、HTTPS、TCP/IP、UDP这几个就可以了，其他的我们很少有用到。以下是一些更详细的说明。</p>
<ul>
<li>HTTP(Hypertext Transfer Protocol) 超文本传输协议</li>
<li>HTTPS(Secure Hypertext Transfer Protocol)安全超文本传输协议</li>
<li>IPv6(Internet Protocol Version 6)Internet协议-版本6</li>
<li>POP3(Post Office Protocol Version 3)邮局协议-版本3</li>
<li>SMTP(Simple Mail Transfer Protocol)简单邮件传送协议</li>
<li>TCP/IP(Transmission Control Protocol/Internet Protocol)传输控制协议/Internet协议</li>
<li>TFTP(Trivial File Transfer Protocol)小文件传输协议</li>
<li>UDP(User Datagram Protocol)用户数据报协议</li>
</ul>
<a id="more"></a>
<h4 id="HTTP又分为三个版本，分别为HTTP1-0、HTTP1-1、HTTP2-0"><a href="#HTTP又分为三个版本，分别为HTTP1-0、HTTP1-1、HTTP2-0" class="headerlink" title="HTTP又分为三个版本，分别为HTTP1.0、HTTP1.1、HTTP2.0"></a>HTTP又分为三个版本，分别为HTTP1.0、HTTP1.1、HTTP2.0</h4><ul>
<li>HTTP1.1默认持久化连接，建立一次连接，多次请求均由这个连接完成！(如果阻塞了，还是会开新的TCP连接的)，HTTP 1.1中增加host字段，引入了Chunked transfer-coding，范围请求，实现断点续传(实际上就是利用HTTP消息头使用分块传输编码，将实体主体分块传输)，HTTP 1.1管线化(pipelining)理论，客户端可以同时发出多个HTTP请求，而不用一个个等待响应之后再请求，但是这个理论仅仅是限于理论场景下，大部分桌面浏览器仍然会选择默认关闭HTTP pipelining！所以现在使用HTTP1.1协议的应用，都是有可能会开多个TCP连接的！</li>
<li>HTTP1.0默认是短连接，简单说来就是每次与服务器交互，都需要新开一个连接！</li>
<li>HTTP2与HTTP1.1最重要的区别就是解决了线头阻塞的问题！其中最重要的改动是：多路复用 (Multiplexing)，HTTP2所有性能增强的核心在于新的二进制分帧层(不再以文本格式来传输了)，它定义了如何封装http消息并在客户端与服务器之间传输。使用HPACK对HTTP/2头部压缩，服务器推送，针对传输中的流进行控制(TCP默认的粒度是针对连接)，流优先级（Stream Priority）它被用来告诉对端哪个流更重要。</li>
</ul>
<h4 id="MVC、MVP、MVVM的区别，使用场景"><a href="#MVC、MVP、MVVM的区别，使用场景" class="headerlink" title="MVC、MVP、MVVM的区别，使用场景"></a>MVC、MVP、MVVM的区别，使用场景</h4><ul>
<li>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。MVC开始是存在于桌面程序中的，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式</li>
<li>MVVM（Model-View-ViewModel）框架的由来便是MVP（Model-View-Presenter）模式与WPF结合的应用方式时发展演变过来的一种新型架构框架。它立足于原有MVP框架并且把WPF的新特性糅合进去，以应对客户日益复杂的需求变化。</li>
<li>而 MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。 唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。这样开发者就不用处理接收事件和View更新的工作，框架已经帮你做好了</li>
<li>在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。</li>
</ul>
<p>PS:<a href="https://zhuanlan.zhihu.com/p/87752772" target="_blank" rel="external">参考链接</a></p>
<h4 id="对Runtime的了解，使用场景（runtime方便的，消息转发，weak，associate，category）"><a href="#对Runtime的了解，使用场景（runtime方便的，消息转发，weak，associate，category）" class="headerlink" title="对Runtime的了解，使用场景（runtime方便的，消息转发，weak，associate，category）"></a>对Runtime的了解，使用场景（runtime方便的，消息转发，weak，associate，category）</h4><ul>
<li>耦合度低</li>
<li>RunTime简称运行时。就是系统在运行的时候的一些机制</li>
<li>字典转换Model、热更新、给Category添加属性、Method Swizzling（系统方法替换）、兼容系统API迭代、实现多重代理、间接实现多继承</li>
<li>runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil</li>
</ul>
<h4 id="Aspects使用"><a href="#Aspects使用" class="headerlink" title="Aspects使用"></a>Aspects使用</h4><ul>
<li>优点：不会影响其他对象，降低耦合度，当你在 remove aspects 的时候，如果发现当前对象的 aspect 都被移除了，那么，你可以将 isa 指针重新指回对象本身的类，从而消除了该对象的 swizzle</li>
<li>没有解决originalMethod 中使用 _cmd 的问题</li>
</ul>
<h4 id="runtime-如何实现-weak-属性"><a href="#runtime-如何实现-weak-属性" class="headerlink" title="runtime 如何实现 weak 属性"></a>runtime 如何实现 weak 属性</h4><ul>
<li>特点：weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同 assign 类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)</li>
<li>1、weak的原理在于底层维护了一张weak_table_t结构的hash表，key是所指对象的地址，value是weak指针的地址数组</li>
<li>2、weak 关键字的作用是弱引用，所引用对象的计数器不会加1，并在引用对象被释放的时候自动被设置为 nil</li>
<li>对象释放时，调用clearDeallocating函数根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录</li>
</ul>
<h4 id="当weak指向的对象被释放时，如何让weak指针置为nil的呢？"><a href="#当weak指向的对象被释放时，如何让weak指针置为nil的呢？" class="headerlink" title="当weak指向的对象被释放时，如何让weak指针置为nil的呢？"></a>当weak指向的对象被释放时，如何让weak指针置为nil的呢？</h4><ul>
<li>从weak表中获取废弃对象的地址为键值的记录.</li>
<li>将包含在记录中的所有附有 weak修饰符变量的地址，赋值为 nil</li>
<li>将weak表中该记录删除</li>
<li>从引用计数表中删除废弃对象的地址为键值的记录</li>
</ul>
<h4 id="为什么修饰代理使用weak而不是用assign？"><a href="#为什么修饰代理使用weak而不是用assign？" class="headerlink" title="为什么修饰代理使用weak而不是用assign？"></a>为什么修饰代理使用weak而不是用assign？</h4><p>assign可用来修饰基本数据类型，也可修饰OC的对象，但如果用assign修饰对象类型指向的是一个强指针，当指向的这个指针释放之后，它仍指向这块内存，必须要手动给置为nil，否则会产生野指针，如果还通过此指针操作那块内存，会导致EXC_BAD_ACCESS错误，调用了已经被释放的内存空间；而weak只能用来修饰OC对象，而且相比assign比较安全，如果指向的对象消失了，那么它会自动置为nil，不会导致野指针</p>
<h4 id="那么-runtime-如何实现-weak-变量的自动置nil？"><a href="#那么-runtime-如何实现-weak-变量的自动置nil？" class="headerlink" title="那么 runtime 如何实现 weak 变量的自动置nil？"></a>那么 runtime 如何实现 weak 变量的自动置nil？</h4><p>runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。</p>
<h4 id="什么是RunLoop"><a href="#什么是RunLoop" class="headerlink" title="什么是RunLoop"></a>什么是RunLoop</h4><ul>
<li>运行循环，在程序运行过程中循环做一些事情。iOS中有2套API来访问和使用RunLoop √ Foundation：NSRunLoop √ Core Foundation：CFRunLoopRef 。NSRunLoop和CFRunLoopRef都代表着RunLoop对象。NSRunLoop是基于CFRunLoopRef的一层OC包装。CFRunLoopRef是开源的</li>
<li>RunLoop的基本作用： 1、保持程序的持续运行 2、处理App中的各种事件（比如触摸事件、定时器事件等） 3、节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li>
<li>RunLoop在实际开中的应用 √ 控制线程生命周期（线程保活） √ 解决NSTimer在滑动时停止工作的问题 √ 监控应用卡顿 √ 性能优化</li>
</ul>
<h4 id="RunLoop与线程关系"><a href="#RunLoop与线程关系" class="headerlink" title="RunLoop与线程关系"></a>RunLoop与线程关系</h4><ul>
<li>每条线程都有唯一的一个与之对应的RunLoop对象</li>
<li>RunLoop保存在一个全局的Dictionary里，线程作为key，RunLoop作为value</li>
<li>线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建</li>
<li>RunLoop会在线程结束时销毁</li>
<li>主线程的RunLoop已经自动获取（创建），子线程默认没有开启RunLoop</li>
<li>运行逻辑<br>01、通知Observers：进入Loop<br>02、通知Observers：即将处理Timers<br>03、通知Observers：即将处理Sources<br>04、处理Blocks<br>05、处理Source0（可能会再次处理Blocks）<br>06、如果存在Source1，就跳转到第8步<br>07、通知Observers：开始休眠（等待消息唤醒）<br>08、通知Observers：结束休眠（被某个消息唤醒）<br>01&gt; 处理Timer<br>02&gt; 处理GCD Async To Main Queue<br>03&gt; 处理Source1<br>09、处理Blocks<br>10、根据前面的执行结果，决定如何操作<br>01&gt; 回到第02步<br>02&gt; 退出Loop<br>11、通知Observers：退出Loop</li>
</ul>
<h4 id="HTTP与HTTPS有什么区别"><a href="#HTTP与HTTPS有什么区别" class="headerlink" title="HTTP与HTTPS有什么区别"></a>HTTP与HTTPS有什么区别</h4><ul>
<li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用</li>
<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议</li>
<li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443</li>
<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全</li>
</ul>
<h4 id="聊聊iOS的内存管理"><a href="#聊聊iOS的内存管理" class="headerlink" title="聊聊iOS的内存管理"></a>聊聊iOS的内存管理</h4><ul>
<li>OC的内存管理主要有三种方式：ARC、MRC、内存池</li>
</ul>
<h4 id="简要阐述内存相关的关键字"><a href="#简要阐述内存相关的关键字" class="headerlink" title="简要阐述内存相关的关键字"></a>简要阐述内存相关的关键字</h4><ul>
<li>Strong 修饰符表示指向并持有该对象，其修饰对象的引用计数会加1。该对象只要引用计数不为0就不会被销毁。当然可以通过将变量强制赋值 nil 来进行销毁</li>
<li>weak 修饰符指向但是并不持有该对象，引用计数也不会加1。在 Runtime 中对该属性进行了相关操作，无需处理，可以自动销毁。weak用来修饰对象，多用于避免循环引用的地方。weak 不可以修饰基本数据类型</li>
<li>assign主要用于修饰基本数据类型，例如NSInteger，CGFloat，存储在栈中，内存不用程序员管理。assign是可以修饰对象的，但是会出现问题</li>
<li>copy关键字和 strong类似，copy 多用于修饰有可变类型的不可变对象上 NSString,NSArray,NSDictionary上</li>
<li>__unsafe_unretain 类似于 weak ，但是当对象被释放后，指针已然保存着之前的地址，被释放后的地址变为 僵尸对象，访问被释放的地址就会出问题，所以说他是不安全的</li>
<li>将对象赋值给附有 __autoreleasing修饰的变量等同于 ARC 无效时调用对象的 autorelease 方法,实质就是扔进了自动释放池</li>
</ul>
<h4 id="图片加载占用内存对比"><a href="#图片加载占用内存对比" class="headerlink" title="图片加载占用内存对比"></a>图片加载占用内存对比</h4><ul>
<li>使用<code>imageName:</code>加载图片：1.加载到内存当中后，占据内存空间较大。2.相同的图片，图片不会重复加载。3.加载内存当中之后，会一直停留在内存当中，不会随着对象销毁而销毁。4.加载进去图片之后，占用的内存归系统管理，我们无法管理。</li>
<li>使用<code>imageWithContentsOfFile:</code>加载图片：1.加载到内存当中后,占据内存空间较小。2.相同的图片会被重复加载内存当中。3.对象销毁的时候,加载到内存中图片会随着一起销毁。</li>
<li>图片较小，并且使用频繁，使用<code>imageName:</code>来加载(按钮图标/主页里面图片)，图片较大，并且使用较少，使用 imageWithContentsOfFile: 来加载(版本新特性/相册)</li>
</ul>
<h4 id="图片在沙盒中的存在形式"><a href="#图片在沙盒中的存在形式" class="headerlink" title="图片在沙盒中的存在形式"></a>图片在沙盒中的存在形式</h4><ul>
<li>小图片\使用频率比较高的图片放在Images.xcassets里面</li>
<li>大图片\使用频率比较低的图片(一次性的图片, 比如版本新特性的图片)不要放在Images.xcassets里面</li>
</ul>
<h4 id="说说你对-tableview-性能优化方法"><a href="#说说你对-tableview-性能优化方法" class="headerlink" title="说说你对 tableview 性能优化方法"></a>说说你对 tableview 性能优化方法</h4><ul>
<li>tableview懒加载、cell重用</li>
<li>高度缓存（因为 heightForRowAtIndexPath: 是调用最频繁的方法）</li>
<li>数据处理：使用正确的数据结构来存储数据、数据尽量采用局部的 section，或 cellRow 的刷新，避免 reloadData、大量数据操作时，使用异步子线程处理，避免主线程中直接操作、大量数据操作时，使用异步子线程处理，避免主线程中直接操作</li>
<li>异步加载图片：使用异步子线程处理，然后再返回主线程操作、图片缓存处理，避免多次处理操作、图片圆角处理时，设置 layer 的 shouldRasterize 属性为 YES，可以将负载转移给 CPU</li>
<li>按需加载内容：滑动操作时，只显示目标范围内的cell内容，显示过的超出目标范围内之后则进行清除、滑动过程中，不加载显示图片，停止时才加载显示图片</li>
<li>视图层面：减少 subviews 的数量，自定义的子视图可以整合在形成一个整体的就整合成一个整体的子视图、使用 drawRect 进行绘制（即将 GPU 的部分渲染转接给 CPU ），或 CALayer 进行文本或图片的绘制。在实现 drawRect 方法的时候注意减少多余的绘制操作，它的参数 rect 就是我们需要绘制的区域，在 rect 范围之外的区域我们不需要进行绘制，否则会消耗相当大的资源、异步绘制，且设置属性 self.layer.drawsAsynchronously = YES;（遇到复杂界面，遇到性能瓶颈时，可能就是突破口）、定义一种(尽量少)类型的 Cell 及善用 hidden 隐藏(显示) subviews、尽量使所有的 view 的 opaque 属性为 YES，包括 cell 自身，以提高视图渲染速度（避免无用的 alpha 通道合成，降低 GPU 负载）、避免渐变，图片缩放的操作、使用 shadowPath 来画阴影、尽量不使用 cellForRowAtIndexPath: ，如果你需要用到它，只用一次然后缓存结果、cellForRowAtIndexPath 不要做耗时操作：如不读取文件 / 写入文件；尽量少用 addView 给 Cell 动态添加 View，可以初始化时就添加，然后通过 hide 来控制是否显示、我们在 cell 上添加系统控件的时候，实际上系统都会调用底层的接口进行绘制，大量添加控件时，会消耗很大的资源并且也会影响渲染的性能。当使用默认的 UITableViewCell 并且在它的 ContentView 上面添加控件时会相当消耗性能。所以目前最佳的方法还是继承 UITableViewCell，并重写 drawRect 方法、当我们需要圆角效果时，可以使用一张中间透明图片蒙上去使用 ShadowPath 指定 layer 阴影效果路径使用异步进行 layer 渲染（Facebook 开源的异步绘制框架 AsyncDisplayKit ）设置 layer 的 opaque 值为 YES ，减少复杂图层合成尽量使用不包含透明（alpha）通道的图片资源尽量设置 layer 的大小值为整形值直接让美工把图片切成圆角进行显示，这是效率最高的一种方案很多情况下用户上传图片进行显示，可以让服务端处理圆角使用代码手动生成圆角 Image 设置到要显示的 View 上，利用 UIBezierPath ( CoreGraphics 框架）画出来圆角图片</li>
</ul>
<h4 id="离屏渲染触发条件"><a href="#离屏渲染触发条件" class="headerlink" title="离屏渲染触发条件"></a>离屏渲染触发条件</h4><ul>
<li>custom drawRect: (any, even if you simply fill the background with color)</li>
<li>CALayer mask</li>
<li>CALayer shadow</li>
<li>any custom drawing using CGContext<br>具体表现为mask（遮罩）、 shadow（阴影）、shouldRasterize（光栅化）、edge antialiasing（抗锯齿）、group opacity（不透明）、复杂形状设置圆角等、渐变</li>
<li>CPU和GPU： CPU，负责视图相关的计算工作并告知GPU应该怎么绘图； GPU，进行图形的绘制、渲染等工作</li>
</ul>
<h5 id="什么是block"><a href="#什么是block" class="headerlink" title="什么是block"></a>什么是block</h5><ul>
<li>block是对象，它封装了一段代码，这段代码可以在任何时候执行。block可以作为函数参数或者函数的返回值，而其本身又可以带输入参数或返回值。与代理协议的功能一样,也可以用于事件通信</li>
<li>Block使用注意点：防止循环引用，在block中用到外部变量都是只读拷贝的，栈block超过作用域就被自动释放了，堆block需要手动释放</li>
</ul>
<h4 id="说一下什么是悬垂指针？什么是野指针？"><a href="#说一下什么是悬垂指针？什么是野指针？" class="headerlink" title="说一下什么是悬垂指针？什么是野指针？"></a>说一下什么是悬垂指针？什么是野指针？</h4><ul>
<li>指针指向的内存已经被释放了，但是指针还存在，这就是一个<code>悬垂指针</code>或者说 <code>迷途指针</code></li>
<li>没有进行初始化的指针，其实都是<code>野指针</code></li>
</ul>
<h5 id="Block变量截获"><a href="#Block变量截获" class="headerlink" title="Block变量截获"></a>Block变量截获</h5><ul>
<li>分为全局Block(_NSConcreteGlobalBlock)、栈Block(_NSConcreteStackBlock)、堆Block(_NSConcreteMallocBlock)三种形式</li>
<li>不使用外部变量的block是全局block</li>
<li>使用外部变量并且未进行copy操作的block是栈block</li>
<li>对栈block进行copy操作，就是堆block，而对全局block进行copy，仍是全局block</li>
<li>局部变量截获是值截获</li>
<li>局部静态变量截获是指针截获</li>
<li>全局变量，静态全局变量截获：不截获,直接取值</li>
<li>总结：auto（默认就有 auto修饰，离开作用域就销毁）修饰的局部变量，是值传递。static修饰的局部变量，是指针传递。</li>
</ul>
<h5 id="Swift中的Class和Struct"><a href="#Swift中的Class和Struct" class="headerlink" title="Swift中的Class和Struct"></a>Swift中的Class和Struct</h5><ul>
<li>Class是引用类型，当值传递的时候，它是传递对已有instance（实例）的引用</li>
<li>Struct是值类型，当值进行传递的时候，它会copy传递的值</li>
<li>项目中默认使用struct，当你需要继承Objective-C某些类的的时候使用class，当你需要控制唯一性时使用class，使用struct和protocol来实现model继承和共享行为。</li>
<li>struct好处，使用struct不需要考虑内存泄漏和多线程读写的问题，因为在传递值的时候它会进行值的copy，struct存储在stack中，class存储在heap中，struct更快</li>
<li>class支持继承；struct不支持继承</li>
<li>class声明的方法修改属性不需要<code>mutating</code>关键字；struct需要</li>
<li>class没有提供默认的memberwise initializer（成员初始化）；struct提供默认的memberwise initializer</li>
<li>class支持引用计数(Reference counting)；struct不支持</li>
<li>class支持Type casting；struct不支持</li>
<li>class支持Deinitializers（反初始化器）；struct不支持</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新于：2020.9.13&lt;/p&gt;
&lt;h3 id=&quot;常见的网络协议有哪些&quot;&gt;&lt;a href=&quot;#常见的网络协议有哪些&quot; class=&quot;headerlink&quot; title=&quot;常见的网络协议有哪些&quot;&gt;&lt;/a&gt;常见的网络协议有哪些&lt;/h3&gt;&lt;p&gt;其实说HTTP、HTTPS、TCP/IP、UDP这几个就可以了，其他的我们很少有用到。以下是一些更详细的说明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP(Hypertext Transfer Protocol) 超文本传输协议&lt;/li&gt;
&lt;li&gt;HTTPS(Secure Hypertext Transfer Protocol)安全超文本传输协议&lt;/li&gt;
&lt;li&gt;IPv6(Internet Protocol Version 6)Internet协议-版本6&lt;/li&gt;
&lt;li&gt;POP3(Post Office Protocol Version 3)邮局协议-版本3&lt;/li&gt;
&lt;li&gt;SMTP(Simple Mail Transfer Protocol)简单邮件传送协议&lt;/li&gt;
&lt;li&gt;TCP/IP(Transmission Control Protocol/Internet Protocol)传输控制协议/Internet协议&lt;/li&gt;
&lt;li&gt;TFTP(Trivial File Transfer Protocol)小文件传输协议&lt;/li&gt;
&lt;li&gt;UDP(User Datagram Protocol)用户数据报协议&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://agoninemo.github.io/blog/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>那些音乐神评论</title>
    <link href="http://agoninemo.github.io/blog/2020/05/15/%E9%82%A3%E4%BA%9B%E9%9F%B3%E4%B9%90%E7%A5%9E%E8%AF%84%E8%AE%BA/"/>
    <id>http://agoninemo.github.io/blog/2020/05/15/那些音乐神评论/</id>
    <published>2020-05-15T04:25:29.000Z</published>
    <updated>2021-01-13T14:25:51.047Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;何谓烈酒？&quot;</div><div class="line">&quot;凌晨，宿醉，浑浑噩噩。&quot;</div><div class="line">&quot;可否具体？&quot;  </div><div class="line">&quot;烧心，烫喉，一醉方休。&quot;</div><div class="line">&quot;可否再具体？&quot;</div><div class="line">&quot;醉时有你。&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">那个酒馆里的老板娘生的一副好模样唇红齿白眉目如画就是脾气火爆</div><div class="line">她好喝酒但从不与人对饮</div><div class="line">直到那一天她喝醉了她流泪了她说她在等一个人一个没有告别就远走的人</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="神评论" scheme="http://agoninemo.github.io/blog/tags/%E7%A5%9E%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud搭建ssr</title>
    <link href="http://agoninemo.github.io/blog/2019/11/05/Google-Cloud%E6%90%AD%E5%BB%BAssr/"/>
    <id>http://agoninemo.github.io/blog/2019/11/05/Google-Cloud搭建ssr/</id>
    <published>2019-11-05T12:53:39.000Z</published>
    <updated>2021-01-13T14:25:50.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从16年的在aws搭了梯子以后，从此开始了自由之路，但是在用完了aws<a href="https://agoninemo.github.io/blog/2017/11/14/AWS%E6%90%AD%E5%BB%BASS/#more">一年的免费流量</a>之后，再用回百度，怎么都感觉不爽，于是，就去招商开了一个visa的信用卡，从Google Cloud再次开起自由之路。</p>
<a id="more"></a>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g-3.png" alt="1"><br>国家选<code>美国</code>，3月之前还是有<code>中国</code>的，但是后面就没了</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g-2.png" alt="1"><br>账号类型选<code>个人</code>，地址随便填，信用卡、电话填自己的，在成功的，信用卡会被扣1美元，过几分钟，就会返回来的。</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g-1.png" alt="1"><br>进入这个界面可以看到成功了</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g0-2.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g0-1.png" alt="1"><br>创建防火墙规则</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g1.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g2.png" alt="2"><br>分别创建<code>入站</code>与<code>出站</code>规则</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g2-1.png" alt="1"><br>创建<code>入站</code>与<code>出站</code>规则完成后的界面</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g3.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g4.png" alt="1"><br>创建VM实例</p>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g4-1.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g4-2.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g5.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g6.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g7.png" alt="1"><br>VM实例配置</p>
<p>这里是外部ip<br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g8.png" alt="1"><br>名称随便填（英文）</p>
<h4 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh-key"></a>创建ssh-key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 打开终端输入下面命令</div><div class="line"># 用户名：为创建VM实例的谷歌用户名（没试过其他的名称）</div><div class="line"># 命令： 系统在路径为~/.ssh/的文件夹下生成名为 google 的私钥文件和一个名为 google.pub 的公钥文件</div><div class="line"># 提示填yes</div><div class="line">ssh-keygen -t rsa -f ~/.ssh/google -C 用户名</div><div class="line"></div><div class="line"># 将打印出来的字符全复制到下面的图中</div><div class="line">cat ~/.ssh/google.pub</div></pre></td></tr></table></figure>
<p><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g9.png" alt="1"><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g10.jpg" alt="1"><br>填入刚打印出来的字符</p>
<h4 id="连接到google-cloud"><a href="#连接到google-cloud" class="headerlink" title="连接到google cloud"></a>连接到google cloud</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 连接到google cloud（提示时填yes）</div><div class="line">ssh -i ~/.ssh/google 用户名@外网的ip地址</div><div class="line"></div><div class="line"># 使用root权限</div><div class="line">sudo -s</div></pre></td></tr></table></figure>
<h3 id="PS：可能会遇到的问题-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED-如果出现以上错误，是因为本地的-ssh-known-hosts与远程机器的信息不一致引起的，解决如下："><a href="#PS：可能会遇到的问题-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED-如果出现以上错误，是因为本地的-ssh-known-hosts与远程机器的信息不一致引起的，解决如下：" class="headerlink" title="PS：可能会遇到的问题 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 如果出现以上错误，是因为本地的.ssh/known_hosts与远程机器的信息不一致引起的，解决如下："></a>PS：<code>可能会遇到的问题 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 如果出现以上错误，是因为本地的.ssh/known_hosts与远程机器的信息不一致引起的，解决如下：</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ssh -i ~/.ssh/google xxx@xxx</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</div><div class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</div><div class="line">It is also possible that a host key has just been changed.</div><div class="line">The fingerprint for the ECDSA key sent by the remote host is</div><div class="line">SHA256:8hgJ8jpcBr1tm6HS72FpXwMrjba8MQqlqYJQLPB/Qf4.</div><div class="line">Please contact your system administrator.</div><div class="line">Add correct host key in /Users/xxx/.ssh/known_hosts to get rid of this message.</div><div class="line">Offending ECDSA key in /Users/xxx/.ssh/known_hosts:26</div><div class="line">ECDSA host key for 47.98.233.15 has changed and you have requested strict checking.</div><div class="line">Host key verification failed.</div></pre></td></tr></table></figure>
<p><code>根据上面的信息 Add correct host key in /Users/xxx/.ssh/known_hosts to get rid of this message.</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 编辑文件</div><div class="line">vi 文件路径（比如：/User/xxx/.ssh/known_hosts）</div></pre></td></tr></table></figure>
<p><code>输入i 进入编辑模式，找下图信息中找到ip为47.98.233.15的记录，删除，如下图</code><br><img src="https://gitee.com/AgoniNemo/nmimage/raw/master/assets/inset/g11.jpeg" alt="1"></p>
<p><code>这里的ip与上面错误信息的ip是一致的，要根据自己的错误信息查找。</code></p>
<h4 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">yum install -y wget</div><div class="line"></div><div class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</div><div class="line"></div><div class="line">chmod +x bbr.sh</div><div class="line"></div><div class="line">./bbr.sh</div><div class="line"></div><div class="line">安装完成后，脚本会提示需要重启VPS，输入 y 并回车后重启，可能需要几分钟</div><div class="line"></div><div class="line"># 几分钟过后 连接到google cloud</div><div class="line">ssh -i ~/.ssh/google 用户名@外网的ip地址</div><div class="line"></div><div class="line"># 使用root权限</div><div class="line">sudo -s</div><div class="line"></div><div class="line">###### 验证是否安装成功</div><div class="line"></div><div class="line">sysctl net.ipv4.tcp_available_congestion_control</div><div class="line">返回值一般为：</div><div class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</div><div class="line"></div><div class="line">sysctl net.ipv4.tcp_congestion_control</div><div class="line">返回值一般为：</div><div class="line">net.ipv4.tcp_congestion_control = bbr</div><div class="line"></div><div class="line">sysctl net.core.default_qdisc</div><div class="line">返回值一般为：</div><div class="line">net.core.default_qdisc = fq</div><div class="line"></div><div class="line">lsmod | grep bbr</div><div class="line">返回值有 tcp_bbr 模块即说明bbr已启动</div></pre></td></tr></table></figure>
<h3 id="安装SSR"><a href="#安装SSR" class="headerlink" title="安装SSR"></a>安装SSR</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line"></div><div class="line"># 安装shadowsocks</div><div class="line">pip install shadowsocks</div><div class="line"></div><div class="line"># 创建shadowsocks文件夹用来放一些配置文件</div><div class="line">mkdir /etc/shadowsocks</div><div class="line"></div><div class="line"># 编辑配置文件</div><div class="line">vim /etc/shadowsocks/config.json</div></pre></td></tr></table></figure>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><h4 id="多个用户使用的配置"><a href="#多个用户使用的配置" class="headerlink" title="多个用户使用的配置"></a>多个用户使用的配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,  </div><div class="line"> &quot;local_port&quot;:1080,  </div><div class="line"> &quot;port_password&quot;: &#123;   </div><div class="line">     &quot;8987&quot;: &quot;密码&quot;,    </div><div class="line">     &quot;8988&quot;: &quot;密码&quot;,</div><div class="line">     &quot;8989&quot;: &quot;密码&quot;</div><div class="line"> &#125;,  </div><div class="line"> &quot;timeout&quot;:300,  </div><div class="line"> &quot;method&quot;:&quot;aes-256-cfb&quot;,  </div><div class="line"> &quot;fast_open&quot;: false  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="单用户使用的配置"><a href="#单用户使用的配置" class="headerlink" title="单用户使用的配置"></a>单用户使用的配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</div><div class="line">  &quot;server_port&quot;:  8838,</div><div class="line">  &quot;local_address&quot;:  &quot;127.0.0.1&quot;,</div><div class="line">  &quot;local_port&quot;: 1080,</div><div class="line">  &quot;password&quot;: &quot;密码&quot;,</div><div class="line">  &quot;timeout&quot;:  300,</div><div class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;,</div><div class="line">  &quot;fast_open&quot;:false,</div><div class="line">  &quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动Shadowsocks</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure>
<h3 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 打开配置文件</div><div class="line">sudo vi /etc/rc.local</div><div class="line"></div><div class="line"># 加入下面配置</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 停止Shadowsocks</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d stop</div><div class="line"></div><div class="line"># 重启Shadowsocks服务</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d restart</div></pre></td></tr></table></figure>
<h3 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h3><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">Windows客户端下载地址</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="external">macOS客户端下载地址</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="external">Linux客户端下载地址</a></p>
<p>安装之后，添加服务器，地址为AWS的外网地址，登录AWS控制台，查看正在运行中的实例，在右边<code>外部 IP</code>找到。 端口号为刚才配置Shadowsocks服务器时的端口号，密码也是刚才配置的，设置完之后保存，接下来就可以自由的浪了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;自从16年的在aws搭了梯子以后，从此开始了自由之路，但是在用完了aws&lt;a href=&quot;https://agoninemo.github.io/blog/2017/11/14/AWS%E6%90%AD%E5%BB%BASS/#more&quot;&gt;一年的免费流量&lt;/a&gt;之后，再用回百度，怎么都感觉不爽，于是，就去招商开了一个visa的信用卡，从Google Cloud再次开起自由之路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vpn" scheme="http://agoninemo.github.io/blog/tags/vpn/"/>
    
      <category term="ssr" scheme="http://agoninemo.github.io/blog/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>iOS 谓词（NSPredicate）</title>
    <link href="http://agoninemo.github.io/blog/2019/02/01/iOS-%E8%B0%93%E8%AF%8D/"/>
    <id>http://agoninemo.github.io/blog/2019/02/01/iOS-谓词/</id>
    <published>2019-02-01T13:49:05.000Z</published>
    <updated>2021-01-13T14:25:50.898Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中，需要比较复杂的查询与比较，所以用的NSPredicate类比较多，下面来说下这个NSPredicate类是用来干嘛的。其实NSPredicate类是用来定义逻辑条件约束的获取或内存中的过滤搜索。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@class Dog;</div><div class="line">@interface Person : NSObject</div><div class="line">@property (nonatomic, strong) NSString *name;</div><div class="line">@property (nonatomic, assign) NSInteger age;</div><div class="line">@property (nonatomic, strong) Dog *likeDog;</div><div class="line">@property (nonatomic, strong) NSArray &lt;Dog *&gt;*dogs;</div><div class="line">@end</div><div class="line"></div><div class="line">@interface Dog : NSObject</div><div class="line">@property (nonatomic, strong) NSString *name;</div><div class="line">@end</div><div class="line"></div><div class="line">NSArray &lt;Person *&gt;*dataSource = ....</div></pre></td></tr></table></figure>
<p>1.查找</p>
<p>例子：在一个模型数组里找到符合条件的模型，一般大家开始想到的是就是循环这个模型数组，然后对比条件，这个比较的简单，但是如果这个模型数组里的模型属性又有一个模型数组呢，又是一个循环？不需要，下面我们用NSPredicate来实现这样的需求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">一个人类模型，里面有一个狗的数组</div><div class="line"></div><div class="line">比如：dataSource里装了n个人，每个人又有m个狗，怎么找到里面`name`叫`jack`的狗呢？</div><div class="line">for (Person *per in dataSource)&#123;</div><div class="line">	NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;SELF.name = %@&quot;,@&quot;jack&quot;];</div><div class="line">	NSArray *result = [per.dogs filteredArrayUsingPredicate: pre];</div><div class="line">	if (result.count &gt; 0) &#123;</div><div class="line">		NSLog(@&quot;%@&quot;,result);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">再来个例子</div><div class="line">如：dataSource里装了n个人，每个人都有一个likeDog，怎么找到里面`name`叫`Rose`的狗呢？</div><div class="line">NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;SELF.likeDog.name = %@&quot;,@&quot;jack&quot;];</div><div class="line">NSArray *result = [per.dogs filteredArrayUsingPredicate: pre];</div><div class="line">if (result.count &gt; 0) &#123;</div><div class="line">		NSLog(@&quot;%@&quot;,result);</div><div class="line">&#125;</div><div class="line"></div><div class="line">对就是这么简单，你想要找里面的某个模型里的属性可以直接点下去就想上面的例子一样</div><div class="line"></div><div class="line">IN：等价于SQL语句中的IN运算符，只有当左边表达式或值出现在右边的集合中才会返回YES。我们通过一个例子来看一下</div><div class="line"># 查找name为`Rose`与`jace`的人</div><div class="line">NSArray *array = @[@&quot;Rose&quot;, @&quot;jace&quot;];</div><div class="line">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;(SELF.name IN %@)&quot;, array];</div><div class="line">NSArray *result = [dataSource filteredArrayUsingPredicate: pre];</div><div class="line">if (result.count &gt; 0) &#123;</div><div class="line">	NSLog(@&quot;%@&quot;,result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.比较</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 查找age大于50的人</div><div class="line">NSPredicate *pred = [NSPredicate predicateWithFormat:@&quot;SELF.age &gt; %@&quot;,@&quot;50&quot;];</div><div class="line"> </div><div class="line">NSArray *result = [dataSource filteredArrayUsingPredicate: pre];</div><div class="line">if (result.count &gt; 0) &#123;</div><div class="line">		NSLog(@&quot;%@&quot;,result);</div><div class="line">&#125;</div><div class="line"></div><div class="line">MATCHES：检查某个字符串是否匹配指定的正则表达式。虽然正则表达式的执行效率是最低的，但其功能是最强大的，也是我们最常用的。</div><div class="line"># 查找name包含jace的人</div><div class="line"></div><div class="line">NSPredicate *pred = [NSPredicate predicateWithFormat:@&quot;name CONTAINS &apos;%@&apos;&quot;,@&quot;jace&quot;];</div><div class="line">NSArray * result = [dataSource filteredArrayUsingPredicate: pred];</div></pre></td></tr></table></figure>
<p>以上只是项目中用到<code>NSPredicate</code>比较多的用法，其实<code>NSPredicate</code>还有很多的用法，大家可以自行百度</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目中，需要比较复杂的查询与比较，所以用的NSPredicate类比较多，下面来说下这个NSPredicate类是用来干嘛的。其实NSPredicate类是用来定义逻辑条件约束的获取或内存中的过滤搜索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NSPredicate" scheme="http://agoninemo.github.io/blog/tags/NSPredicate/"/>
    
  </entry>
  
  <entry>
    <title>Square 支付SDK集成</title>
    <link href="http://agoninemo.github.io/blog/2019/01/21/Square-%E6%94%AF%E4%BB%98SDK%E9%9B%86%E6%88%90/"/>
    <id>http://agoninemo.github.io/blog/2019/01/21/Square-支付SDK集成/</id>
    <published>2019-01-21T04:14:30.000Z</published>
    <updated>2021-01-13T14:25:50.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍（最后更新2019-7-15）"><a href="#介绍（最后更新2019-7-15）" class="headerlink" title="介绍（最后更新2019-7-15）"></a>介绍（最后更新2019-7-15）</h3><p>因为要做一个海外项目，涉及到支付这块，公司调查了国外的支付情况，说是信用卡用得比较多，而移动支付又要收手续费，经过几个移动支付SDK比较，最后选择这个性价比高的<a href="https://developer.squareup.com/docs/sample-apps" target="_blank" rel="external">Square</a>.<br><a href="https://developer.squareup.com/docs/sample-apps" target="_blank" rel="external">Square</a>支付感觉比较的完善，支持多种环境React Native、Flutter、Swift、OC。本文主要使用OC SDK，因为官方的<a href="https://github.com/square/in-app-payments-ios-quickstart" target="_blank" rel="external">Demo</a>就是Swift写的。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>先说明下，这个支付SDK，官方说只支付<a href="https://developer.squareup.com/docs/in-app-payments-sdk/build-on-ios" target="_blank" rel="external">iOS 10</a>以上，所以<a href="https://developer.squareup.com/docs/in-app-payments-sdk/build-on-ios" target="_blank" rel="external">iOS 10</a>以下的还是另外考虑吧</p>
<ul>
<li>1.和国内支付一样，需要申请一个key一样的东西这块不是笔主弄的，看<a href="https://developer.squareup.com/docs/in-app-payments-sdk/quick-start/start" target="_blank" rel="external">官方文档</a>吧。</li>
<li>2.使用<a href="https://developer.squareup.com/docs/in-app-payments-sdk/installation" target="_blank" rel="external">cocoapods</a>集成<code>pod &#39;SquareInAppPaymentsSDK&#39;</code>.</li>
<li>3.代码编写.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;SquareInAppPaymentsSDK/SquareInAppPaymentsSDK.h&gt;</div><div class="line"></div><div class="line">信用卡代理：SQIPCardEntryViewControllerDelegate</div><div class="line">apple pay代理：PKPaymentAuthorizationViewControllerDelegate</div><div class="line">按照自己需要设置</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) SQIPCardEntryViewController *cardEntryForm;</div><div class="line"></div><div class="line">/// 这个key填第一步申请的 类似 sandbox-xxxxx-xxxx-x-_x 这里要注意，key里有sandbox 是沙盒环境</div><div class="line"> [SQIPInAppPaymentsSDK setSquareApplicationID:@&quot;key&quot;];</div><div class="line"> SQIPTheme *theme = [[SQIPTheme alloc] init];</div><div class="line"> theme.errorColor = [UIColor redColor];</div><div class="line"> theme.tintColor = [UIColor redColor];</div><div class="line"> theme.saveButtonTitle = @&quot;保存&quot;;</div><div class="line"> self.cardEntryForm = [[SQIPCardEntryViewController alloc] initWithTheme:theme];</div><div class="line"> self.cardEntryForm.delegate  = self;</div><div class="line"> self.cardEntryForm.collectPostalCode = NO;</div></pre></td></tr></table></figure>
<h3 id="信用卡支付"><a href="#信用卡支付" class="headerlink" title="信用卡支付"></a>信用卡支付</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/// 结束返回</div><div class="line">- (void)cardEntryViewController:(nonnull SQIPCardEntryViewController *)cardEntryViewController didCompleteWithStatus:(SQIPCardEntryCompletionStatus)status &#123;</div><div class="line">    NSLog(@&quot;status:%ld&quot;,status);</div><div class="line">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class="line">    </div><div class="line">    if (status == SQIPCardEntryCompletionStatusSuccess) &#123;</div><div class="line">        /// 支付成功</div><div class="line">    &#125;else&#123;</div><div class="line">        /// 支付失败</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/// 获取令牌</div><div class="line">- (void)cardEntryViewController:(nonnull SQIPCardEntryViewController *)cardEntryViewController didObtainCardDetails:(nonnull SQIPCardDetails *)cardDetails</div><div class="line">              completionHandler:(void (^_Nonnull)(NSError *_Nullable))completionHandler &#123;</div><div class="line">    /// 把cardDetails.nonce发给后端</div><div class="line">    NSLog(@&quot;%@&quot;,cardDetails.nonce);</div><div class="line">	/// 然后调用completionHandler回调，如果有错误，就替换nil</div><div class="line">    completionHandler(nil);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="苹果支付"><a href="#苹果支付" class="headerlink" title="苹果支付"></a><a href="https://developer.squareup.com/docs/in-app-payments-sdk/add-digital-wallets/apple-pay" target="_blank" rel="external">苹果支付</a></h3><p>PS：关于<a href="https://www.jianshu.com/p/8bd69e91c5c0" target="_blank" rel="external">apple pay的证书配置</a>不是本文范围</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)requestApplePayAuthorization &#123;</div><div class="line">    if (!SQIPInAppPaymentsSDK.canUseApplePay) &#123;</div><div class="line">        // 判断是否能使用Apple Pay</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    PKPaymentRequest *paymentRequest = [PKPaymentRequest squarePaymentRequestWithMerchantIdentifier:@&quot;苹果支付ID&quot;</div><div class="line">                                                     countryCode:@&quot;AU&quot;</div><div class="line">                                                    currencyCode:@&quot;USD&quot;];</div><div class="line">    </div><div class="line">    NSDecimalNumber *amount = [NSDecimalNumber decimalNumberWithString:@&quot;1.0&quot;];</div><div class="line">    </div><div class="line">    paymentRequest.paymentSummaryItems = @[[PKPaymentSummaryItem summaryItemWithLabel:@&quot;公司名&quot; amount:amount]];</div><div class="line">    </div><div class="line">    PKPaymentAuthorizationViewController *paymentAuthorizationViewController =</div><div class="line">    [[PKPaymentAuthorizationViewController alloc] initWithPaymentRequest:paymentRequest];</div><div class="line">    </div><div class="line">    paymentAuthorizationViewController.delegate = self;</div><div class="line">    [self presentViewController:paymentAuthorizationViewController animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">#pragma --mark PKPaymentAuthorizationViewControllerDelegate</div><div class="line"></div><div class="line">- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller</div><div class="line">                       didAuthorizePayment:(PKPayment *)payment</div><div class="line">                                   handler:(void (^)(PKPaymentAuthorizationResult * _Nonnull))completion API_AVAILABLE(ios(11.0))&#123;</div><div class="line">    // TODO: Add payment-&gt;nonce exchange logic. See Step 5: Request a Square nonce</div><div class="line">    [self popHintView];</div><div class="line">    SQIPApplePayNonceRequest *nonceRequest = [[SQIPApplePayNonceRequest alloc] initWithPayment:payment];</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    [nonceRequest performWithCompletionHandler:^(SQIPCardDetails * _Nullable cardDetails,</div><div class="line">                                                 NSError * _Nullable error) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            if (@available(iOS 11.0, *)) &#123;</div><div class="line">                PKPaymentAuthorizationResult *errorResult =</div><div class="line">                [[PKPaymentAuthorizationResult alloc]</div><div class="line">                 initWithStatus:PKPaymentAuthorizationStatusFailure errors:@[error]];</div><div class="line">                completion(errorResult);</div><div class="line">                </div><div class="line">            &#125; else &#123;</div><div class="line">                // Fallback on earlier versions</div><div class="line">            &#125;</div><div class="line">            /// 支付失败</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // Send the card nonce to your server to charge the card or store the card on file.</div><div class="line">        NSLog(@&quot;%@&quot;,cardDetails.nonce);</div><div class="line">      /** 支付成功</div><div class="line">		PKPaymentAuthorizationResult *successResult = [[PKPaymentAuthorizationResult alloc]initWithStatus:PKPaymentAuthorizationStatusSuccess errors:nil];</div><div class="line">       completion(successResult);</div><div class="line">		*/</div><div class="line">		</div><div class="line">		/** 支付失败</div><div class="line"> 		PKPaymentAuthorizationResult *errorResult = [[PKPaymentAuthorizationResult alloc] initWithStatus:PKPaymentAuthorizationStatusFailure errors:@[error]];</div><div class="line">       completion(errorResult);</div><div class="line">		*/</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line">- (void)paymentAuthorizationViewControllerDidFinish:(nonnull PKPaymentAuthorizationViewController *)controller &#123;</div><div class="line">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div><div class="line">- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller</div><div class="line">                       didAuthorizePayment:(PKPayment *)payment</div><div class="line">                                completion:(void (^)(PKPaymentAuthorizationStatus))completion &#123;</div><div class="line">    // TODO: Add payment-&gt;nonce exchange logic. See Step 5: Request a Square nonce</div><div class="line">   </div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    SQIPApplePayNonceRequest *nonceRequest = [[SQIPApplePayNonceRequest alloc] initWithPayment:payment];</div><div class="line">    [nonceRequest performWithCompletionHandler:^(SQIPCardDetails * _Nullable cardDetails, NSError * _Nullable error) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            completion(PKPaymentAuthorizationStatusFailure);</div><div class="line">            /// 支付失败</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Send the card nonce to your server to charge the card or store the card on file.</div><div class="line">        NSLog(@&quot;%@&quot;,cardDetails.nonce);</div><div class="line"></div><div class="line">        /// 把cardDetails.nonce发送到后端</div><div class="line">        /// 支付失败 调用completion(PKPaymentAuthorizationStatusFailure);</div><div class="line">        /// 支付成功 调用completion(PKPaymentAuthorizationStatusSuccess);</div><div class="line">            </div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/// 点击支付</div><div class="line">- (void)clickApplePay:(BOOL)b &#123;</div><div class="line">	</div><div class="line">	if (b) &#123;</div><div class="line">	</div><div class="line">	  [self requestApplePayAuthorization];</div><div class="line"></div><div class="line">	&#125; else &#123;</div><div class="line">		UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:self.cardEntryForm];</div><div class="line">    	[self presentViewController:nav animated:YES completion:nil];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ps:说点其他的，后端可以控制支付卡的保存，还有不明白的看<a href="https://developer.squareup.com/docs/in-app-payments-sdk/what-it-does" target="_blank" rel="external">官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍（最后更新2019-7-15）&quot;&gt;&lt;a href=&quot;#介绍（最后更新2019-7-15）&quot; class=&quot;headerlink&quot; title=&quot;介绍（最后更新2019-7-15）&quot;&gt;&lt;/a&gt;介绍（最后更新2019-7-15）&lt;/h3&gt;&lt;p&gt;因为要做一个海外项目，涉及到支付这块，公司调查了国外的支付情况，说是信用卡用得比较多，而移动支付又要收手续费，经过几个移动支付SDK比较，最后选择这个性价比高的&lt;a href=&quot;https://developer.squareup.com/docs/sample-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Square&lt;/a&gt;.&lt;br&gt;&lt;a href=&quot;https://developer.squareup.com/docs/sample-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Square&lt;/a&gt;支付感觉比较的完善，支持多种环境React Native、Flutter、Swift、OC。本文主要使用OC SDK，因为官方的&lt;a href=&quot;https://github.com/square/in-app-payments-ios-quickstart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;就是Swift写的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Square" scheme="http://agoninemo.github.io/blog/tags/Square/"/>
    
  </entry>
  
  <entry>
    <title>Mac本地运行web项目</title>
    <link href="http://agoninemo.github.io/blog/2018/12/13/%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Cweb%E9%A1%B9%E7%9B%AE/"/>
    <id>http://agoninemo.github.io/blog/2018/12/13/本地运行web项目/</id>
    <published>2018-12-13T14:53:30.000Z</published>
    <updated>2021-01-13T14:25:51.029Z</updated>
    
    <content type="html"><![CDATA[<h4 id="如何在本地加载打包的web"><a href="#如何在本地加载打包的web" class="headerlink" title="如何在本地加载打包的web"></a>如何在本地加载打包的web</h4><h4 id="一、Mac-OS-X-自带了-Apache-环境"><a href="#一、Mac-OS-X-自带了-Apache-环境" class="headerlink" title="一、Mac OS X 自带了 Apache 环境"></a>一、Mac OS X 自带了 Apache 环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Apache服务器默认的web根目录在：/Library/WebServer/Documents</div><div class="line">Apache的配置文件在：/etc/apache2</div><div class="line"></div><div class="line">将index.html文件拷贝到 /Library/WebServer/Documents 目录下</div><div class="line">将static文件夹拷贝到 /Library/WebServer/Documents 目录下</div><div class="line"></div><div class="line">在terminal终端直接运行Apache的启动命令来打开：sudo apachectl start</div><div class="line"></div><div class="line">在浏览器 输入地址 规则为：IP/index.html 比如：http://192.168.0.5/index.html</div><div class="line">IP为本机的IP</div><div class="line"></div><div class="line">停止 Apache：sudo apachectl stop</div><div class="line">重启 Apache：sudo apachectl restart</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">上面的步骤只能  打开一些静态界面，需要网络请求 会遇到跨域问题</div><div class="line">解决方法 如下</div></pre></td></tr></table></figure>
<h4 id="二、跨域问题"><a href="#二、跨域问题" class="headerlink" title="二、跨域问题"></a>二、跨域问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.建立本地跨域文件夹</div><div class="line">这个文件夹是浏览器打开时候进行设置一些基本文件，因为需要关闭浏览器的安全策略。</div><div class="line">命令：cd /Users/[用户名]/Documents/ 然后建立个文件夹：命令是mkdir ChromeDevData</div><div class="line"></div><div class="line">参数：ChromeDevData可以自己命名，只要与下面的命令中的ChromeDevData保持一致就行</div><div class="line"></div><div class="line">2.打开浏览器增加参数</div><div class="line">命令：open -n /Applications/Google\ Chrome.app/ --args --disable-web-security --user-data-dir=/Users/[用户名]/Documents/ChromeDevData</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;如何在本地加载打包的web&quot;&gt;&lt;a href=&quot;#如何在本地加载打包的web&quot; class=&quot;headerlink&quot; title=&quot;如何在本地加载打包的web&quot;&gt;&lt;/a&gt;如何在本地加载打包的web&lt;/h4&gt;&lt;h4 id=&quot;一、Mac-OS-X-自带了-Apache
    
    </summary>
    
    
      <category term="web" scheme="http://agoninemo.github.io/blog/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>RN问题汇总</title>
    <link href="http://agoninemo.github.io/blog/2018/11/15/RN%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://agoninemo.github.io/blog/2018/11/15/RN问题汇总/</id>
    <published>2018-11-15T10:16:04.000Z</published>
    <updated>2021-01-13T14:25:50.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Cannot find module ‘./lib/extract_requires’</p>
</blockquote>
<p>解决方法:<code>rm -rf node_modules &amp;&amp; npm install</code></p>
<blockquote>
<p>打开远程调试出现警告  Remote debugger is in a background tab which may cause apps to perform slowly </p>
</blockquote>
<p>这是提示要要把调试界面的Tab页保持最前，停留在chrome调试界面解决问题</p>
<blockquote>
<p>Warning: Failed child context type: Invalid child context <code>virtualizedCell.cellKey</code> of type <code>number</code> supplied to <code>CellRenderer</code>, expected <code>string</code></p>
</blockquote>
<p>使用了<code>FlatList</code>组件出去的问题  这是类型不正确引起的 解决方法：<code>FlatList</code>加入方法<code>keyExtractor={(item, index) =&gt; index.toString()}</code></p>
<blockquote>
<p>android库的安装问题</p>
</blockquote>
<p>一般按照android安装的方法 安装没问题 用的时候出问题  可以试试从android studio运行一篇 都能解决大部分问题</p>
<blockquote>
<p>‘config.h’ file not found</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd node_modules/react-native/third-party/glog-0.3.4</div><div class="line">../../scripts/ios-configure-glog.sh</div></pre></td></tr></table></figure>
<p>PS:上面的是两行命令，如果直接进入<code>scripts</code>里执行脚本，会失败</p>
<blockquote>
<p>执行某个模拟器<br><code>react-native run-ios --simulator=&quot;iPhone 8&quot;</code></p>
<p>app一打开就闪退问题（可能是用到的assets没有创建）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p android/app/src/main/assets</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Cannot find module ‘./lib/extract_requires’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方法:&lt;code&gt;rm -rf node_modules &amp;amp;&amp;amp; npm install&lt;/code
    
    </summary>
    
    
      <category term="React-native" scheme="http://agoninemo.github.io/blog/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的关于字节整理</title>
    <link href="http://agoninemo.github.io/blog/2018/10/18/iOS%E4%B8%AD%E7%9A%84%E5%85%B3%E4%BA%8E%E5%AD%97%E8%8A%82%E6%95%B4%E7%90%86/"/>
    <id>http://agoninemo.github.io/blog/2018/10/18/iOS中的关于字节整理/</id>
    <published>2018-10-18T11:09:33.000Z</published>
    <updated>2021-01-13T14:25:50.914Z</updated>
    
    <content type="html"><![CDATA[<p>字节顺序是指占内存多于一个字节类型的数据在内存中的存放顺序，通常有小端、大端两种字节顺序。</p>
<p>小端字节序指低字节数据存放在内存低地址处，高字节数据存放在内存高地址处；</p>
<p>大端字节序是高字节数据存放在低地址处，低字节数据存放在高地址处。</p>
<p>正因为有字节顺序的差别，所以在网络传输的时候定义了所有字节顺序相关的数据都使用big-endian，BSD的代码中定义了四个宏来理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#define ntohs(n)      //网络字节顺序到主机字节顺序 n代表net, h代表host, s代表short</div><div class="line">#define htons(n)      //主机字节顺序到网络字节顺序 n代表net, h代表host, s代表short</div><div class="line">#define ntohl(n)      //网络字节顺序到主机字节顺序 n代表net, h代表host, s代表long</div><div class="line">#define htonl(n)      //主机字节顺序到网络字节顺序 n代表net, h代表host, s代表long</div></pre></td></tr></table></figure>
<p>计算机容量单位的换算关系:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1Byte=8bit</div><div class="line">1KB=1024B</div><div class="line">1MB=1024KB</div><div class="line">1GB=1024MB</div><div class="line">1TB=1024GB</div><div class="line">1PB=1024TB</div><div class="line">1EB=1024PB</div><div class="line">1ZB=1024EB</div><div class="line">1YB=1024ZB</div></pre></td></tr></table></figure>
<p>各种数据类型的取值范围</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">char  -128 ~ +127 (1 Byte)</div><div class="line">short -32767 ~ + 32768 (2 Bytes)</div><div class="line">unsigned short  0 ~ 65536 (2 Bytes)</div><div class="line">int -2147483648 ~ +2147483647 (4 Bytes)</div><div class="line">unsigned int 0 ~ 4294967295 (4 Bytes)</div><div class="line">long == int</div><div class="line">long long -9223372036854775808 ~ +9223372036854775807 (8 Bytes)</div><div class="line">double 1.7 * 10^308 (8 Bytes)</div><div class="line"></div><div class="line">unsigned int 0～4294967295 </div><div class="line">long long的最大值9223372036854775807</div><div class="line">long long的最小值-9223372036854775808</div><div class="line">unsigned long long的最大值1844674407370955161</div><div class="line"></div><div class="line">__int64的最大值9223372036854775807</div><div class="line">__int64的最小值-9223372036854775808</div><div class="line">unsigned __int64的最大值18446744073709551615</div></pre></td></tr></table></figure>
<h4 id="iOS的类型字节大小"><a href="#iOS的类型字节大小" class="headerlink" title="iOS的类型字节大小"></a>iOS的类型字节大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Base integer types for all target OS&apos;s and CPU&apos;s</div><div class="line">    </div><div class="line">UInt8            8-bit unsigned integer </div><div class="line">SInt8            8-bit signed integer</div><div class="line">UInt16          16-bit unsigned integer </div><div class="line">SInt16          16-bit signed integer           </div><div class="line">UInt32          32-bit unsigned integer </div><div class="line">SInt32          32-bit signed integer   </div><div class="line">UInt64          64-bit unsigned integer </div><div class="line">SInt64          64-bit signed integer</div></pre></td></tr></table></figure>
<h4 id="iOS的字节序"><a href="#iOS的字节序" class="headerlink" title="iOS的字节序"></a>iOS的字节序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (NSHostByteOrder() == NS_LittleEndian) &#123;</div><div class="line">        NSLog(@&quot;小端字节序&quot;);</div><div class="line">&#125;else if(NSHostByteOrder() == NS_BigEndian)&#123;</div><div class="line">        NSLog(@&quot;大端字节序&quot;);</div><div class="line">&#125;else &#123;</div><div class="line">        NSLog(@&quot;未知&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上述代码打印出来的log，可以知道iOS系统目前采用的是小端序。因此在进行socket网络传输之类的工作时，要记得先把字节序进行转换，然后再传输。iOS自身提供了相应的转换方法，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UInt16 byte = 0x1234;</div><div class="line">HTONS(byte);//转换</div><div class="line">NSLog(@&quot;Byte == %x&quot;,Byte);//打印出来发现顺序变了</div></pre></td></tr></table></figure>
<p>上述代码中 HTONS(x) 是对2字节进行转换,为什么是2个字节?从Xcode里点进去你就会发现<code>typedef unsigned short</code>,而<code>unsigned short</code>是2个字节的,也可以根据上面的类型字节大小转换,<code>UInt16</code>是<code>16bit</code>,而<code>1Byte=8bit</code>,所以是2个字节,如果要对4字节进行转换，就要用 HTONL(x)进行转换了，要对更高字节，比如8字节（64位）进行转换，就要自己写转换的方法了。</p>
<p>参考文章:</p>
<p><a href="http://alex1212112.github.io/ios/2014/08/12/ioszhong-de-zi-jie-xu.html" target="_blank" rel="external">http://alex1212112.github.io/ios/2014/08/12/ioszhong-de-zi-jie-xu.html</a><br><a href="http://blog.csdn.net/wanwenweifly4/article/details/6627122" target="_blank" rel="external">http://blog.csdn.net/wanwenweifly4/article/details/6627122</a><br><a href="http://blog.csdn.net/will130/article/details/48735769" target="_blank" rel="external">http://blog.csdn.net/will130/article/details/48735769</a><br><br><a href="http://lib.csdn.net/article/c/26419" target="_blank" rel="external">http://lib.csdn.net/article/c/26419</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字节顺序是指占内存多于一个字节类型的数据在内存中的存放顺序，通常有小端、大端两种字节顺序。&lt;/p&gt;
&lt;p&gt;小端字节序指低字节数据存放在内存低地址处，高字节数据存放在内存高地址处；&lt;/p&gt;
&lt;p&gt;大端字节序是高字节数据存放在低地址处，低字节数据存放在高地址处。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="byte" scheme="http://agoninemo.github.io/blog/tags/byte/"/>
    
      <category term="iOS" scheme="http://agoninemo.github.io/blog/tags/iOS/"/>
    
  </entry>
  
</feed>
