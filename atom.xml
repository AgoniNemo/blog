<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AgoniNemo&#39;s blog</title>
  <subtitle>在你想要放弃的那一刻,想想为什么当初坚持走到这里...</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://agoninemo.github.io/blog/"/>
  <updated>2018-09-09T05:02:32.300Z</updated>
  <id>http://agoninemo.github.io/blog/</id>
  
  <author>
    <name>AgoniNemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue技巧使用</title>
    <link href="http://agoninemo.github.io/blog/2018/09/08/vue%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8/"/>
    <id>http://agoninemo.github.io/blog/2018/09/08/vue技巧使用/</id>
    <published>2018-09-08T15:40:06.000Z</published>
    <updated>2018-09-09T05:02:32.300Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/1486368214291404.jpg" alt="1"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>突然想起自己好久没有更新博客了，最近都在开发web，前天被调去其他组做iOS，被其他的iOS嫌弃开发速度了，上次上线的个人web项目也因为视频来源挂，所以也看不了，真是好气呀！唉，心累。好了，不发牢骚了，下面来说说，博主在项目遇到的问题与解决方法。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>博主开发项目时，这样一个需求，如下图<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/WechatIMG141.jpeg" alt="2"><br>点击<code>展开</code>时，变成<code>收起</code>，项目中用到饿了么的UI组件<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="external">Element</a>里的Table表格，可以设置<code>type=&quot;expand&quot;</code>和<code>Scoped slot</code>来达到设置展开效果，但是这个点击展开的组件是没有属性可以设置。<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/WechatIMG144.jpeg" alt="3"><br>博主原来的想法是操作DOM添加文字，后来前端大佬如果这么做，数据多的话，会有问题，所以博主就在样式方面下功夫，最后添加如下样式，实现效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.cell &#123;</div><div class="line">    .el-table__expand-icon &#123;</div><div class="line">        i &#123;</div><div class="line">            left: 0;</div><div class="line">            color: #66b1ff;</div><div class="line">            font-size: 14px;</div><div class="line">        &#125;</div><div class="line">        .el-icon-arrow-right:before &#123;</div><div class="line">            content: &apos;展开&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    .el-table__expand-icon--expanded &#123;</div><div class="line">        transform:rotate(0);</div><div class="line">        .el-icon-arrow-right:before &#123;</div><div class="line">            content: &apos;收起&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="PS-建议在cell外层再套一层，避免影响全局样式（再罗嗦一句，这里使用vue的scoped会找不到这个cell，原因的话，你可以看官方文档，所以不要在style里添加scoped）"><a href="#PS-建议在cell外层再套一层，避免影响全局样式（再罗嗦一句，这里使用vue的scoped会找不到这个cell，原因的话，你可以看官方文档，所以不要在style里添加scoped）" class="headerlink" title="PS:建议在cell外层再套一层，避免影响全局样式（再罗嗦一句，这里使用vue的scoped会找不到这个cell，原因的话，你可以看官方文档，所以不要在style里添加scoped）"></a>PS:建议在cell外层再套一层，避免影响全局样式（再罗嗦一句，这里使用vue的scoped会找不到这个cell，原因的话，你可以看官方文档，所以不要在style里添加scoped）</h5><p>第二个需求就是城市二级选择器，这个需求使用到了<a href="http://element-cn.eleme.io/#/zh-CN/component/cascader" target="_blank" rel="external">Cascader 级联选择器</a>，数据的话，是前端大佬弄好的，博主做了一些修改，就成了二级数据了（想要的童鞋可以在下面留言）。但是这里有个问题，就是设置<code>change-on-select</code>与<code>expand-trigger</code>为<code>hover</code>时，不可以选择一级，里面的只提供了一个<code>change</code>方法用于数据改变时的回调，但是博客的需求是可以选择一级，也可以选择二级。最初的想法，就是看下内部有没有点击事件，很遗憾，那个点击方法不合适，但是博主还是找到了有用的方法，在<code>main.vue</code>文件里的385行（查看于2018-09-08 22:12:06）<code>handleClickoutside</code>方法，一看就命名就知道是点击组件外时调用的，里面设置了<code>this.menuVisible = false</code>，这是用来打开与关闭组件用的。看到这里，博主有了思路，因为这个组件可以用<code>v-model</code>来绑定数据，那么可以在第一级组件里添加一个点击方法，达到可以让用户点击一级的效果，下面来看代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;el-cascader</div><div class="line">    size=&quot;large&quot;</div><div class="line">    placeholder=&quot;请选择&quot;</div><div class="line">    ref=&quot;cascader&quot;</div><div class="line">    :options=&quot;options&quot;</div><div class="line">    v-model=&quot;address&quot;</div><div class="line">    expand-trigger=&quot;hover&quot;</div><div class="line">    @focus=&quot;cityAction&quot;</div><div class="line">    popper-class=&quot;city-popper&quot;</div><div class="line">    change-on-select</div><div class="line">    clearable&gt;</div><div class="line">&lt;/el-cascader&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">	cityAction() &#123;</div><div class="line">	    setTimeout(()=&gt;&#123;</div><div class="line">	        let ul = document.getElementsByClassName(&apos;el-cascader-menu&apos;)[0];</div><div class="line">	        let than = this;</div><div class="line">	        if (!ul.onclick) &#123;</div><div class="line">	            ul.onclick = function () &#123;</div><div class="line">	                than.$refs.cascader.handleClickoutside();</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	    &#125;, 300)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h4><p>组件里用到<code>focus</code>方法这个方法在源码的<code>main.vue</code>文件里397～398行（查看于2018-09-08 22:12:06）<code>this.$emit(&#39;focus&#39;, event)</code>，使用过<code>vue</code>的都知道，子组件与父组件组件通信，使用到<code>$emit</code>来传给父组件，所以博主在这里使用<code>focus</code>同步方法<code>cityAction</code>来监听用户点击选择器，在<code>cityAction</code>方法里，添加一级点击事件，并调用组件<code>handleClickoutside</code>方法来关闭选择器。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实无论做什么，都要心静，这样才能更清晰的思路，在开发中，才更不容易出错。还有就是要不断的学习，特别是做技术的，不学习就后退，就会被淘汰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orfd017lz.bkt.clouddn.com/assets/inset/1486368214291404.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;突然想起自己好久没有更新博客了，最近都在开发web，前天被调去其他组做iOS，被其他的iOS嫌弃开发速度了，上次上线的个人web项目也因为视频来源挂，所以也看不了，真是好气呀！唉，心累。好了，不发牢骚了，下面来说说，博主在项目遇到的问题与解决方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://agoninemo.github.io/blog/tags/vue/"/>
    
      <category term="Element" scheme="http://agoninemo.github.io/blog/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>vue视频添加键盘事件</title>
    <link href="http://agoninemo.github.io/blog/2018/08/28/vue%E8%A7%86%E9%A2%91%E6%B7%BB%E5%8A%A0%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    <id>http://agoninemo.github.io/blog/2018/08/28/vue视频添加键盘事件/</id>
    <published>2018-08-28T11:28:25.000Z</published>
    <updated>2018-09-15T14:18:25.937Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/vue1.jpg" alt="vue"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好久没有更新博客了，最近加班有点多，而且博主被公司安排去做web端去了，所以下班以后都在学习，没什么时候去更新。周末的时候，把自己的个人Web项目给上线了，有点小激动。现在把项目中遇到的一些问题给记录下来，希望能帮助到同样遇到这些问题的童鞋。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在个人项目中，使用到了<a href="https://github.com/surmon-china/vue-video-player" target="_blank" rel="external">vue的一个视频加载组件</a>，这个组件是比较多人用的，也是比较的容易使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 因为博主很多地方都用到  所以全局引用</div><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import VideoPlayer from &apos;vue-video-player&apos;;</div><div class="line">import &apos;video.js/dist/video-js.css&apos;;</div><div class="line">Vue.use(VideoPlayer);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">#  组件使用</div><div class="line">&lt;template&gt;</div><div class="line">&lt;video-player class=&quot;vjs-custom-skin&quot;</div><div class="line">                ref=&quot;videoPlayer&quot;</div><div class="line">                :playsinline=&quot;true&quot;</div><div class="line">                :options=&quot;playerOptions&quot;&gt;</div><div class="line">        &lt;/video-player&gt;</div><div class="line">&lt;template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import &#123; videoPlayer &#125; from &apos;vue-video-player&apos;;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">	data() &#123;</div><div class="line">      return &#123;</div><div class="line">        playerOptions: &#123;</div><div class="line">          muted: false,  //默认情况下将会消除任何音频</div><div class="line">          language: &apos;zh-CN&apos;,</div><div class="line">          preload: &apos;atou&apos;,</div><div class="line">          playbackRates: [0.7, 1.0, 1.5, 2.0], //播放速度</div><div class="line">          aspectRatio: &apos;16:9&apos;, //将播放器置于流畅模式，并在计算播放器的动态大小时使用该值</div><div class="line">          fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。</div><div class="line">          notSupportedMessage: &apos;此视频暂无法播放，请稍后再试&apos;,</div><div class="line">          sources: [&#123;</div><div class="line">            type: &apos;video/mp4&apos;,</div><div class="line">            src: mp4</div><div class="line">          &#125;],</div><div class="line">          poster: &quot;bg.png&quot;  //封面地址</div><div class="line">        &#125;,</div><div class="line">        seekStep: 10, /// 后退与进行时间</div><div class="line">        volumeStep: 0.05, /// 加减音量</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">    	let than = this;</div><div class="line">      document.onkeydown = function(e) &#123;</div><div class="line">            if (e.keyCode === 32) &#123;</div><div class="line">              than.spaceAction();</div><div class="line">              e.preventDefault();</div><div class="line">            &#125; else if (e.keyCode === 37) &#123;</div><div class="line">              than.controlLeft();</div><div class="line">            &#125; else if (e.keyCode === 38) &#123;</div><div class="line">              than.controlUp();</div><div class="line">              e.preventDefault();</div><div class="line">            &#125; else if (e.keyCode === 39) &#123;</div><div class="line">              than.controlRight();</div><div class="line">              e.preventDefault();</div><div class="line">            &#125; else if (e.keyCode === 40) &#123;</div><div class="line">              than.controlDown();</div><div class="line">              e.preventDefault();</div><div class="line">            &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123; </div><div class="line">      controlUp() &#123;</div><div class="line">        let currentVolume = this.$refs.videoPlayer.player.volume();</div><div class="line">        this.$refs.videoPlayer.player.volume(currentVolume + this.volumeStep);</div><div class="line">      &#125;,</div><div class="line">      controlDown() &#123;</div><div class="line">        let currentVolume = this.$refs.videoPlayer.player.volume();</div><div class="line">        this.$refs.videoPlayer.player.volume(currentVolume - this.volumeStep);</div><div class="line">      &#125;,</div><div class="line">      controlLeft() &#123;</div><div class="line">        let currentTime = this.$refs.videoPlayer.player.currentTime();</div><div class="line">        this.$refs.videoPlayer.player.currentTime(currentTime - this.seekStep);</div><div class="line">      &#125;,</div><div class="line">      controlRight() &#123;</div><div class="line">        let currentTime = this.$refs.videoPlayer.player.currentTime();</div><div class="line">        this.$refs.videoPlayer.player.currentTime(currentTime + this.seekStep);</div><div class="line">      &#125;,</div><div class="line">      spaceAction() &#123;</div><div class="line">        if (this.$refs.videoPlayer.player.paused()) &#123;</div><div class="line">            this.$refs.videoPlayer.player.play();</div><div class="line">        &#125; else &#123;</div><div class="line">            this.$refs.videoPlayer.player.pause();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">        videoPlayer</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上是全部的代码，现在来说下思路，当博主配置好这个组件时，发现没有用键盘控件的事件，所以就在<code>created</code>里给<code>document.onkeydown</code>添加监听键盘事件，博主也试过<code>vue</code>的键盘事件，但都没有生效。下面就是控制了视频了，当时博客以为可以在数组里修改数据达到目的，但是找了好久，都没找到方法或者属性，所以只能自己写逻辑，代码很简单，因为这个组件库就是对<code>videojs</code>的封装，可以调用<code>videojs</code>的方法与属性，使用<code>paused()</code>判断当前视频状态，使用控制空格的播放与暂停，使用<code>currentTime()</code>方法可以控制快进与后退，使用<code>volume()</code>方法控制音量大小。再说下<code>e.preventDefault</code>这个调用方法的作用，当我们使用空格时，系统默认会翻页，所以这是为了阻止这一事件的发生的，其他的事件也是一样的作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orfd017lz.bkt.clouddn.com/assets/inset/vue1.jpg&quot; alt=&quot;vue&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;好久没有更新博客了，最近加班有点多，而且博主被公司安排去做web端去了，所以下班以后都在学习，没什么时候去更新。周末的时候，把自己的个人Web项目给上线了，有点小激动。现在把项目中遇到的一些问题给记录下来，希望能帮助到同样遇到这些问题的童鞋。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://agoninemo.github.io/blog/tags/vue/"/>
    
      <category term="video" scheme="http://agoninemo.github.io/blog/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>Git命令整理</title>
    <link href="http://agoninemo.github.io/blog/2018/07/08/Git%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://agoninemo.github.io/blog/2018/07/08/Git命令整理/</id>
    <published>2018-07-08T07:39:35.000Z</published>
    <updated>2018-09-23T13:18:26.092Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 基于master创建的Develop分支</div><div class="line">git checkout -b develop master</div><div class="line"></div><div class="line"># 基于远程origin/develop分支创建本地develop分支</div><div class="line">git checkout -b develop origin/develop</div><div class="line"></div><div class="line"># 切换到Master分支(本地的)</div><div class="line">git checkout master</div><div class="line"></div><div class="line"># 查看远程分支</div><div class="line">git branch -r</div><div class="line"></div><div class="line"># 切换到origin/develop分支(远程的)</div><div class="line">git checkout origin/develop</div><div class="line"></div><div class="line"># 对Develop分支进行合并</div><div class="line">git merge --no-ff -m&apos;注释&apos; develop</div><div class="line"></div><div class="line"># 删除本地feature分支</div><div class="line">git branch -D feature-x</div><div class="line"></div><div class="line"># 删除远程feature分支</div><div class="line">git push origin :feature-x</div><div class="line"></div><div class="line"># 删除预发布分支（D与d的区别在于D为强制删除）</div><div class="line">git branch -d release-1.2</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="例子：发现bug"><a href="#例子：发现bug" class="headerlink" title="例子：发现bug"></a>例子：发现bug</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 创建一个修补bug分支</div><div class="line">git checkout -b fixbug-0.1 master</div><div class="line"></div><div class="line"># 修补结束后切换master</div><div class="line">git checkout master</div><div class="line"></div><div class="line"># 合并到master分支</div><div class="line">git merge --no-ff -m&apos;注释&apos; fixbug-0.1</div><div class="line"></div><div class="line"># 创建新的节点</div><div class="line">git tag -a 0.1.1</div><div class="line"># 推送所有新节点</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># -b表示要从分支下载(git clone -b release git@xxxxx.git)</div><div class="line">git clone -b 分支名 地址</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</div><div class="line">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</div><div class="line">git reset --hard HASH #返回到某个节点，不保留修改。</div><div class="line">git reset --soft HASH #返回到某个节点。保留修改</div><div class="line"></div><div class="line">git clean -df #返回到某个节点</div><div class="line">git clean 参数</div><div class="line">-n 显示 将要 删除的 文件 和  目录</div><div class="line">-f 删除 文件</div><div class="line">-df 删除 文件 和 目录</div><div class="line"></div><div class="line"># git 查看某个 commit 的改动</div><div class="line">git show d34ff657f5</div><div class="line">git diff d34ff657f5^!</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">本地仓库的回退（撤销本地的commit）： git  reset：</div><div class="line"></div><div class="line">reset命令有3种方式：</div><div class="line"></div><div class="line">git reset --mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息git </div><div class="line">reset --soft  HEAD^：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</div><div class="line">git reset --hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</div><div class="line">#回退所有内容到上一个版本  </div><div class="line">git reset HEAD^  </div><div class="line">#回退a.py这个文件的版本到上一个版本  </div><div class="line">git reset HEAD^ a.py  </div><div class="line">#向前回退到第3个版本</div><div class="line">git reset –-soft HEAD~3  </div><div class="line">#将本地的状态回退到和远程的一样  </div><div class="line">git reset –-hard origin/master  </div><div class="line">#回退到某个版本  </div><div class="line">git reset 057d  </div><div class="line">#回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit  </div><div class="line">git revert HEAD</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查看log 一行一个commit</div><div class="line">git log --pretty=oneline</div><div class="line"></div><div class="line">git rebase -i  开始commit  结束commit</div><div class="line"></div><div class="line">进入vim界面  编辑commit 以下为命令</div><div class="line"># pick：保留该commit（缩写:p）</div><div class="line"># reword：保留该commit，但我需要修改该commit的注释（缩写:r）</div><div class="line"># edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</div><div class="line"># squash：将该commit和前一个commit合并（缩写:s）</div><div class="line"># fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</div><div class="line"># exec：执行shell命令（缩写:x）</div><div class="line"># drop：我要丢弃该commit（缩写:d）</div><div class="line"></div><div class="line">wq保存退出后进入注释修改界面  可以再浏览态 按下两个dd可以删除一行</div><div class="line">编辑完保存即可完成commit的合并</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 基于master创建的Develop分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b develop master&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 基于远程origin/develop分支创建本地develop分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b develop origin/develop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 切换到Master分支(本地的)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git checkout master&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 查看远程分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git branch -r&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 切换到origin/develop分支(远程的)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git checkout origin/develop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 对Develop分支进行合并&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git merge --no-ff -m&amp;apos;注释&amp;apos; develop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 删除本地feature分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git branch -D feature-x&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 删除远程feature分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push origin :feature-x&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 删除预发布分支（D与d的区别在于D为强制删除）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git branch -d release-1.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://agoninemo.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>初探 vue-router</title>
    <link href="http://agoninemo.github.io/blog/2018/06/10/%E5%88%9D%E6%8E%A2-vue-router/"/>
    <id>http://agoninemo.github.io/blog/2018/06/10/初探-vue-router/</id>
    <published>2018-06-10T12:03:48.000Z</published>
    <updated>2018-07-14T02:39:31.296Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1610969-3c8ad3a79dec789f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.jpg"></p>
<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>已经有好些日子没有更新了，是因为博主最近公司的项目比较的忙，加班比较的晚，回到家就不想动了，趁着前天刚上完项目，有点时间去整理，一些学习的东西。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>最近在学习vue，这也是iOSer入门前端的最小白的框架。使用也很简单，入门的成本最低。Vue一些基础的用法，官方文档已经很写得很明白了，就是在使用router的时候，踏了不少坑，现在把一些坑记录下来。vue的安装就不说了，不明白的看<a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="external">这里</a>。<br><img src="https://upload-images.jianshu.io/upload_images/1610969-9b08d2f743ce71fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例子"><br>看看上面的截图，现在需求是当你点个菜单里的<code>个人信息</code>或者其他选项时，只希望下面的红色部分更换，上面的蓝色头部需要保留，这个时候就需要用到<a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html" target="_blank" rel="external">嵌套路由</a>，废话不多说，直接上代码。</p>
<h3 id="main-js文件"><a href="#main-js文件" class="headerlink" title="main.js文件"></a>main.js文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import App from &apos;./App&apos;;</div><div class="line">import router from &apos;./router&apos;;</div><div class="line">import ElementUI from &apos;element-ui&apos;;</div><div class="line">import &apos;element-ui/lib/theme-chalk/index.css&apos;;</div><div class="line">import VueBlu from &apos;vue-blu&apos;;</div><div class="line">import &apos;vue-blu/dist/css/vue-blu.min.css&apos;;</div><div class="line">import &apos;../static/reset.css&apos;; // 全局自定义样式</div><div class="line"></div><div class="line">Vue.config.productionTip = false;</div><div class="line">Vue.use(ElementUI);</div><div class="line">Vue.use(VueBlu);</div><div class="line"></div><div class="line">/* eslint-disable no-new */</div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  router,</div><div class="line">  components: &#123; App &#125;,</div><div class="line">  template: &apos;&lt;App/&gt;&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Router from &apos;vue-router&apos;;</div><div class="line">import Info from &apos;@/components/Info&apos;;</div><div class="line">import Home from &apos;@/components/Home&apos;;</div><div class="line">import HelloWorld from &apos;@/components/HelloWorld&apos;;</div><div class="line">import VideoView from &apos;@/components/VideoView&apos;;</div><div class="line"></div><div class="line">Vue.use(Router);</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">  linkActiveClass: &apos;active&apos;,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      component: Home,</div><div class="line">      children: [&#123;</div><div class="line">        path: &apos;helloworld&apos;,</div><div class="line">        name: &apos;HelloWorld&apos;,</div><div class="line">        component: HelloWorld</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        path: &apos;info&apos;,</div><div class="line">        name: &apos;Info&apos;,</div><div class="line">        component: Info</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        path: &apos;/&apos;,</div><div class="line">        name: &apos;VideoView&apos;,</div><div class="line">        component: VideoView</div><div class="line">      &#125;]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/1610969-cabd1c2fcd5b5cfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="home.vue"><br>就像上面的截图里的代码一样，当点击上面的菜单选择时，调用<code>this.$router.push</code>做路由跳转，跳转的界面都会替换这个标签<code>&lt;router-view&gt;&lt;/router-view&gt;</code>，比如：点击了<code>收藏影片</code>，跳转的路由为<code>/helloworld</code>，helloworld.vue如下:</p>
<h3 id="helloworld-vue"><a href="#helloworld-vue" class="headerlink" title="helloworld.vue"></a>helloworld.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;div class=&quot;hello&quot;&gt;</div><div class="line">  hello</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">export default &#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt;</div><div class="line">.hello</div><div class="line">  position: relative</div><div class="line">  top: 10px</div><div class="line">  width: 100%</div><div class="line">  height: 100px</div><div class="line">  background: red</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>其实是把上面的代码替换到<code>&lt;router-view&gt;&lt;/router-view&gt;</code>地方，效果就像第一张截图一样。这里还有个要<code>注意</code>的地方，上面的路由是<code>Home</code>的<code>path</code>是<code>\</code>,VideoView的<code>path</code>也是<code>\</code>，这样的写法就是默认要显示VideoView内容。</p>
<h3 id="登录问题"><a href="#登录问题" class="headerlink" title="登录问题"></a>登录问题</h3><p>下面来说第二个需求，当用户登录一个界面的时候，需要用户账号与token，但是用户输入的路径不是登录的路径，这时，我们需要判断如果有用户账号与token就让在界面的界面，如果没有用户账号与token，或者token过期，就让跳转到登录界面，让用户登录。这里就需要一个全局的<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%AE%88%E5%8D%AB" target="_blank" rel="external">导航守卫</a>来解决这个问题了。</p>
<h3 id="router-1"><a href="#router-1" class="headerlink" title="router"></a>router</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Router from &apos;vue-router&apos;;</div><div class="line">import Info from &apos;@/components/Info&apos;;</div><div class="line">import Home from &apos;@/components/Home&apos;;</div><div class="line">import Login from &apos;@/components/Login&apos;;</div><div class="line">import VideoView from &apos;@/components/VideoView&apos;;</div><div class="line"></div><div class="line">Vue.use(Router);</div><div class="line"></div><div class="line">const router = new Router(&#123;</div><div class="line">  linkActiveClass: &apos;active&apos;,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/login&apos;,</div><div class="line">      name: &apos;login&apos;,</div><div class="line">      component: Login,</div><div class="line">      meta: &#123;</div><div class="line">        keepAlive: false, /* 用于在 &lt;keep-alive&gt; 中使用，判断是否需要进行缓存 */</div><div class="line">        auth: false, /* 自定义属性，用于判断是否进行校验,在router.beforeEach中使用 */</div><div class="line">        title: &apos;登录&apos; /* 可以通过$route.meta.title 后取当前的描述信息、菜单信息 */</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/home&apos;,</div><div class="line">      component: Home,</div><div class="line">      meta: &#123;</div><div class="line">        keepAlive: false, /* 用于在 &lt;keep-alive&gt; 中使用，判断是否需要进行缓存 */</div><div class="line">        auth: true, /* 自定义属性，用于判断是否进行校验,在router.beforeEach中使用 */</div><div class="line">        title: &apos;首页&apos; /* 可以通过$route.meta.title 后取当前的描述信息、菜单信息 */</div><div class="line">      &#125;,</div><div class="line">      children: [&#123;</div><div class="line">        path: &apos;info&apos;,</div><div class="line">        name: &apos;Info&apos;,</div><div class="line">        component: Info,</div><div class="line">        meta: &#123;</div><div class="line">          keepAlive: false, /* 用于在 &lt;keep-alive&gt; 中使用，判断是否需要进行缓存 */</div><div class="line">          auth: true, /* 自定义属性，用于判断是否进行校验,在router.beforeEach中使用 */</div><div class="line">          title: &apos;个人中心&apos; /* 可以通过$route.meta.title 后取当前的描述信息、菜单信息 */</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        path: &apos;/home&apos;,</div><div class="line">        name: &apos;VideoView&apos;,</div><div class="line">        component: VideoView,</div><div class="line">        meta: &#123;</div><div class="line">          keepAlive: true, /* 用于在 &lt;keep-alive&gt; 中使用，判断是否需要进行缓存 */</div><div class="line">          auth: true, /* 自定义属性，用于判断是否进行校验,在router.beforeEach中使用 */</div><div class="line">          title: &apos;首页&apos; /* 可以通过$route.meta.title 后取当前的描述信息、菜单信息 */</div><div class="line">        &#125;</div><div class="line">      &#125;]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 注册一个全局前置守卫</div><div class="line">router.beforeEach((to, from, next) =&gt; &#123;</div><div class="line">  // 判断是否需要校验</div><div class="line">  if (to.matched.some(m =&gt; m.meta.auth)) &#123;</div><div class="line">    const model = loadFromLocal(null, &apos;logining&apos;, false);</div><div class="line">    if (model.token) &#123;</div><div class="line">      next();// 校验通过，正常跳转到你设置好的页面</div><div class="line">    &#125; else &#123;</div><div class="line">      next(&#123;// 校验失败，跳转至登录界面</div><div class="line">        path: &apos;/login&apos;,</div><div class="line">        query: &#123;</div><div class="line">          redirect: to.fullPath</div><div class="line">        &#125;// 将跳转的路由path作为参数，用于在登录成功后获取并跳转到该路径</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125; else &#123;</div><div class="line">    next();// 不需要校验，直接跳转</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default router;</div></pre></td></tr></table></figure>
<p>在配置路由是，可以配置<code>meta</code>里的<code>auth</code>参数来判断是否需要进入登录界面，这里也可以用来判断进入其他界面，这里就不做展开了。<br>PS：有不明白的童鞋可以在下面留言或私信博主，博主会不定期回复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1610969-3c8ad3a79dec789f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;1.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h3&gt;&lt;p&gt;已经有好些日子没有更新了，是因为博主最近公司的项目比较的忙，加班比较的晚，回到家就不想动了，趁着前天刚上完项目，有点时间去整理，一些学习的东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell学习（三）</title>
    <link href="http://agoninemo.github.io/blog/2018/05/20/shell%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://agoninemo.github.io/blog/2018/05/20/shell学习（三）/</id>
    <published>2018-05-20T01:56:01.000Z</published>
    <updated>2018-05-20T02:05:40.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shell脚本-gt-重定向学习"><a href="#Shell脚本-gt-重定向学习" class="headerlink" title="Shell脚本-&gt;重定向学习"></a>Shell脚本-&gt;重定向学习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 创建文件读写描述符？&quot;&lt;&gt;&quot;</div><div class="line">作用：这个文件可以读写		文件内容-&gt;fileContent.sh			吃饭			不吃饭		脚本代码-&gt;fileA.sh			#!/bin/bash			#创建文件读写描述符			exec 3&lt;&gt; fileContent.sh			#读取文件中的一行数据			read line &lt;&amp;3			#打印数据			echo &quot;读取数据：$line&quot;			#写入文件			echo &quot;谈恋爱是为了结婚，要不然就是耍流氓&quot; &gt;&amp;3		执行脚本			Dream$ cat fileContent.sh			装逼			不装逼			Dream$ ./fileA.sh			读取数据：吃饭</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 关闭文件描述符</div><div class="line">关闭：读写都是不允许的		语法结构：exec 3&gt;&amp;-		案例一			脚本代码				#!/bin/bash				#自定义输出描述符				exec 3&gt; fileContent.sh				#写入一句话道文件中				echo &quot;我是傻逼&quot; &gt;&amp;3				#关闭文件描述符				exec 3&gt;&amp;-				#再次写入文件				echo &quot;但是我喜欢装逼&quot; &gt;&amp;3			执行脚本				Dream$ ./fileA.sh				./fileA.sh: line 9: 3: Bad file descriptor			细节：如果说关闭文件描述符，那么你写入内容会报错		案例二			脚本代码				#!/bin/bash				#自定义输出描述符				exec 3&gt; fileContent.sh				#写入一句话道文件中				echo &quot;我是傻逼&quot; &gt;&amp;3				#关闭文件描述符				exec 3&gt;&amp;-				#打印文件内容				cat fileContent.sh				#重新打开				exec 3&gt; fileContent.sh				#向文件写入内容				echo &quot;但是我喜欢装逼&quot; &gt;&amp;3						执行脚本				Dream$ ./fileA.sh# 列举打开的文件描述</div><div class="line">语法结构：lsof命令（隐藏比较深，找不到，为了安全起见）				非系统管理员用户也可以采用这个命令插件系统信息			命令路径：/usr/sbin/lsof			执行命令：查看结果			Dream$ /usr/sbin/lsof -a -p $$ -d 0,1,2			COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME			bash    5824 Dream    0u   CHR   16,0   0t1800  829 /dev/ttys000			bash    5824 Dream    1u   CHR   16,0   0t1800  829 /dev/ttys000			bash    5824 Dream    2u   CHR   16,0   0t1800  829 /dev/ttys000		分析命令			/usr/sbin/lsof-&gt;表示lsof命令			&quot;-a&quot;-&gt;表示将两个选项结果进行(AND操作)拼接（格式化输出）			&quot;-p&quot;-&gt;进程ID			&quot;$$&quot;-&gt;表示环境变量			&quot;-d&quot;-&gt;表示文件描述符(例如：0、1、2)		分析结果			COMMAND-&gt;表示正在运行的命令名称（取出名字前9个字符）-&gt;由于名字太长我们可以截取				例如：adbfgtyyththhghg				取出：adbfgtyyt						PID-&gt;进程ID			USER-&gt;进程所属登录名（登录用户）				例如：管理员、成员			FD-&gt;文件描述符号以及访问类型（r表示读，w表示写，u表示读写）			TYPE-&gt;表示文件类型（CHR：表示字符型，BLK表示块型，DIR表示目录，REG表示文件）			DEVICE-&gt;表示设备号			SIZE/OFF-&gt;如果存在，那么表示文件大小			NODE-&gt;表示本地问你节点号			NAME-&gt;表示文件名称（文件路径）		案例一：错误代码			脚本代码				#!/bin/bash				exec 3&gt; fileContent.sh				exec 6&gt; fileB.sh				exec 7&lt; fileErr.sh								/usr/sbin/lsof -a -p $$ -d 0,1,2			执行脚本				Dream$ ./fileA.sh			总结：没有打印当前执行命令信息，因为你没有指定文件描述符		案例二：正确代码			脚本代码				#!/bin/bash				exec 3&gt; fileContent.sh				exec 6&gt; fileB.sh				exec 7&lt; fileErr.sh								/usr/sbin/lsof -a -p $$ -d 0,1,2,3,6,7			执行脚本				Dream$ ./fileA.sh				COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME				bash    6608 Dream    0u   CHR   16,0    0t324      835 /dev/ttys000				bash    6608 Dream    1u   CHR   16,0    0t324      835 /dev/ttys000				bash    6608 Dream    2u   CHR   16,0    0t324      835 /dev/ttys000				bash    6608 Dream    3w   REG    1,4        0 66971592 /Users/yangshaohong/Desktop/fileContent.sh				bash    6608 Dream    6w   REG    1,4        0 66754302 /Users/yangshaohong/Desktop/fileB.sh				bash    6608 Dream    7r   REG    1,4        0 66762178 /Users/yangshaohong/Desktop/fileErr.sh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 阻止命令输出-&gt; /dev/null</div><div class="line">案例一：阻止输出			脚本代码				Dream$ ls -al &gt; /dev/null案例二：清空文件			脚本代码				#查看内容				Dream$ cat fileContent.sh				#清空内容				Dream$ cat /dev/null &gt; fileContent.sh				没有任何输出，文件为空</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 创建临时文件</div><div class="line">5.1 创建本地临时文件-&gt; mktemp			案例一：保证当前目录文件唯一				#动态生成文件-&gt;动态生成后缀名				Dream$ mktemp dream.XXXXXX				#指定文件名称-&gt;指定文件后缀名				Dream$ mktemp dream.sh			 案例二：在脚本使用这个命令				#!/bin/bash				#创建临时文件				tempfile=$(mktemp testfile.XXXXXX)				#重定向临时文件				exec 3&gt; $tempfile				#打印文件名称				echo &quot;文件名称：$tempfile&quot;				#输出文件内容				echo &quot;我不是傻逼，我不喜欢傻逼&quot; &gt;&amp;3				echo &quot;我不装逼，我不喜欢装逼&quot; &gt;&amp;3				echo &quot;不知道写什么&quot; &gt;&amp;3				#关闭文件				exec 3&gt;&amp;-				#打印文件内容				cat $tempfile				#删除文件				rm -f $tempfile 2&gt; /dev/null</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 在/temp目录下创建临时文件</div><div class="line">案例一：&quot;-t&quot;选项使用				Dream$ mktemp -t testfile.XXXXXX				/var/folders/7w/4gr2dxc57v3656mjgqmv9mkm0000gn/T/testfile.XXXXXX.ftrZp5qX				注意一：&quot;/var/folders/7w/4gr2dxc57v3656mjgqmv9mkm0000gn/T&quot;系统提供临时目录				注意二：不同系统临时目录是不一样			案例二：在Shell脚本中应用临时目录				#!/bin/bash				#创建临时文件（系统临时目录下）				tempfile=$(mktemp -t testfile.XXXXXX)				#写入内容				echo &quot;我不是傻逼，我不喜欢傻逼&quot; &gt; $tempfile				#追加内容				echo &quot;我不是傻逼，我不喜欢傻逼，你是不是&quot; &gt;&gt; $tempfile				#打印文件路径				echo &quot;文件名称：$tempfile&quot;				#将文件内容输出到控制台				cat $tempfile				#删除文件				rm -f $tempfile						5.3 创建临时目录			&quot;-d&quot;创建目录			脚本代码				#!/bin/bash				#当前目录下创建临时目录				tempfile=$(mktemp -d testfile.XXXXXX)				#进入临时目录				cd $tempfile				#在临时目录下创建临时文件				tempfile1=$(mktemp testfile.XXXXXX)				tempfile2=$(mktemp testfile.XXXXXX)				#自定义文件描述符-&gt;重定向输出				exec 7&gt; $tempfile1				exec 8&gt; $tempfile2				#打印临时目录路径				echo &quot;临时目录路径：$tempfile&quot;				#向临时文件写入内容				echo &quot;你好，我不想跪键盘，因为我怕&quot; &gt;&amp;7				echo &quot;你好，我不喜欢&quot; &gt;&amp;8			执行脚本				Dream$ ./fileA.sh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 记录消息</div><div class="line">作用：将输出同时发送显示器和日志文件，这个时候你可以采用重定向两次，才可以实现，现在我才用tee命令一步实现（简化版）		案例一：重定向-&gt;输出-&gt;覆盖			Dream$ date | tee fileContent.sh			2017年11月 6日 星期一 22时40分18秒 CST		案例二：重定向-&gt;输出-&gt;追加-&gt;&quot;-a&quot;			Dream$ date | tee -a fileContent.sh		案例三：应用到脚本中			脚本代码-&gt;fileA.sh				#!/bin/bash				#定义文件名称				tempfile=&quot;testfile&quot;				echo &quot;我要输出到控制台和文件&quot; | tee $tempfile				echo &quot;我要追加内容&quot; | tee -a $tempfile			执行脚本				Dream$ ./fileA.sh</div></pre></td></tr></table></figure>
<h3 id="Shell脚本-gt-案例-gt-数据操作-gt-导出SQL文件"><a href="#Shell脚本-gt-案例-gt-数据操作-gt-导出SQL文件" class="headerlink" title="Shell脚本-&gt;案例-&gt;数据操作-&gt;导出SQL文件"></a>Shell脚本-&gt;案例-&gt;数据操作-&gt;导出SQL文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">场景：别人给你一个exel表格	注意：导出.csv格式	需求：将.csv文件转成.sql文件	打印：Dream$ cat test.csv	总结：每一行数据，每一个元素之间都是通过&quot;,&quot;分割	脚本实现		#!/bin/bash		#定义数据库文件(.sql)文件		outfile=&apos;test.sql&apos;		#定义域分隔符-&gt;分割字符串		IFS=&apos;,&apos;		while read name sex age mv yd phone		do			cat &gt;&gt; $outfile &lt;&lt; EOF				INSERT INTO t_test (name, sex, age, mv, yd, phone) VALUES (&apos;$name&apos;, &apos;$sex&apos;, &apos;$age&apos;, &apos;$mv&apos;, &apos;$yd&apos;, &apos;$phone&apos;);			EOF		done &lt; $&#123;1&#125;	执行脚本		Dream$ ./fileA.sh test.csv		注意：原始数据空出一行	分析含义		3个重定向操作		第一个：输入重定向			done &lt; $&#123;1&#125;			$&#123;1&#125;恰好是一个文件			read通过循环一行行读取内容			同时read非常智能还会通过IFS进行字符串分割，分割之后会自动给参数赋值		第二个：输出重定向			cat &gt;&gt; test.sql			以上语法：等待输入内容，敲回车，然后输出到指定的重定向文件			第三个：输入重定向-&quot;&lt;&lt;&quot;-&gt;追加			(cat &gt;&gt; test.sql ) &lt;&lt; sql语句</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Shell脚本-gt-重定向学习&quot;&gt;&lt;a href=&quot;#Shell脚本-gt-重定向学习&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本-&amp;gt;重定向学习&quot;&gt;&lt;/a&gt;Shell脚本-&amp;gt;重定向学习&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 创建文件读写描述符？&amp;quot;&amp;lt;&amp;gt;&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;作用：这个文件可以读写		文件内容-&amp;gt;fileContent.sh			吃饭			不吃饭		脚本代码-&amp;gt;fileA.sh			#!/bin/bash			#创建文件读写描述符			exec 3&amp;lt;&amp;gt; fileContent.sh			#读取文件中的一行数据			read line &amp;lt;&amp;amp;3			#打印数据			echo &amp;quot;读取数据：$line&amp;quot;			#写入文件			echo &amp;quot;谈恋爱是为了结婚，要不然就是耍流氓&amp;quot; &amp;gt;&amp;amp;3		执行脚本			Dream$ cat fileContent.sh			装逼			不装逼			Dream$ ./fileA.sh			读取数据：吃饭&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://agoninemo.github.io/blog/tags/shell/"/>
    
      <category term="sql" scheme="http://agoninemo.github.io/blog/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>shell学习（二）</title>
    <link href="http://agoninemo.github.io/blog/2018/04/01/shell%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://agoninemo.github.io/blog/2018/04/01/shell学习（二）/</id>
    <published>2018-04-01T05:47:31.000Z</published>
    <updated>2018-04-01T06:24:12.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;-­n&quot;使用问题</div><div class="line">			val=&quot;Hello&quot;			if [ -n &quot;$val&quot; ]			then				echo &quot;存在&quot;			else				echo &quot;不存在&quot;			fi</div><div class="line">			</div><div class="line">[ -n &quot;$val&quot; ] 不能写成 [ -n $val ]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">语法一：</div><div class="line">#!/bin/bash#文件B包含文件A./fileA.shecho &quot;我是文件B&quot;</div><div class="line"></div><div class="line">语法二：</div><div class="line">#!/bin/bash#文件B包含文件Asource ./fileA.shecho &quot;我是文件B&quot;</div><div class="line"></div><div class="line">cat [选项] [文件]</div><div class="line">-n选项：可以显示文件内容和行号</div><div class="line">-b选项：和&quot;-n&quot;类似功能，但是只标记非空白行行号</div><div class="line">-e选项：在每一行内容最后加入了一个&quot;$&quot;符号，在需要将多行内容转换为一行内容的时候</div><div class="line"></div><div class="line"></div><div class="line">read语法：</div><div class="line">echo &quot;请输入你的名字：&quot;</div><div class="line">read nameecho &quot;您的名字是：$&#123;name&#125;&quot;</div><div class="line"></div><div class="line">read -p &quot;请输入你的名字：&quot; name</div><div class="line">echo &quot;您的名字是：$&#123;name&#125;&quot;</div><div class="line"></div><div class="line">if read -t 6 -p &quot;请输入你的名字：&quot; namethen			echo &quot;您的名字是：$&#123;name&#125;&quot;else			echo			echo &quot;超时&quot;firead -s -p &quot;请输入您密码：&quot; pwdecho &quot;您的密码是：$&#123;pwd&#125;&quot;#从文件里面读取内容cat fileB.sh | while read linedo			echo &quot;内容：$&#123;line&#125;&quot;done接收输入多行：while read name</div><div class="line"></div><div class="line">方法函数：</div><div class="line">[function] 方法名称()&#123;			逻辑代码&#125;func test()&#123;&#125;&quot;&lt;&quot;：输入重定向</div><div class="line">命令代码：wc fileA.sh	将fileA中内容读取到控制台wc读取到了三个重要信息	第一个参数：文本行数	第二个参数：文本词数	第三个参数：文本字节数</div><div class="line">&quot;&lt;&lt;&quot;：创建文件</div><div class="line"></div><div class="line"> &quot;&gt;&quot;：我们把方向指向一份文件，那么将文件中的内容删除，写入新的内容</div><div class="line"> &quot;&gt;&gt;&quot;：追加</div><div class="line"> </div><div class="line">expr 命令简写</div><div class="line">#!/bin/basha=100b=200val=$[ $a + $b ]echo &quot;val值：$val&quot;</div><div class="line"></div><div class="line">bash计算器-&gt;实际上是一种编程语言，这个允许在命令中输入浮点数表达式，然后解释并且计算表达式，最后返回结果。</div><div class="line">语法结构：val=$(echo &quot;options; expression&quot; | bc)</div><div class="line">options表示-&gt;选项-&gt;可以设置精度expression表示-&gt;表达式#!/bin/bashval=$(echo &quot; 1.56555 * 100 &quot; | bc)echo &quot;val值：$val&quot;</div><div class="line"></div><div class="line">#!/bin/bashval1=1.314val2=0.618val3=100val4=100val=$(bc &lt;&lt; FG	a = ($val1 * $val2)	b = ($val3 * $val4)	a * b	FG)echo &quot;val结果：$val&quot;Shell脚本语言中将：输入、输出、错误分为了三种描述符（3种状态）-&gt;分别对应的值（0、1、2）</div><div class="line">第一种：STDIN-&gt;标准输入-&gt;0-&gt;键盘输入</div><div class="line">第一点：直接输入cat命令-&gt;接收键盘输入，然后打印到控制台</div><div class="line">第二点：采用cat接收一个非STDIN-&gt;文件输入(就是读取文件内容，输出到控制台)第二种：STDOUT-&gt;标准输出-&gt;1-&gt;对应终端显示</div><div class="line">第一点：重定向-&gt;输出文件中(原来是输出到控制台，现在我要重定向到文件)第二点：重定向错误-&gt;输出到文件中</div><div class="line"></div><div class="line">总结一：到我们的命令发生错误时候，shell脚本语言并不会将错误信息重定向到输出重定向文件，shell及时创建了输出重定向文件，当时也不会写入内容</div><div class="line">总结二：虽然创建了文件，但是文件内容是空的</div><div class="line">总结三：shell脚本语言对错误信息处理和普通信息输出是分开的，那么如果我们希望报错错误信息，那么需要采用STDERR实现</div><div class="line"></div><div class="line">第三种：STUERR-&gt;标准错误-&gt;2</div><div class="line">将STDERR文件描述修改为2</div><div class="line">ls -al a.sh 2&gt; error.sh将STDOUT和STDERR结合使用</div><div class="line">ls -al fileA.sh fileB.sh fileC.sh 2&gt; error.sh</div><div class="line"></div><div class="line">报错错误信息，同时还要报错数据</div><div class="line">ls -al fileA.sh fileB.sh fileC.sh 2&gt; error.sh 1&gt; fileContent.sh</div><div class="line"></div><div class="line">&quot;&amp;&gt;&quot;：重定向结构</div><div class="line">将数据和错误信息，同时输出到同一个文件</div><div class="line">ls -al fileA.sh fileB.sh fileC.sh &amp;&gt; error.sh</div><div class="line"></div><div class="line">临时重定向-&gt;&quot;&amp;&quot;</div><div class="line">#!/bin/bash#临时重定向echo &quot;Hello world&quot; &gt;&amp;2echo &quot;你好&quot;</div><div class="line"></div><div class="line">脚本结果Hello world你好将fileA中标记的错误信息，全部保存到error.sh中，通过STDERR重定向到error.sh里面</div><div class="line">#!/bin/bash#临时重定向#一下这句话定义为错误信息echo &quot;Hello world&quot; &gt;&amp;2echo &quot;你好&quot; &gt;&amp;2echo &quot;JAR童鞋&quot;</div><div class="line"></div><div class="line">执行脚本</div><div class="line">./fileA.sh 2&gt; error.sh</div><div class="line"></div><div class="line">#exec命令：批量输出</div><div class="line">exec 1&gt; fileContent.sh</div><div class="line">echo &quot;Hello world&quot;echo &quot;你好&quot;echo &quot;JAR童鞋&quot;#!/bin/bash#从fileContent.sh文件中读取内容到fileA.sh里面exec 0&lt; fileContent.sh					#循环遍历读取count=1while read linedo	echo &quot;当前行数：$count 读取内容：$line&quot;	count=$[ $count + 1 ]done注意：一旦设置了输入重定向，那么read命令自动链接文件输入内容</div><div class="line"></div><div class="line">#!/bin/bash#exec命令：自定义文件描述符#重定向输出exec 40&gt; fileContent.sh					echo &quot;Hello world&quot;echo &quot;你好&quot; &gt;&amp;40echo &quot;JAR童鞋&quot;追加内容</div><div class="line">#exec命令：自定义文件描述符#重定向输出exec 40&gt;&gt; fileContent.sh					echo &quot;Hello world&quot;echo &quot;你好&quot; &gt;&amp;40echo &quot;JAR童鞋&quot;原来是1，然后修改为2了，这个时候需要恢复为1#!/bin/bash#exec命令：自定义文件描述符#最开始是3，然后我重定向到1exec 3&gt;&amp;1exec 1&gt; fileContent.sh					echo &quot;Hello world&quot;echo &quot;你好&quot;echo &quot;JAR童鞋&quot;#将1还原为3exec 1&gt;&amp;3echo &quot;搞完了，完成了&quot;</div><div class="line"></div><div class="line">创建读写文件描述符</div><div class="line">作用：一个文件即可以读取也可以写入</div><div class="line">#!/bin/bashexec 3&lt;&gt; fileContent.sh#从fileContent.sh文件里面读取内容read line &lt;&amp;3echo &quot;Read：$line&quot;#写入内容echo &quot;I have a Dream&quot; &gt;&amp;3</div><div class="line">注意：替换了第二行？因为我们文件指针读取完了第一行，文件指针指向了第二行，所以第二行之后所有的内容被替换</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题点&quot;&gt;&lt;a href=&quot;#问题点&quot; class=&quot;headerlink&quot; title=&quot;问题点&quot;&gt;&lt;/a&gt;问题点&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;-­n&amp;quot;使用问题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			val=&amp;quot;Hello&amp;quot;			if [ -n &amp;quot;$val&amp;quot; ]			then				echo &amp;quot;存在&amp;quot;			else				echo &amp;quot;不存在&amp;quot;			fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ -n &amp;quot;$val&amp;quot; ] 不能写成 [ -n $val ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://agoninemo.github.io/blog/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Xcode打包的坑与shell动态创建Plist</title>
    <link href="http://agoninemo.github.io/blog/2018/03/22/Xcode%E6%89%93%E5%8C%85%E7%9A%84%E5%9D%91%E4%B8%8Eshell%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAPlist/"/>
    <id>http://agoninemo.github.io/blog/2018/03/22/Xcode打包的坑与shell动态创建Plist/</id>
    <published>2018-03-22T10:50:41.000Z</published>
    <updated>2018-03-22T11:49:33.995Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/xcode9.jpg" alt="bg"></p>
<blockquote>
<p>再牛逼的梦想，也抵不过傻逼似的坚持 ——— 未知</p>
</blockquote>
<p>你更新了Xcode了吗？更新到9.2打包了吗？是不是用突然发现之前的打包命令出问题了？都没有？那恭喜你，反正博主的之前写的打包程序出问题了！天杀的苹果，为了再次体现“apple father”的威严，从Xcode 9后，限制了Xcode访问钥匙串，下面来说说打包中的两个坑吧。<br><a id="more"></a></p>
<ul>
<li>在打包ipa的命令中需要添加<code>-allowProvisioningUpdates</code>来对钥匙串进行访问。命令：<br><code>xcodebuild  -exportArchive -archivePath xcarchive路径 -exportOptionsPlist plist文件路径 -exportPath ipa导出路径 -allowProvisioningUpdates</code><br><br></li>
<li>原有的plist文件中只有一个必填的键值对<code>method</code>，现在多了一个<code>provisioningProfiles</code>字典，key为bundleID，value为配置文件的名字。(如下图)</li>
</ul>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/Plist.jpg" alt="p"></p>
<p>如果你只想了解坑的话，看到这里，想法你已经明白怎么去修改自己的脚本，下面的你可以不需要看了。</p>
<p>在之前博主就在想一个问题，就是能不能动态去生成plist文件，之前对这方面的需求不是很高，但是博主已经维护了一个开源的打包脚本，而且之前用Xcode8.3是可以打包的，现在如果还是按照之前的思路去创建三个Plist文件的话，这又多了三个文件，这可不是一个好的Coder习惯。随着最近比较系统的学习了shell之后，思路才算打开，Plist格式的文件其实是<code>xml</code>格式的，只要使用shell的重定向动态去写入，就肯定没问题。下面是用shell封装的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#! /bin/bash</div><div class="line"></div><div class="line">outfile=ExportOptionsPlist.plist</div><div class="line">space=0</div><div class="line"></div><div class="line">output()&#123;</div><div class="line"> echo &apos;&lt;&apos;$&#123;*&#125;&apos;&gt;&apos; &gt;&gt; $outfile</div><div class="line">&#125;</div><div class="line"></div><div class="line">output_head()&#123;</div><div class="line"> output &apos;?&apos;$&#123;1&#125;&apos;?&apos;</div><div class="line">&#125;</div><div class="line"># 打印空格</div><div class="line">out_space()&#123;</div><div class="line"> tmp=0</div><div class="line"> spacestr=&quot;&quot;</div><div class="line"> while [ $tmp -lt $((space)) ]</div><div class="line"> do</div><div class="line">  spacestr=$&#123;spacestr&#125;&apos;\t&apos;</div><div class="line">  tmp=$((tmp+1))</div><div class="line"> done</div><div class="line"> echo -e -n $spacestr &gt;&gt; $outfile</div><div class="line">&#125;</div><div class="line"></div><div class="line">output_key()&#123;</div><div class="line">    out_space</div><div class="line">    echo &apos;&lt;&apos;$&#123;1&#125;&apos;&gt;&apos;$&#123;2&#125;&apos;&lt;/&apos;$&#123;1&#125;&apos;&gt;&apos; &gt;&gt; $outfile</div><div class="line">&#125;</div><div class="line"></div><div class="line">key_start()&#123;</div><div class="line"> out_space</div><div class="line"> output $1</div><div class="line"> space=$((space+1))</div><div class="line">&#125;</div><div class="line"></div><div class="line">key_end()&#123;</div><div class="line"> space=$((space-1))</div><div class="line"> out_space</div><div class="line"> output &apos;/&apos;$&#123;1&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用起来也很简单,就拿上面截图的Plist文件举例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line"></div><div class="line"># 获取当前路径</div><div class="line">path=$(dirname $0)</div><div class="line">path=$&#123;path/\./$(pwd)&#125;</div><div class="line">file=&quot;&#123;$path&#125;/ExportOptionsPlist&quot;</div><div class="line"></div><div class="line"># 导入上面的脚本</div><div class="line">source &apos;./create_xml.sh&apos;</div><div class="line"></div><div class="line">output_head &apos;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&apos;</div><div class="line">output &apos;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&apos;</div><div class="line">key_start &apos;plist version=&quot;1.0&quot;&apos;</div><div class="line">key_start &apos;dict&apos;</div><div class="line">output_key &apos;key&apos; &apos;method&apos;</div><div class="line">output_key &apos;string&apos; &apos;development&apos;</div><div class="line">output_key &apos;key&apos; &apos;provisioningProfiles&apos;</div><div class="line">key_start &apos;dict&apos;</div><div class="line">output_key &apos;key&apos; &apos;com.xxxx.xxxx&apos;</div><div class="line">output_key &apos;string&apos; &apos;Development_name&apos;</div><div class="line">key_end &apos;dict&apos;</div><div class="line">output_key &apos;key&apos; &apos;signingCertificate&apos;</div><div class="line">output_key &apos;string&apos; &quot;iPhone Development&quot;</div><div class="line">key_end &apos;dict&apos;</div><div class="line">key_end &apos;plist&apos;</div></pre></td></tr></table></figure>
<p>到这里已经算是完成大部分了，接下来再说说一种修改Plist的工具—-PlistBuddy（这个是Mac自带的读写plist文件的工具）。为什么我们要用它呢？如果每次打包不一样，我们不需要每次都创建plist，只需要修改就行了。举个例子，把上面的<code>development</code>修改为<code>ad-hoc</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 设置 method</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Set :method ad-hoc&quot; ExportOptionsPlist.plist</div><div class="line"></div><div class="line"># 删除 provisioningProfiles</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Delete :provisioningProfiles&quot; ExportOptionsPlist.plist</div><div class="line"></div><div class="line"># 先添加key值 provisioningProfiles</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Add :provisioningProfiles dict&quot; ExportOptionsPlist.plist</div><div class="line"></div><div class="line"># 添加value值</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Add :provisioningProfiles:com.xxx.xxx string ad-hoc_name&quot; ExportOptionsPlist.plist</div><div class="line"></div><div class="line"># 设置 signingCertificate</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Set :signingCertificate iPhone Development&quot; ExportOptionsPlist.plist</div></pre></td></tr></table></figure>
<p>PS：还有什么不明白的可以点<a href="https://github.com/AgoniNemo/Auto-IPA" target="_blank" rel="external">这里</a>下载完整的自动打包脚本。如果你有更好的办法，可以在下方留言，博主看到后会联系你的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orfd017lz.bkt.clouddn.com/assets/inset/xcode9.jpg&quot; alt=&quot;bg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再牛逼的梦想，也抵不过傻逼似的坚持 ——— 未知&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你更新了Xcode了吗？更新到9.2打包了吗？是不是用突然发现之前的打包命令出问题了？都没有？那恭喜你，反正博主的之前写的打包程序出问题了！天杀的苹果，为了再次体现“apple father”的威严，从Xcode 9后，限制了Xcode访问钥匙串，下面来说说打包中的两个坑吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://agoninemo.github.io/blog/tags/shell/"/>
    
      <category term="xcodebuild" scheme="http://agoninemo.github.io/blog/tags/xcodebuild/"/>
    
  </entry>
  
  <entry>
    <title>shell学习（一）</title>
    <link href="http://agoninemo.github.io/blog/2018/03/10/shell%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
    <id>http://agoninemo.github.io/blog/2018/03/10/shell学习(一)/</id>
    <published>2018-03-10T04:58:04.000Z</published>
    <updated>2018-10-08T12:05:22.133Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shell脚本语言-echo"><a href="#Shell脚本语言-echo" class="headerlink" title="Shell脚本语言-echo"></a>Shell脚本语言-echo</h3><pre><code>1、显示普通字符串
    echo &quot;iPhoneX&quot;

2、显示转义字符
    echo &quot;  &quot; hello world &quot;  &quot;

3、显示变量
    h=&quot;hello&quot;
    echo &quot;${h} world&quot;

4、显示换行
    正确写法（-e：表示开启转义功能）
    echo -e &quot;hello \n world未来&quot;

5、不换行
    注意：&quot;-e&quot;开启转义功能，&quot;\c&quot;表示不换行
    echo -e &quot;hello未来 \c &quot;
    echo &quot;科技&quot;

6、显示一个执行命令
    要求：输出当前时间
    echo `date`

7、退出命令
    语法：exit 状态-&gt;退出程序
    写法一
    h=&quot;hello world&quot;
    echo ${h}
    exit
    echo &quot;出bug了！&quot;
    写法二
    h=&quot;404找不到错误&quot;
    echo ${h}
    exit 0    

    age=100
    if(age &gt; 100){
        exit 1
    }
# 以上是echo的基本用法，echo功能很强大，后面的学习中会说到。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!--more--&gt;</div><div class="line"></div><div class="line">### Shell脚本语言-数组</div><div class="line"></div><div class="line">```	1、语法				数组名=(值1 值2 值3…)	2、初始化数组		方式一			name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)			#输出			echo $name			#默认：打印第一个元素		方式二			name=()			name[0]=&quot;404&quot;			name[1]=&quot;Andy&quot;			name[2]=&quot;柚芒子&quot;			name[3]=&quot;全班最菜&quot;			echo $&#123;name[0]&#125;  $&#123;name[1]&#125;	3、读取数组		语法结构：$&#123;数组名[下标]&#125;		name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)		#输出一个元素				echo $&#123;name[0]&#125;		#输出所有-&gt;&quot;@&quot;表示输出所有的数据		echo $&#123;name[@]&#125;	4、数组长度		方式一：获取数组元素个数			语法：$&#123;#数组名[@]&#125;			代码：				name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)				echo $&#123;#name[@]&#125;			结果：4		方式二：获取数组元素个数			语法：$&#123;#数组名[*]&#125;			代码：				name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)				echo $&#123;#name[*]&#125;			结果：4		方式三：获取单个元素-&gt;字符长度			语法：$&#123;#数组名[下标]&#125;			代码：				name=(&quot;404&quot; &quot;503&quot; &quot;200&quot; &quot;501&quot;)				echo $&#123;#name[2]&#125;			结果：3</div></pre></td></tr></table></figure>

### Shell脚本语言-传递参数
</code></pre><pre><code>1、语法定义
    ./文件名称.sh 参数1 参数2 参数3...
2、案例
    脚本内容如下：
        #${0}-&gt;表示文件名称
        #${1}-&gt;表示参数1
        #${2}-&gt;表示参数2
        echo ${0} ${1}  ${2}
    执行脚本代码：
        ./hello.sh &quot;hello&quot; &quot;world&quot;

3、特殊字符
    3.1 $#：获得脚本输入参数个数
        脚本内容如下：
            echo ${#}    
        执行脚本代码：
            ./hello.sh &quot;hello&quot; &quot;world&quot;
        执行脚本结果：2

    3.2 $*：显示整个脚本输入参数列表
        脚本内容如下：
            echo ${*}    
        执行脚本代码：
            ./hello.sh &quot;hello&quot; &quot;world&quot;
        执行脚本结果：&quot;hello&quot; &quot;world&quot;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Shell脚本语言-基本运算符</div><div class="line"></div><div class="line">```	 1、算数运算符		1.1 &quot;+&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a + $b`			echo &quot;c的值：$c&quot;		1.2 &quot;-&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a - $b`			echo &quot;c的值：$c&quot;		1.3 &quot;*&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a \* $b`			echo &quot;c的值：$c&quot;		1.4 &quot;/&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a / $b`			echo &quot;c的值：$c&quot;		1.5 &quot;%&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			c=`expr $a % $b`			echo &quot;c的值：$c&quot;		1.6 &quot;=&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=$a			echo &quot;b的值：$b&quot;				1.7 &quot;==&quot;运算			#注意：&quot;expr&quot;规定命令			a=8388			b=9688			if [ $a == $b ]			then				echo &quot;a等于b&quot;			else				echo &quot;a不等于b&quot;			fi	2、关系运算符		2.1 &quot;-eq&quot;：检测两个数是否相等，当等返回true			a=100			b=200			if [ $a -eq $b ]			then				echo &quot;a等于b&quot;			else				echo &quot;a不等于b&quot;			fi		2.2 &quot;-ne&quot;：检测两个数是否相等，不相等返回true			a=100			b=200			if [ $a -ne $b ]			then				echo &quot;a不等于b&quot;			else				echo &quot;a等于b&quot;			fi		2.3 &quot;-gt&quot;：检测左边数是否大于右边数，如果是，返回true			a=100			b=200			if [ $a -gt $b ]			then				echo &quot;a大于b&quot;			else				echo &quot;a小于b&quot;			fi		2.4 &quot;-lt&quot;：检测左边数是否小于右边数，如果是，返回true			a=100			b=200			if [ $a -lt $b ]			then				echo &quot;a小于b&quot;			else				echo &quot;a大于b&quot;			fi		2.5 &quot;-ge&quot;：检测左边数是否(大于+等于)右边数，如果是，返回true			a=100			b=200			if [ $a -ge $b ]			then				echo &quot;a大于等于b&quot;			else				echo &quot;a小于b&quot;			fi		2.6 &quot;-le&quot;：检测左边数是否(小于+等于)右边数，如果是，返回true			a=100			b=200			if [ $a -le $b ]			then				echo &quot;a小于等于b&quot;			else				echo &quot;a大于b&quot;			fi	3、布尔值运算符		3.1 &quot;!&quot;：非运算，表达式为true，返回true，否则返回false			a=100			b=200			if [ $a != $b ]			then				echo &quot;a不等于b&quot;			fi		3.2 &quot;-o&quot;：或运算，有一个表达式为true，则返回true			a=100			b=200			if [ $a -lt 200 -o $b -gt 200 ]			then				echo &quot;成立&quot;			fi		3.3 &quot;-a&quot;：与运算，两个表达式为true，则返回true			a=100			b=200			if [ $a -lt 200 -a $b -gt 200 ]			then				echo &quot;成立&quot;			else				echo &quot;不成立&quot;			fi	4、逻辑运算符		4.1 &quot;&amp;&amp;&quot;：逻辑且-&gt;and			a=100			b=200			if [ $a -lt 200 ] &amp;&amp; [ $b -gt 200 ]			then				echo &quot;成立&quot;			else				echo &quot;不成立&quot;			fi			4.2 &quot;||&quot;：逻辑 OR			a=100			b=200			if [ $a -lt 200 ] || [ $b -gt 200 ]			then				echo &quot;成立&quot;			else				echo &quot;不成立&quot;			fi	5、字符串运算？		5.1 &quot;=&quot;：检测两个字符串是否相等，如果相等返回true			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			else				echo &quot;字符串a不等于字符串b&quot;			fi		5.2 &quot;!=&quot;：检测两个字符串是否相等，如果不相等返回true			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a != $b ]			then				echo &quot;字符串a不等于字符串b&quot;			else				echo &quot;字符串a等于字符串b&quot;			fi			5.3 &quot;-z&quot;：检测字符串长度是否为0，如果是返回true			a=&quot;nemo&quot;			if [ -z $a ]			then				echo &quot;a不为空，存在&quot;			else				echo &quot;a不存在值&quot;			fi		5.4 &quot;-n&quot;：检测字符串长度是否为0，如果不是0，返回true			a=&quot;nemo&quot;			if [ -n $a ]			then				echo &quot;a存在&quot;			else				echo &quot;a不存在值&quot;			fi		5.5 &quot;字符串&quot;：检测字符串是否为空，不为空返回true			a=&quot;nemo&quot;			if [ $a ]			then				echo &quot;a不为空&quot;			else				echo &quot;a为空&quot;			fi	6、文件测试运算符？		file=&quot;/Users/name/Desktop/test.sh&quot;		6.1 &quot;-d file&quot;：检测文件是不是一个目录，如果是，那么返回true			if [ -d $file ]			then 				echo &quot;是一个目录&quot;			else				echo &quot;不是一个目录&quot;			fi		6.2 &quot;-r file&quot;：检测文件是否可读，如果是，那么返回true			if [ -r $file ]			then 				echo &quot;可读&quot;			else				echo &quot;不可读&quot;			fi		6.3 &quot;-w file&quot;：检测文件是否可写，如果是，那么返回true			if [ -w $file ]			then 				echo &quot;可写&quot;			else				echo &quot;不可写&quot;			fi		6.4 &quot;-x file&quot;：检测文件是否是可执行文件，如果是，那么返回true			if [ -x $file ]			then 				echo &quot;可执行&quot;			else				echo &quot;不可执行&quot;			fi		6.5 &quot;-f file&quot;：检测文件是否是一个普通文件（既不是目录，也不是设备文件），如果是，那么返回true			if [ -f $file ]			then 				echo &quot;文件为普通文件&quot;			else				echo &quot;文件为特殊文件&quot;			fi		6.6 &quot;-s file&quot;：检测文件是否为空（文件有内容），如果是，那么返回true			if [ -s $file ]			then 				echo &quot;文件有内容&quot;			else				echo &quot;文件没有内容&quot;			fi		6.7 &quot;-e file&quot;：检测文件是否存在（包含了：目录和文件），如果是，那么返回true			if [ -e $file ]			then 				echo &quot;存在&quot;			else				echo &quot;不存在&quot;			fi```### Shell脚本语言-流程控制</div><div class="line">```		1、&quot;if&quot;语句		语法结构			if [条件]			then				代码			fi		代码结构			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			fi	2、&quot;if else&quot;语句		语法结构			if [条件]			then				代码			else				代码			fi		代码结构			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			else				echo &quot;字符串a不等于字符串b&quot;			fi	3、&quot;if-else-if-else&quot;		语法结构			if [条件]			then				代码			elif [条件]			then				代码			else				代码			fi				代码结构			a=&quot;nemo&quot;			b=&quot;play&quot;			if [ $a = $b ]			then				echo &quot;字符串a等于字符串b&quot;			elif [ $a ]			then				echo &quot;字符串a不为空&quot;			else				echo &quot;字符串a不等于字符串b&quot;			fi		4、&quot;for&quot;循环语句		语法结构			for 变量名 in item1 item2 item3 …			do				代码			done		代码案例一			for name in &quot;nemo&quot; &quot;嗯&quot; &quot;嘻嘻&quot; &quot;月眼&quot;			do   				echo $&#123;name&#125;			done			5、&quot;while&quot;循环		语法结构			while(条件)			do				代码			done		代码案例一			a=1			while(($a&lt;10))			do   				echo $&#123;a&#125;				a=`expr $a + 1`			done	6、&quot;case&quot;语句		语法结构			case 值 in			模式1)				代码				;;			模式2)				代码				;;			模式3)				代码				;;			sac		代码案例一			number=1			case $number in			1) echo &quot;等于1&quot;				;;			2) echo &quot;等于2&quot;				;;			3) echo &quot;等于3&quot;				;;			esac</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Shell脚本语言-echo&quot;&gt;&lt;a href=&quot;#Shell脚本语言-echo&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本语言-echo&quot;&gt;&lt;/a&gt;Shell脚本语言-echo&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1、显示普通字符串
    
    
    </summary>
    
    
      <category term="shell" scheme="http://agoninemo.github.io/blog/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Git多用户配置ssh</title>
    <link href="http://agoninemo.github.io/blog/2017/12/05/Git%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AEssh/"/>
    <id>http://agoninemo.github.io/blog/2017/12/05/Git多用户配置ssh/</id>
    <published>2017-12-05T13:29:57.000Z</published>
    <updated>2017-12-05T13:33:11.102Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-d3f62ea2b28e2fad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git_github_ssh_linux.jpg"></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>之前配置了gitlab后，发现在多次切换账号比较的麻烦，所以博主就配置了多用户的ssh，现在把过程给记录下来，方便以后查询。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 公钥放在`~/.ssh/`目录，email@email.com可以改成其他邮箱好做区别，id_rsa可以改成github_id_rsa，表示用于github</div><div class="line">ssh-keygen -t rsa -C &quot;email@email.com&quot; -f ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>在<code>~/.ssh/</code>下创建config，执行命令<code>vim ~/.ssh/config</code>,如果已经创建了就编辑，博主的<code>config</code>如下(host随意即可，方便自己记忆，后续在添加remote是还需要用到)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#github qq168520@163.com</div><div class="line">host github</div><div class="line">    hostname github.com</div><div class="line">    User Agoni</div><div class="line">    IdentityFile ~/.ssh/github_id_rsa</div><div class="line"></div><div class="line">#gitlab xiezhuocheng@mjwon.com</div><div class="line">host gitlab</div><div class="line">    hostname http://10.10.10.79</div><div class="line">    User Agoni</div><div class="line">    Port 11000</div><div class="line">    IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line">#gitlab qq168520@163.com</div><div class="line">host oschina</div><div class="line">    hostname git.oschina.net</div><div class="line">    User Agoni</div><div class="line">    IdentityFile ~/.ssh/oschina_id_rsa</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查看系统ssh-key代理</div><div class="line">ssh-add -l</div><div class="line"></div><div class="line">显示</div><div class="line">2048 SHA256:9Qq7xLqqtlDOehS7Aw5mlRdVAq8XrUlm6tKeXzMnD4 /Users/xxx/.ssh/id_rsa (RSA)</div><div class="line">2048 SHA256:KmwrjIrdqQWdBF3f9FIhbIlvdjo6+tbSJXms1TWuB4 /Users/xxx/.ssh/oschina_id_rsa (RSA)</div><div class="line">2048 SHA256:YDzombL5ndt0bAVulwvANumbEX9TFQ/iDO51AzN5F0 /Users/xxx/.ssh/github_id_rsa (RSA)</div><div class="line"></div><div class="line"># 如果出现The agent has no identities. 则表示没有代理</div><div class="line">ssh-add -D</div><div class="line"></div><div class="line"># 依次将不同的ssh添加代理(如果使用 ssh-add ~/.ssh/id_rsa的时候报Could not open a connection to your authentication agent错误</div><div class="line">，则需要先运行一下 ssh-agent bash 命令后再执行 ssh-add ...等命令)</div><div class="line">ssh-add -K ~/.ssh/id_rsa</div><div class="line">ssh-add -K ~/.ssh/github_id_rsa</div><div class="line">ssh-add -K ~/.ssh/oschina_id_rsa</div></pre></td></tr></table></figure>
<p>测试ssh:<code>ssh -T git@github.com</code><br>你会得到如下提示，表示这个ssh公钥已经获得了权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi USERNAME! You&apos;ve successfully authenticated, but github does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>配置完成后，在连接非默认帐号的github仓库时，远程库的地址要对应地做一些修改，比如现在添加user帐号下的一个仓库test，则需要这样添加：(user是github的用户名, github是上面配置的host)<br><code>git remote add test git@github:user/test.git</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-d3f62ea2b28e2fad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;git_github_ssh_linux.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;p&gt;之前配置了gitlab后，发现在多次切换账号比较的麻烦，所以博主就配置了多用户的ssh，现在把过程给记录下来，方便以后查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://agoninemo.github.io/blog/tags/git/"/>
    
      <category term="ssh" scheme="http://agoninemo.github.io/blog/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>First Translation</title>
    <link href="http://agoninemo.github.io/blog/2017/11/18/First%20Translation/"/>
    <id>http://agoninemo.github.io/blog/2017/11/18/First Translation/</id>
    <published>2017-11-18T05:26:33.000Z</published>
    <updated>2017-11-18T05:44:36.402Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/timg.jpg" alt="pic"></p>
<h3 id="前方"><a href="#前方" class="headerlink" title="前方"></a>前方</h3><p>当你的知识支撑不了你的野心时，你就该静下心去学习！—–无名者 </p>
<h4 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h4><p>欢迎来到Swift.org<br><br>欢迎来到Swift 社区，让我们一起构建一种编程语言，让它在任何平台都可以把每一个人的想法变成应用程序。<br></p>
<p>在2014公布后，它很快成为发展最快的语言之一。Swift 使写的软件（编程）极其安全与快速的设计。我们的目标与野心：我们想要编程简单的事变成更简单，困难的事变成也可能实现。</p>
<p>对于学习者来说，学习Swift 能更好的了解现在编程的概念与更好的实践。现在Swift 开源了，他们将可以运用到更广泛的平台中，从移动设置到桌面到云平台。<br></p>
<a id="more"></a>
<h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Welcome to Swift.org</div><div class="line"></div><div class="line">Welcome to the Swift community. Together we are working to build a programming language to empower everyone to turn their ideas into apps on any platform.</div><div class="line"></div><div class="line">Announced in 2014, the Swift programming language has quickly become one of the fastest growing languages in history. Swift makes it easy to write software that is incredibly fast and safe by design. Our goals for Swift are ambitious: we want to make programming simple things easy, and difficult things possible.</div><div class="line"></div><div class="line">For students, learning Swift has been a great introduction to modern programming concepts and best practices. And because it is open, their Swift skills will be able to be applied to an even broader range of platforms, from mobile devices to the desktop to the cloud.</div></pre></td></tr></table></figure>
<p>部分词：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">excited 兴奋</div><div class="line">chapter 章</div><div class="line">quickly 快速</div><div class="line">became 成为</div><div class="line">one of 其中之一</div><div class="line">design 设计</div><div class="line">general 普通</div><div class="line">purpose 用途</div><div class="line">modern 现代</div><div class="line">programming 编程</div><div class="line">concepts 概念</div><div class="line">Announced 公布</div><div class="line">goals 目标</div><div class="line">difficult 困难</div><div class="line">possible 可能</div><div class="line">introduction 采用</div><div class="line">devices 设置</div><div class="line">desktop 桌面</div><div class="line">cloud 云</div><div class="line">applied 应用的</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orfd017lz.bkt.clouddn.com/assets/inset/timg.jpg&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前方&quot;&gt;&lt;a href=&quot;#前方&quot; class=&quot;headerlink&quot; title=&quot;前方&quot;&gt;&lt;/a&gt;前方&lt;/h3&gt;&lt;p&gt;当你的知识支撑不了你的野心时，你就该静下心去学习！—–无名者 &lt;/p&gt;
&lt;h4 id=&quot;译文&quot;&gt;&lt;a href=&quot;#译文&quot; class=&quot;headerlink&quot; title=&quot;译文&quot;&gt;&lt;/a&gt;译文&lt;/h4&gt;&lt;p&gt;欢迎来到Swift.org&lt;br&gt;&lt;br&gt;欢迎来到Swift 社区，让我们一起构建一种编程语言，让它在任何平台都可以把每一个人的想法变成应用程序。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;在2014公布后，它很快成为发展最快的语言之一。Swift 使写的软件（编程）极其安全与快速的设计。我们的目标与野心：我们想要编程简单的事变成更简单，困难的事变成也可能实现。&lt;/p&gt;
&lt;p&gt;对于学习者来说，学习Swift 能更好的了解现在编程的概念与更好的实践。现在Swift 开源了，他们将可以运用到更广泛的平台中，从移动设置到桌面到云平台。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://agoninemo.github.io/blog/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>AWS搭建SS</title>
    <link href="http://agoninemo.github.io/blog/2017/11/14/AWS%E6%90%AD%E5%BB%BASS/"/>
    <id>http://agoninemo.github.io/blog/2017/11/14/AWS搭建SS/</id>
    <published>2017-11-14T12:00:33.000Z</published>
    <updated>2017-11-15T15:03:44.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-f0e3b22b8912f00e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h3><p>之前博主使用的是XX-net,虽然不是很快但是用来查资料也是够用了，但是用了一年后，用了不，可用的IP都被封了，坑爹呀，查个资料，百度个半天都没百出来。所以博主决定自己梯子，于是有了下面这篇文章。</p>
<a id="more"></a>
<h3 id="申请-AWS"><a href="#申请-AWS" class="headerlink" title="申请 AWS"></a>申请 AWS</h3><p>点<a href="https://amazonaws-china.com/cn/" target="_blank" rel="external">AWS</a>进入首界面<br><img src="http://upload-images.jianshu.io/upload_images/1610969-a3fce91bd566e078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p>点注册，进入注册界面，由于没有截图，所以说下需要注意的地方，里面的信息都要用<code>英文</code>填写，里面的信息都要用<code>英文</code>填写，里面的信息都要用<code>英文</code>填写，重要的事件说三遍，在验证信用卡时，要注意会被扣钱，6.66人民币，要扣钱了，才算验证成功（有句mmp，不知当讲不当讲，说好的免费呢！！！还需要注意的是，在没有用超的情况下，是免费的，限额为：每个月提供 15GB 免费流量与 750小时免费时长），在电话认证那里，会有电话打到你留下的手机上，你只要等等她说完你就把界面上的<code>PIN</code>号码输入，然后就完成了。最后你的邮件会收到邮件，说你AWS已经注册完成。</p>
<p>然后登录账号，点启动虚拟机<br><img src="http://upload-images.jianshu.io/upload_images/1610969-bfd59bb75d93f734.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面"></p>
<p>选择虚拟机<code>Ubuntu Server 16.04 LTS（HVM），SSD Volume Tpye</code>如果界面没有变的话，是第四个，或者点左边的<code>仅免费套餐</code><br><img src="http://upload-images.jianshu.io/upload_images/1610969-30964070350dcb34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>这个实例选择默认的或者如下图选择一样<br><img src="http://upload-images.jianshu.io/upload_images/1610969-125b24a86585e4bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>第3与第4直接默认就行了，第5步的话密钥与值可以随便填写<br><img src="http://upload-images.jianshu.io/upload_images/1610969-f70d593ffc7141f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>第6步规则按下面这样填写就可以了<br><img src="http://upload-images.jianshu.io/upload_images/1610969-dbd1421ce79ddc6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<p>点启动后弹出的窗口，这里要注意，在输入完成<code>密钥对名称</code>后，要点<code>下载密钥对</code>，点<code>下载密钥对</code>，点<code>下载密钥对</code>，重要的事情说三遍，最后点<code>启动实例</code>。这里要主意一点这个窗口中有ssh 命令要复制下来，下面要用到（类似这样的：ssh -i “*.pem” ec2-user@ec2-11-111-11-111.ap-northeast-1.compute.amazonaws.com）</p>
<p>设置账单通知（土豪请忽略）<br><img src="http://upload-images.jianshu.io/upload_images/1610969-61f1be1fa85ca968.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1610969-0a1b3dd83bf12d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p>点实例–&gt;选择后点连接<br><img src="http://upload-images.jianshu.io/upload_images/1610969-2cef18369a97d0e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<p>博主用的是mac，所以可以在终端中直接连接，打开终端运行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#  /Users/xxx/Downloads/SecretKeyValue.pem为你下载的密钥对绝对路径</div><div class="line">chmod 400 /Users/xxx/Downloads/SecretKeyValue.pem</div><div class="line"></div><div class="line"># 连接远程虚拟机（ec2-user 是用户名，Amazon Linux AMI默认的是ec2-user，</div><div class="line">ec2-11-111-11-111.ap-northeast-1.compute.amazonaws.com 是你的服务器的公有DNS，这些信息右键点击你的实例，点击连接，弹出的提示框里都写着）</div><div class="line">ssh -i /Users/xxx/Downloads/SecretKeyValue.pem ec2-user@ec2-11-111-11-111.ap-northeast-1.compute.amazonaws.com</div><div class="line"></div><div class="line"></div><div class="line"># 使用root权限</div><div class="line">sudo -s</div></pre></td></tr></table></figure>
<h3 id="Debian-Ubuntu-安装方式"><a href="#Debian-Ubuntu-安装方式" class="headerlink" title="Debian/Ubuntu:安装方式"></a>Debian/Ubuntu:安装方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 更新apt-get，这里要注意，如果上面的虚拟机选择的是centos的话，是没有apt-get的，centos用的是yum，下面有介绍安装方法</div><div class="line">apt-get update</div><div class="line"></div><div class="line"># 安装python包管理工具(安装shadowsocks需要,提示时填yes)</div><div class="line">apt-get install python-setuptools</div><div class="line">apt-get install python-pip</div></pre></td></tr></table></figure>
<h3 id="CentOS安装方式（如果是Ubuntu，可以跳这一步）"><a href="#CentOS安装方式（如果是Ubuntu，可以跳这一步）" class="headerlink" title="CentOS安装方式（如果是Ubuntu，可以跳这一步）"></a>CentOS安装方式（如果是Ubuntu，可以跳这一步）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 安装shadowsocks（提示时填yes）</div><div class="line">pip install shadowsocks</div><div class="line"></div><div class="line"># 创建shadowsocks文件夹用来放一些配置文件</div><div class="line">mkdir /etc/shadowsocks</div><div class="line"></div><div class="line"># 编辑配置文件</div><div class="line">vim /etc/shadowsocks/config.json</div></pre></td></tr></table></figure>
<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>多个用户使用的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line"> &quot;server&quot;:&quot;0.0.0.0&quot;，  </div><div class="line"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,  </div><div class="line"> &quot;local_port&quot;:1080,  </div><div class="line">  &quot;port_password&quot;: &#123;  </div><div class="line">     &quot;8381&quot;: &quot;foobar1&quot;,  </div><div class="line">     &quot;8382&quot;: &quot;foobar2&quot;,  </div><div class="line">     &quot;8383&quot;: &quot;foobar3&quot;,  </div><div class="line">     &quot;8384&quot;: &quot;foobar4&quot;  </div><div class="line"> &#125;,  </div><div class="line"> &quot;timeout&quot;:300,  </div><div class="line"> &quot;method&quot;:&quot;aes-256-cfb&quot;,  </div><div class="line"> &quot;fast_open&quot;: false  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>单个用户使用的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;: 8381,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;foobar1&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;:false,</div><div class="line">    &quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="配置完成后重启配置"><a href="#配置完成后重启配置" class="headerlink" title="配置完成后重启配置"></a>配置完成后重启配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动Shadowsocks</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 停止Shadowsocks</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d stop</div><div class="line"></div><div class="line"># 重启Shadowsocks服务</div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d restart</div></pre></td></tr></table></figure>
<h4 id="设置Shadowsocks开机启动"><a href="#设置Shadowsocks开机启动" class="headerlink" title="设置Shadowsocks开机启动"></a>设置Shadowsocks开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/rc.local</div><div class="line"></div><div class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure>
<p>下载客户端</p>
<p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">Windows客户端下载地址</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="external">macOS客户端下载地址</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="external">Linux客户端下载地址</a></p>
<p>安装之后，添加服务器，地址为AWS的外网地址，登录AWS控制台，查看正在运行中的实例，在右边<code>IPv4 公有 IP</code>找到。 端口号为刚才配置Shadowsocks服务器时的端口号，密码也是刚才配置的，设置完之后保存，接下来就可以自由的浪了！</p>
<p>参考文章：</p>
<p><a href="https://sunny856.xyz/1537" target="_blank" rel="external">https://sunny856.xyz/1537</a></p>
<p><a href="http://celerysoft.github.io/2016-01-15.html" target="_blank" rel="external">http://celerysoft.github.io/2016-01-15.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-f0e3b22b8912f00e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前文&quot;&gt;&lt;a href=&quot;#前文&quot; class=&quot;headerlink&quot; title=&quot;前文&quot;&gt;&lt;/a&gt;前文&lt;/h3&gt;&lt;p&gt;之前博主使用的是XX-net,虽然不是很快但是用来查资料也是够用了，但是用了一年后，用了不，可用的IP都被封了，坑爹呀，查个资料，百度个半天都没百出来。所以博主决定自己梯子，于是有了下面这篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ss" scheme="http://agoninemo.github.io/blog/tags/ss/"/>
    
      <category term="aws" scheme="http://agoninemo.github.io/blog/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins从零开始</title>
    <link href="http://agoninemo.github.io/blog/2017/11/06/Jenkins%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"/>
    <id>http://agoninemo.github.io/blog/2017/11/06/Jenkins从零开始/</id>
    <published>2017-11-06T11:48:24.000Z</published>
    <updated>2017-11-06T11:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-75b3f9d0e4cdcbd4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>要做到项目的自动构建，你需求了解下Jenkins的安装，这文章是博主从零开始安装的过程，记录下了踩过的坑，分享给有需要的童鞋。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>因为Jenkins是一个用Java编写的开源的持续集成工具，所以需要java环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看CentOS自带JDK是否已安装</div><div class="line">yum list installed |grep java</div><div class="line"></div><div class="line"># 卸载JDK相关文件 java-1.7.0-openjdk（根据你上面的打印出的log，*表示卸载掉java 1.7.0的所有openjdk相关文件）</div><div class="line">yum -y remove java-1.7.0-openjdk*</div><div class="line"></div><div class="line"># 卸载tzdata-java</div><div class="line">yum -y remove tzdata-java.noarch</div></pre></td></tr></table></figure>
<h3 id="查看yum库中的Java安装包"><a href="#查看yum库中的Java安装包" class="headerlink" title="查看yum库中的Java安装包"></a>查看yum库中的Java安装包</h3><blockquote>
<p>yum -y list java*</p>
</blockquote>
<p>以下为打印的log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">已加载插件：fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">* base: mirrors.njupt.edu.cn</div><div class="line">* extras: mirror.bit.edu.cn</div><div class="line">* updates: mirrors.aliyun.com</div><div class="line">base                                                                                                        | 3.7 kB     00:00</div><div class="line">extras                                                                                                      | 3.4 kB     00:00</div><div class="line">gitlab_gitlab-ee/signature                                                                                  |  836 B     00:00</div><div class="line">gitlab_gitlab-ee/signature                                                                                  | 1.0 kB     00:00 ...</div><div class="line">gitlab_gitlab-ee-source/signature                                                                           |  836 B     00:00</div><div class="line">gitlab_gitlab-ee-source/signature                                                                           |  951 B     00:00 ...</div><div class="line">updates                                                                                                     | 3.4 kB     00:00</div><div class="line">updates/primary_db                                                                                          | 4.7 MB     00:00</div><div class="line">可安装的软件包</div><div class="line">java-1.5.0-gcj.x86_64                                                1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.5.0-gcj-devel.x86_64                                          1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.5.0-gcj-javadoc.x86_64                                        1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.5.0-gcj-src.x86_64                                            1.5.0.0-29.1.el6                                       base</div><div class="line">java-1.6.0-openjdk.x86_64                                            1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-demo.x86_64                                       1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-devel.x86_64                                      1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-javadoc.x86_64                                    1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.6.0-openjdk-src.x86_64                                        1:1.6.0.41-1.13.13.1.el6_8                             base</div><div class="line">java-1.7.0-openjdk.x86_64                                            1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-demo.x86_64                                       1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-devel.x86_64                                      1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-javadoc.noarch                                    1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.7.0-openjdk-src.x86_64                                        1:1.7.0.151-2.6.11.0.el6_9                             updates</div><div class="line">java-1.8.0-openjdk.x86_64                                            1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-debug.x86_64                                      1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-demo.x86_64                                       1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-demo-debug.x86_64                                 1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-devel.x86_64                                      1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-devel-debug.x86_64                                1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-headless.x86_64                                   1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-headless-debug.x86_64                             1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-javadoc.noarch                                    1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-javadoc-debug.noarch                              1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-src.x86_64                                        1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java-1.8.0-openjdk-src-debug.x86_64                                  1:1.8.0.151-1.b12.el6_9                                updates</div><div class="line">java_cup.x86_64                                                      1:0.10k-5.el6                                          base</div><div class="line">java_cup-javadoc.x86_64                                              1:0.10k-5.el6                                          base</div><div class="line">java_cup-manual.x86_64                                               1:0.10k-5.el6                                          base</div><div class="line">javacc.x86_64                                                        4.1-0.5.el6                                            base</div><div class="line">javacc-demo.x86_64                                                   4.1-0.5.el6                                            base</div><div class="line">javacc-manual.x86_64                                                 4.1-0.5.el6                                            base</div><div class="line">javassist.noarch                                                     3.9.0-6.el6                                            base</div><div class="line">javassist-javadoc.noarch                                             3.9.0-6.el6                                            base</div></pre></td></tr></table></figure>
<h4 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令"></a>执行安装命令</h4><blockquote>
<p> yum -y install java-1.8.0-openjdk*</p>
</blockquote>
<p>Jenkins需要用到git，在安装git之前，要安装一些依赖（主要原因是minimal版的centos没有相应的工具，如果你的有可以不要安装，但是博主建议你升级下）</p>
<blockquote>
<p>sudo yum -y install gcc autoconf automake libtool make gettext zlib zlib-devel</p>
<p>sudo yum -y install perl-ExtUtils-MakeMaker package</p>
</blockquote>
<p>git下载（版本号可以自己修改，现在最新的是2.15的，博主下2.14的就可以了）</p>
<blockquote>
<p>wget <a href="https://Github.com/Git/Git/archive/v2.14.3.tar.gz" target="_blank" rel="external">https://Github.com/Git/Git/archive/v2.14.3.tar.gz</a></p>
</blockquote>
<p>解压git</p>
<blockquote>
<p>tar -xvf v2.14.3.tar.gz -C /usr/git/</p>
</blockquote>
<p>编译，安装git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">make configure</div><div class="line">./configure --prefix=/usr/local/ --with-curl --with-expat</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>设置环境变量，编辑<code>sudo vim /etc/profile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export GIT_HOME=/usr/local/git</div><div class="line">export PATH=$PATH:$GIT_HOME/bin:$GIT_HOME/libexec/git-core</div></pre></td></tr></table></figure>
<p>保存后使其立即生效:<br><code>source /etc/profile</code></p>
<p>安装git可能通到的报错：</p>
<p>1.In file included from credential-store.c:1:<br>cache.h:43:18: 警告：zlib.h：</p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install zlib zlib-devel expat-devel</div></pre></td></tr></table></figure>
<p>2.tclsh failed; using unoptimized loading</p>
<p>解决方法：<br><code>yum install -y gettext</code></p>
<h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><p>因为是网络安装，可能会出现404，多试几次，就可以了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</div><div class="line">rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</div><div class="line">yum install jenkins</div></pre></td></tr></table></figure>
<h4 id="修改Jenkins配置"><a href="#修改Jenkins配置" class="headerlink" title="修改Jenkins配置"></a>修改Jenkins配置</h4><p>进入到配置文件<code>vi /etc/sysconfig/jenkins</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 端口修改</div><div class="line">将</div><div class="line">JENKINS_PORT=&quot;8080&quot;</div><div class="line">修改为</div><div class="line">JENKINS_PORT=&quot;12000&quot;</div><div class="line"></div><div class="line">开启端口</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 12000 -j ACCEPT</div><div class="line"></div><div class="line">防火墙规则保</div><div class="line">/etc/rc.d/init.d/iptables save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动jenkins</div><div class="line">service jenkins start</div></pre></td></tr></table></figure>
<p>安装完成后，下面可以使用<code>http://&lt;域名&gt;:12000</code>登录了，第一次登录时，会有个密码，这个界面会提供一个像这样的<code>/var/lib/jenkins/secrets/initialAdminPassword</code>路径，密码就在里面，可以使用<code>cat</code>命令查看密码。在下一个界面，选择默认的安装方式就可以了。再下一个界面就是要创建管理员，然后就可以使用了。</p>
<p>参考文章：</p>
<p><a href="http://www.cnblogs.com/boxuan/articles/6434109.html" target="_blank" rel="external">http://www.cnblogs.com/boxuan/articles/6434109.html</a></p>
<p><a href="http://www.cnblogs.com/yangcb/p/5852380.html" target="_blank" rel="external">http://www.cnblogs.com/yangcb/p/5852380.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-75b3f9d0e4cdcbd4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;要做到项目的自动构建，你需求了解下Jenkins的安装，这文章是博主从零开始安装的过程，记录下了踩过的坑，分享给有需要的童鞋。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://agoninemo.github.io/blog/tags/Jenkins/"/>
    
      <category term="Git" scheme="http://agoninemo.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Centos 安装GitLab</title>
    <link href="http://agoninemo.github.io/blog/2017/11/02/Centos-%E5%AE%89%E8%A3%85GitLab/"/>
    <id>http://agoninemo.github.io/blog/2017/11/02/Centos-安装GitLab/</id>
    <published>2017-11-02T11:36:16.000Z</published>
    <updated>2017-11-29T08:42:39.675Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-f3ef73bb372c30dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上周末公司说要搭建一个Gitlabe用来管理代码，于是自己就开始琢磨了，其中配置邮件这里踩了一个坑，被坑了两天时间，现把搭建过程记录下来。</p>
<a id="more"></a>
<p>注意事项:</p>
<p>1.注意你的服务器需要2G以上内存（博主用的虚拟机，当时设置1G的内存然后就访问的时候报个502…）<br>2.Centos的版本是6.5的，用7.0的小伙伴可能部分有些不一样。</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>先下载Gitlabe—–<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/" target="_blank" rel="external">Gitlab地址</a></p>
<p>博主使用的是虚拟机安装所以有远程桌面，这一步可以跳过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">如果链接远程桌面时，提示&quot;远程桌面连接无法验证您希望连接的计算机的身份&quot;</div><div class="line">解决方法：</div><div class="line">1. 通过连接管理终端功能连接进入云服务器。</div><div class="line">2. 点击任务栏powershell,然后输入命令gpedit.msc，输入完成后回车，回车后会显示本地组策略编辑器。</div><div class="line">3. 依次找到【计算机配置】-&gt;【管理模板】-&gt;【windows组件】-&gt;【远程桌面服务】-&gt;【远程桌面会话主机】-&gt;【安全】-&gt;【远程（RDP）连接要求使用指定的安全层】</div><div class="line">4. 双击【远程（RDP）连接要求使用指定的安全层</div><div class="line">5. 修改为已启用，安全层选择 rdp，最后点击应用确认</div></pre></td></tr></table></figure></p>
<h5 id="将系统防火墙打开HTTP和SSH访问"><a href="#将系统防火墙打开HTTP和SSH访问" class="headerlink" title="将系统防火墙打开HTTP和SSH访问"></a>将系统防火墙打开HTTP和SSH访问</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum install openssh-server</div><div class="line">sudo yum install postfix （看情况来，如果你想用163，qq之类的发邮件可以不用执行这句）</div><div class="line">sudo lokkit -s http -s ssh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp 待上传文件名 linux用户名@服务器IP:存放到服务器的哪个位置</div><div class="line"></div><div class="line">比如：scp /Users/xxx/Downloads/gitlab-ce-10.0.0-ce.0.el6.x86_64.rpm root@10.10.10.70:/home/soft/</div></pre></td></tr></table></figure>
<p>也可以用<a href="https://cyberduck.en.softonic.com/mac" target="_blank" rel="external">Cyberduck </a>工具来上传文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd 到上传的Gitlabe的目录下，执行命令</div><div class="line">rpm -i gitlab-ce-10.0.0-ce.0.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<p>配置gitlab</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">将系统防火墙打开HTTP和SSH访问</div><div class="line"></div><div class="line">sudo yum install openssh-server</div><div class="line">sudo yum install postfix （看情况来，如果你想用163，qq之类的发邮件可以不用执行这句）</div><div class="line">sudo lokkit -s http -s ssh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</div><div class="line"></div><div class="line">sudo yum install -y gitlab-ee</div></pre></td></tr></table></figure>
<h4 id="配置Gitlab"><a href="#配置Gitlab" class="headerlink" title="配置Gitlab"></a>配置Gitlab</h4><p>GitLab默认会占用80、8080和9090端口，如果你想安装Jenkins，会通到端口冲突，Jenkins默认也会使用8080端口，所以，这一步操作将会修改GitLab的默认端口为11000、11001和11002。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/gitlab/gitlab.rb</div><div class="line"></div><div class="line">将：</div><div class="line">external_url &apos;http://127.0.0.1&apos;</div><div class="line">修改为：</div><div class="line">external_url &apos;http://&lt;你的服务器地址或域名&gt;:11000&apos;</div><div class="line"></div><div class="line">将：</div><div class="line">unicorn[&apos;port&apos;] = 8080</div><div class="line">修改为：</div><div class="line">unicorn[&apos;port&apos;] = 11001</div><div class="line"></div><div class="line">将：</div><div class="line">prometheus[&apos;listen_address&apos;] = &apos;localhost:9090&apos;</div><div class="line">修改为：</div><div class="line">prometheus[&apos;listen_address&apos;] = &apos;localhost:11002&apos;</div></pre></td></tr></table></figure>
<h4 id="每次修改完时，记得要使用reconfigure命令重新配置"><a href="#每次修改完时，记得要使用reconfigure命令重新配置" class="headerlink" title="每次修改完时，记得要使用reconfigure命令重新配置"></a>每次修改完时，记得要使用reconfigure命令重新配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<p>PS:这里比较重要，如果你的Gitlab是搭建在Centos系统上的，需要开放上面的端口（因为Centos默认开放的端口只有22）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 开放端口11000（记得还有11001和11002也要设置）</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 11000 -j ACCEPT</div><div class="line"># 将修改永久保存到防火墙中（不设置的话，下次重启上面的设置就会失效）</div><div class="line">/etc/rc.d/init.d/iptables save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看安装后的程序运行情况</div><div class="line">sudo gitlab-ctl status</div><div class="line"></div><div class="line"># 重启Gitlab服务</div><div class="line">sudo gitlab-ctl restart</div><div class="line"></div><div class="line"># 启动和关闭Gitlab</div><div class="line">sudo gitlab-ctl start/stop</div></pre></td></tr></table></figure>
<h3 id="邮箱设置（下面这里需要注意的地方，就是要把-号去掉，默认有-这是被注释的）"><a href="#邮箱设置（下面这里需要注意的地方，就是要把-号去掉，默认有-这是被注释的）" class="headerlink" title="邮箱设置（下面这里需要注意的地方，就是要把#号去掉，默认有#这是被注释的）"></a>邮箱设置（下面这里需要注意的地方，就是要把#号去掉，默认有#这是被注释的）</h3><p>PS :这里要说一个坑，就是在安装<code>postfix</code>后，你再去设置其他的邮箱是没有效果的，博主也没有试过两者并存。所以你可以执行<code>yum list | grep postfix</code>查看是否安装了<code>postfix</code>，如果安装了，你可以执行<code>yum remove postfix</code>进行删除</p>
<p>如果你在上面的设置中，选择了<code>postfix</code>发邮件，那么设置方法如下：</p>
<p>执行<code>vi /etc/gitlab/gitlab.rb</code>进入到配置文件，修改下面的参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">external_url &apos;http://&lt;你的服务器地址或域名&gt;:11000&apos;</div><div class="line"></div><div class="line"># gitlab_rails[&apos;gitlab_ssh_host&apos;] = &apos;ssh.host_example.com&apos;</div><div class="line"># gitlab_rails[&apos;time_zone&apos;] = &apos;UTC&apos;</div><div class="line"></div><div class="line">### Email Settings</div><div class="line"> gitlab_rails[&apos;gitlab_email_enabled&apos;] = true</div><div class="line"> gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;gitlab@http://&lt;你的服务器地址或域名&gt;&apos;</div><div class="line"> gitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;GitLab&apos;</div><div class="line"># gitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;noreply@example.com&apos;</div></pre></td></tr></table></figure>
<p>设置完成后，重配<code>postfix</code>，执行<code>sudo dpkg-reconfigure postfix</code> 或者<br><code>sudo vi /etc/postfix/main.cf</code></p>
<p>执行<code>gitlab-ctl tail</code>实时查看所有执行日志，当然你也可以进入<code>/var/log/maillog</code>，查看log，想了解更多的<code>postfix</code>设置的点<a href="http://wiki.ubuntu.org.cn/UbuntuHelp:PostfixBasicSetupHowto/zh" target="_blank" rel="external">这里</a></p>
<h4 id="163邮箱设置"><a href="#163邮箱设置" class="headerlink" title="163邮箱设置"></a>163邮箱设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">### Email Settings</div><div class="line"> gitlab_rails[&apos;gitlab_email_enabled&apos;] = true</div><div class="line"> </div><div class="line">### GitLab email server settings</div><div class="line">###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html</div><div class="line">###! **Use smtp instead of sendmail/postfix.**</div><div class="line"></div><div class="line"> gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.163.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_port&apos;] = 25</div><div class="line"> gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxxx@163.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_password&apos;] = &quot;这里填授权密码&quot;</div><div class="line"> gitlab_rails[&apos;smtp_domain&apos;] = &quot;163.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class="line"> gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_tls&apos;] = true</div><div class="line"></div><div class="line">###! **Can be: &apos;none&apos;, &apos;peer&apos;, &apos;client_once&apos;, &apos;fail_if_no_peer_cert&apos;**</div><div class="line">###! Docs: http://api.rubyonrails.org/classes/ActionMailer/Base.html</div><div class="line"> gitlab_rails[&apos;smtp_openssl_verify_mode&apos;] = &apos;peer&apos;</div><div class="line"> user[&apos;git_user_email&apos;] = &quot;xxxx@163.com&quot;</div><div class="line"> gitlab_rails[&apos;gitlab_email_from&apos;] = &quot;xxxx@163.com&quot;</div></pre></td></tr></table></figure>
<h4 id="QQ企业邮箱设置"><a href="#QQ企业邮箱设置" class="headerlink" title="QQ企业邮箱设置"></a>QQ企业邮箱设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_port&apos;] = 465</div><div class="line"> gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxx@域名.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_password&apos;] = &quot;密码&quot;</div><div class="line"> gitlab_rails[&apos;smtp_domain&apos;] = &quot;域名.com&quot;</div><div class="line"> gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class="line"> gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class="line"> gitlab_rails[&apos;smtp_tls&apos;] = true</div><div class="line"></div><div class="line">###! **Can be: &apos;none&apos;, &apos;peer&apos;, &apos;client_once&apos;, &apos;fail_if_no_peer_cert&apos;**</div><div class="line">###! Docs: http://api.rubyonrails.org/classes/ActionMailer/Base.html</div><div class="line"> gitlab_rails[&apos;smtp_openssl_verify_mode&apos;] = &apos;none&apos;</div><div class="line"> user[&apos;git_user_email&apos;] = &quot;xxx@域名.com&quot;</div><div class="line"> gitlab_rails[&apos;gitlab_email_from&apos;] = &quot;xxx@域名.com&quot;</div></pre></td></tr></table></figure>
<p>上面两个邮箱的设置，参数<code>user[&#39;git_user_email&#39;]</code>与<code>gitlab_rails[&#39;gitlab_email_from&#39;]</code>是手动添加上去的。在<code>gitlab.rb</code>里也是有这两个参数的，只不过是被注释了。</p>
<h4 id="测试邮箱"><a href="#测试邮箱" class="headerlink" title="测试邮箱"></a>测试邮箱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 进入控制台</div><div class="line">gitlab-rails console</div><div class="line">// 发送测试邮件</div><div class="line">Notify.test_email(&apos;收件人邮箱&apos;, &apos;邮件标题&apos;, &apos;邮件正文&apos;).deliver_now</div></pre></td></tr></table></figure>
<p>更多的邮箱设置点<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md" target="_blank" rel="external">这里</a></p>
<h4 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h4><p>批量添加用户，下面是批量添加的脚本，复制就可用，也可以从<a href="https://github.com/AgoniNemo/other" target="_blank" rel="external">这里</a>下载<br>private_token可以从root用户Settings–&gt;Account查到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#批量创建gitlab用户</div><div class="line"></div><div class="line">url_path=&quot;http://&lt;地址&gt;/api/v4/users&quot;</div><div class="line">private_token=&quot;private_token&quot;</div><div class="line"></div><div class="line">userinfo=&apos;&apos;</div><div class="line">if [[ $# &gt; 0 ]]</div><div class="line">  then</div><div class="line">  echo &quot;路径:$1&quot;</div><div class="line">  userinfo=$1</div><div class="line">else</div><div class="line">  echo &quot;~~~~~~~~~~~~请输入添加用户文件的地址~~~~~~~~~~~~~~~&quot;</div><div class="line">  read path</div><div class="line">  userinfo=$path</div><div class="line">fi</div><div class="line"></div><div class="line">while read line</div><div class="line">do</div><div class="line">    password=`echo $line | awk &apos;&#123;print $1&#125;&apos;`</div><div class="line">    mail=`echo $line | awk &apos;&#123;print $2&#125;&apos;`</div><div class="line">    username=`echo $line | awk &apos;&#123;print $3&#125;&apos;`</div><div class="line">    name=`echo $line | awk &apos;&#123;print $4&#125;&apos;`</div><div class="line">    curl -d &quot;password=$password&amp;email=$mail&amp;username=$username&amp;name=$name&amp;private_token=$private_token&quot; &quot;$url_path&quot;</div><div class="line"></div><div class="line">done &lt;$userinfo</div></pre></td></tr></table></figure></p>
<p>使用时，需要一个添加用户的text文件，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">12345678 test123@qq.com testname1 测试1</div><div class="line">12345678 528634141@qq.com testname2 测试2</div></pre></td></tr></table></figure></p>
<p>脚本使用，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh /Users/xxx/Desktop/GitLabAddUser.sh</div></pre></td></tr></table></figure></p>
<h3 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your.email@example.com&quot; -b 4096</div><div class="line"></div><div class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<h4 id="安装过程中出现的问题："><a href="#安装过程中出现的问题：" class="headerlink" title="安装过程中出现的问题："></a>安装过程中出现的问题：</h4><p>1.在浏览器中访问GitLab出现502错误<br>原因：1.内存不足。2.修改了 gitlab.rb配置文件没有执行重新配置命令。<br>解决办法：1.检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。<br>2.使用sudo gitlab-ctl reconfigure重新配置。</p>
<p>2.80端口冲突<br>原因：Nginx默认使用了80端口。<br>解决办法：为了使Nginx与Apache能够共存，并且为了简化GitLab的URL地址，Nginx端口保持不变，修改Apache的端口为4040。这样就可以直接用使用ip访问Gitlab。而禅道则可以使用4040端口进行访问，像这样：xxx.xx.xxx.xx:4040/zentao。具体修改的地方在/etc/httpd/conf/httpd.conf这个文件中，找到Listen 80这一句并将之注释掉，在底下添加一句Listen 4040，保存后执行service httpd restart重启apache服务即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Listen 4040</div></pre></td></tr></table></figure>
<p>3.GitLab头像无法正常显示</p>
<p>原因：gravatar被墙</p>
<p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">编辑 /etc/gitlab/gitlab.rb</div><div class="line">将</div><div class="line">#gitlab_rails[&apos;gravatar_plain_url&apos;] = &apos;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&apos;</div><div class="line">修改为：</div><div class="line">gitlab_rails[&apos;gravatar_plain_url&apos;] = &apos;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&apos;</div><div class="line">然后在命令行执行：</div><div class="line">sudo gitlab-ctl reconfigure </div><div class="line">sudo gitlab-rake cache:clear RAILS_ENV=production</div></pre></td></tr></table></figure>
<p>4.EOFError: end of file reached<br>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">将</div><div class="line">gitlab_rails[&apos;smtp_tls&apos;]  = false</div><div class="line">修改为：</div><div class="line">gitlab_rails[&apos;smtp_tls&apos;] = true</div></pre></td></tr></table></figure></p>
<h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p>用户之前已经设置了其他的邮箱，修改邮箱后，发现原来的邮箱还是可以用的，你需要在<code>Settings--&gt;Emails</code>里删除原来的邮箱。</p>
<p>Ps:最后有什么不明白的，可以在下方评论或私信博主。</p>
<p>参考文章：</p>
<p><a href="https://segmentfault.com/a/1190000002722631" target="_blank" rel="external">https://segmentfault.com/a/1190000002722631</a></p>
<p><a href="https://www.douban.com/note/640641236/" target="_blank" rel="external">https://www.douban.com/note/640641236/</a></p>
<p><a href="https://my.oschina.net/kylinq/blog/868590" target="_blank" rel="external">https://my.oschina.net/kylinq/blog/868590</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-f3ef73bb372c30dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上周末公司说要搭建一个Gitlabe用来管理代码，于是自己就开始琢磨了，其中配置邮件这里踩了一个坑，被坑了两天时间，现把搭建过程记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitLab" scheme="http://agoninemo.github.io/blog/tags/GitLab/"/>
    
      <category term="Centos" scheme="http://agoninemo.github.io/blog/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Heroku部署失败</title>
    <link href="http://agoninemo.github.io/blog/2017/10/28/Heroku%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5/"/>
    <id>http://agoninemo.github.io/blog/2017/10/28/Heroku部署失败/</id>
    <published>2017-10-28T15:02:46.000Z</published>
    <updated>2017-11-02T11:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-79a956f261d8c785.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用vapor做的后端应用已经在heroku上跑了有一段时间，也遇到一些问题，下面这个问题就是博主在升级了swift 4.0后遇到的，分享出来给同样遇到这些问题的童鞋一个解决思路，如果你有更好方法可以在下方评论。</p>
<a id="more"></a>
<h2 id="以下为部署时的log"><a href="#以下为部署时的log" class="headerlink" title="以下为部署时的log"></a>以下为部署时的log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Counting objects: 19, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (19/19), done.</div><div class="line">Writing objects: 100% (19/19), 4.88 KiB | 2.44 MiB/s, done.</div><div class="line">Total 19 (delta 12), reused 0 (delta 0)</div><div class="line">remote: Compressing source files... done.</div><div class="line">remote: Building source:</div><div class="line">remote:</div><div class="line">remote: -----&gt; Swift app detected</div><div class="line">remote: Cloning into &apos;swiftenv&apos;...</div><div class="line">remote: Swift 3 Heroku Installer</div><div class="line">remote: 🔢  Version: 3.1.1</div><div class="line">remote: 🖥  Operating System: ubuntu1404</div><div class="line">remote: 📦 Installing Swiftenv</div><div class="line">remote: Cloning into &apos;/app/.swiftenv&apos;...</div><div class="line">remote: 🐦 Installing Swift</div><div class="line">remote: Downloading https://swift.org/builds/swift-3.1.1-release/ubuntu1604/swift-3.1.1-RELEASE/swift-3.1.1-RELEASE-ubuntu16.04.tar.gz</div><div class="line">remote: /tmp/swiftenv-3.1.1- /tmp/build_554a6f1c55a490cc4f7d6cb2cc75faaa</div><div class="line">remote:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">remote:                                  Dload  Upload   Total   Spent    Left  Speed</div><div class="line">remote: 100  117M  100  117M    0     0  5651k      0  0:00:21  0:00:21 --:--:-- 7384k</div><div class="line">remote: /tmp/build_554a6f1c55a490cc4f7d6cb2cc75faaa</div><div class="line">remote: 3.1.1 has been installed.</div><div class="line">remote: ✅  Done</div><div class="line">remote: precompile</div><div class="line">remote: -----&gt; Building Package ... this will take a while</div><div class="line">remote: swift-build: error: unsatisfiable</div><div class="line">remote:  !     Push rejected, failed to compile Swift app.</div><div class="line">remote:</div><div class="line">remote:  !     Push failed</div><div class="line">remote: Verifying deploy...</div><div class="line">remote:</div><div class="line">remote: !    Push rejected to xxxserver.</div><div class="line">remote:</div><div class="line">To https://git.heroku.com/xxx.git</div><div class="line">! [remote rejected] master -&gt; master (pre-receive hook declined)</div><div class="line">error: failed to push some refs to &apos;https://git.heroku.com/xxx.git&apos;</div></pre></td></tr></table></figure>
<p>这个问题比较的明显，就是swift的版本对不上，打包不了，当前博主的版本为4.0。脑海中第一个方法就是降级，但是想想，感觉有点不现实，所以只能试试多版本切换了。</p>
<blockquote>
<p>swift版本切换工具 swiftenv</p>
</blockquote>
<p>安装很简单，用<a href="http://www.jianshu.com/p/d229ac7fe77d" target="_blank" rel="external">brew</a>就行了，一行命令搞定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install kylef/formulae/swiftenv</div><div class="line"></div><div class="line">// 安装完成后，可以使用下面的命令查看本地安装的所有版本</div><div class="line">swiftenv versions</div></pre></td></tr></table></figure>
<p>因为要使用到的版本为3.1.1，而本地的版本只有一个就是4.0，所以我们要安装一个3.1.1的，swiftenv已经为我们提供了安装命令install，直接使用就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swiftenv install 3.1.1</div></pre></td></tr></table></figure>
<p>特别说明下，安装好后，版本会直接切换到3.1.1，所以不需要在切换了。当然，你也许只想要这个项目的版本是3.1.1，其他的要最新的，这个需求swiftenv也可以做到，首先你要设置全局的版本，然后再设置局部的版本，就像这个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 新打开一个终端，运行命令</div><div class="line">swiftenv global 4.0</div><div class="line"></div><div class="line">// 切换到你要设置版本项目的根目录下</div><div class="line">swiftenv local 3.1.1</div></pre></td></tr></table></figure>
<p>以上设置的完成时，你的全局版本为4.0，而你的项目的版本为3.1.1，想了解更多的swiftenv命令的可以点<a href="https://swiftenv.fuller.li/en/latest/commands.html#" target="_blank" rel="external">这里</a>。</p>
<p>O了，再把代码上传到heroku上打包，就是这么简单。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-79a956f261d8c785.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用vapor做的后端应用已经在heroku上跑了有一段时间，也遇到一些问题，下面这个问题就是博主在升级了swift 4.0后遇到的，分享出来给同样遇到这些问题的童鞋一个解决思路，如果你有更好方法可以在下方评论。&lt;/p&gt;
    
    </summary>
    
    
      <category term="heroku" scheme="http://agoninemo.github.io/blog/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Heroku休眠问题</title>
    <link href="http://agoninemo.github.io/blog/2017/09/09/Heroku%E4%BC%91%E7%9C%A0%E9%97%AE%E9%A2%98/"/>
    <id>http://agoninemo.github.io/blog/2017/09/09/Heroku休眠问题/</id>
    <published>2017-09-08T16:16:04.000Z</published>
    <updated>2017-09-08T16:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-4ba1b1ccb1800215.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic.jpg"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用Heroku部署应用时，都会遇到一个问题，就是免费的Heroku，在30分钟之内没有访问的话，应用会进入休眠，如果你的应用有一个时间间隔的轮询或者你的应用需要做一些后台操作，这时，会被Heroku强行给休眠。只有当下次有访问时，应用才会被唤醒。而且，还有一个限制就是一天之内最长存活时间不能大于18个小时，所以当前问题就是要解决如何在18个小时的限制内合理的让应用存活。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>先说一个比较省时省力的方法，就是每隔一段时间，发一个请求。博主之前使用的是<a href="http://jk.cloud.360.cn/" target="_blank" rel="external">360网站服务监控</a>，注册完成后进入控制台，选择HTTP监控，创建一个监控项，选择HTTP/HTTPS监控，可以监控多个网站，自定义请求方法。当然这个方法符合大多数应用的需求了。这个方法比较的简单，就不细说了，而且这个时间间隔最长的为60分钟，感觉有点短，需求有点不符合博主的需求。</p>
<p>现在说说第二种方法，这种方法是要<a href="http://www.jianshu.com/p/ae1dbd031d3e" target="_blank" rel="external">科学上网的（不知道这个文章什么时候会被封）</a>.可定时候比较长，可以一天，一周。使用也是比较的简单，点<a href="https://www.google.com/sheets/about/" target="_blank" rel="external">这里</a>进入界面后，点转到google表格，在B1格填上1，如下图（博主的有运行过脚本，所以是3）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1610969-918ef6ccc1574cbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>点工具–&gt;脚本编译器，在myFunction方法里填上以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var d = new Date();</div><div class="line">  var hours = d.getHours();</div><div class="line">  var currentTime = d.toLocaleDateString();</div><div class="line">  var counter = SpreadsheetApp.getActiveSheet().getRange(&apos;B1&apos;).getValues();</div><div class="line"> </div><div class="line">  if (hours &lt;= 6 &amp;&amp; hours &gt;= 22) &#123;</div><div class="line">    var response = UrlFetchApp.fetch(&quot;这里填写你要请求的地址&quot;);</div><div class="line">    SpreadsheetApp.getActiveSheet().getRange(&apos;A&apos; + counter).setValue(&apos;Visted at &apos; + currentTime + &quot; &quot; + hours + &quot;h&quot;);</div><div class="line">    SpreadsheetApp.getActiveSheet().getRange(&apos;B1&apos;).setValue(Number(counter) + 1);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>选择修改–&gt;当前项目触发器，选择好了保存，如果遇到下面的错误，解决方法：点<a href="https://developers.google.com/apps-script/guides/client-verification" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>xxx needs your permission to access your data on Google</p>
</blockquote>
<p> 最后要保存，保存好了以后这个代码就会以你设置的时间运行，上面的代码博主设置的是晚上22点到早上6点前，这个时候访问。</p>
<p> 参考文章：</p>
<p> <a href="https://medium.com/@pandachain/keep-free-heroku-app-awake-during-a-specific-period-using-google-app-script-in-2017-63fe37ee9e9f" target="_blank" rel="external">Keep free Heroku app awake during a specific period using Google App Script in 2017</a></p>
<p> <a href="https://quickleft.com/blog/6-easy-ways-to-prevent-your-heroku-node-app-from-sleeping/" target="_blank" rel="external">6 Easy Ways to Prevent Your Heroku Node App From Sleeping</a></p>
<p>Ps:还有什么不明白的，可以私信博主。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-4ba1b1ccb1800215.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;pic.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在使用Heroku部署应用时，都会遇到一个问题，就是免费的Heroku，在30分钟之内没有访问的话，应用会进入休眠，如果你的应用有一个时间间隔的轮询或者你的应用需要做一些后台操作，这时，会被Heroku强行给休眠。只有当下次有访问时，应用才会被唤醒。而且，还有一个限制就是一天之内最长存活时间不能大于18个小时，所以当前问题就是要解决如何在18个小时的限制内合理的让应用存活。&lt;/p&gt;
    
    </summary>
    
    
      <category term="heroku" scheme="http://agoninemo.github.io/blog/tags/heroku/"/>
    
      <category term="vapor" scheme="http://agoninemo.github.io/blog/tags/vapor/"/>
    
  </entry>
  
  <entry>
    <title>swift上传文件</title>
    <link href="http://agoninemo.github.io/blog/2017/09/01/Swift%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://agoninemo.github.io/blog/2017/09/01/Swift上传文件/</id>
    <published>2017-09-01T11:41:19.000Z</published>
    <updated>2017-09-06T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1610969-c87e0a95952f5395.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic.jpg"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在使用Vapor遇到很多的问题，坑也填了不少，下面就来说说由这个坑引发一系列的问题。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在应用里，需要使用保存用户的上传头像，那么问题来了，如果发布到heroku上，空间是有限的，然而用户量是不可估计的，所以在对比了国内几家的OSS后，选择了<a href="https://portal.qiniu.com/signup?code=3lcfmuw7yntci" target="_blank" rel="external">七牛对象存储</a>做为图片的存储空间，上传的图片的库已经找好，用的是Alamofire。<br><a id="more"></a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在使用Alamofire时，发现一个了问题，我们都知道Alamofire这个库使用得最多的iOS开发，而用Alamofire做iOS的网络请求，它的内部返回的结果都是在主线程下执行的，这样做的确方便了iOS开发的，但是在Vapor里主线程是会被拦截而不被触发的，所以在使用Alamofire上传图片时，结果是不会返回的。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>第一想到的是Alamofire是否有相关的API可以使用，但是遗憾的是，只有在返回结果后，对结果进行处理时才有，所以这个方案fail。第三方的实现不了，那只能自己实现这个功能了。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在查看了七牛的文档后，看到<a href="https://developer.qiniu.com/kodo/api/1312/upload" target="_blank" rel="external">七牛上传api</a>是表单上传，先来看个示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Content-Type:   multipart/form-data; boundary=分隔线</div><div class="line"></div><div class="line">--分隔线</div><div class="line">Content-Disposition:       form-data; name=&quot;token&quot;</div><div class="line">&lt;uploadToken&gt;</div><div class="line">--分隔线</div><div class="line">Content-Disposition:       form-data; name=&quot;key&quot;</div><div class="line">&lt;key&gt;</div><div class="line">--分隔线</div><div class="line">Content-Disposition:       form-data; name=&quot;file&quot;; filename=&quot;&lt;fileName&gt;&quot;</div><div class="line">Content-Type:              application/octet-stream</div><div class="line">Content-Transfer-Encoding: binary</div><div class="line">&lt;fileBinaryData&gt;</div><div class="line">--分隔线--</div></pre></td></tr></table></figure>
<p>上面的示例中，需要传入的参数有三个,token,key,file。在七牛中，<a href="https://developer.qiniu.com/kodo/manual/1208/upload-token" target="_blank" rel="external">token</a>是要自己生成的，这里就不多说明了，想了解的话可以私信博主。上传的<code>boundary=分隔线</code>是给后台解析时用的，博主看到Alamofire里的是以这个<code>String(format: &quot;Alamofire.boundary.%08x%08x&quot;, arc4random(), arc4random())</code>为分隔线的，博主的分隔线只是把Alamofire给去掉。</p>
<p>最后生成像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type:   multipart/form-data; boundary=boundary.73e735e3732b6c0e</div></pre></td></tr></table></figure></p>
<p>知道怎么生成就开始构建了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">let url = URL(string:&quot;http://up.qiniu.com&quot;)</div><div class="line"></div><div class="line">var request = URLRequest.init(url: url!);</div><div class="line">// 请求类型</div><div class="line">request.httpMethod = &quot;POST&quot;;</div><div class="line">// 超时时间</div><div class="line">request.timeoutInterval = 30;</div><div class="line"></div><div class="line">// 设置分隔线</div><div class="line">let boundary = String(format: &quot;boundary.%08x%08x&quot;, arc4random(), arc4random())</div><div class="line">let contentType = String(format: &quot;multipart/form-data;boundary=%@&quot;, boundary)</div><div class="line">request.addValue(contentType, forHTTPHeaderField: &quot;Content-Type&quot;)</div><div class="line"></div><div class="line">// 创建body</div><div class="line">var body = Data();</div><div class="line"></div><div class="line">// 请求参数</div><div class="line">let dict = [&quot;token&quot;:token,&quot;key&quot;: key]</div><div class="line">let keys = dict.keys;</div><div class="line"></div><div class="line">for key in keys &#123;</div><div class="line">    body.append(String(format:&quot;--%@\r\n&quot;,boundary).data(using: .utf8)!)</div><div class="line">    body.append(String(format:&quot;Content-Disposition:form-data;name=\&quot;%@\&quot;\r\n\r\n&quot;,key as String).data(using: .utf8)!)</div><div class="line">    body.append(&quot;\(dict[key]!)\r\n&quot;.data(using: .utf8)!)</div><div class="line">&#125;</div><div class="line">// 数据之前要用 --分隔线 来隔开 ，否则后台会解析失败</div><div class="line">body.append(String(format:&quot;--%@\r\n&quot;,boundary).data(using: .utf8)!)</div><div class="line"></div><div class="line">// 文件</div><div class="line">let key = &quot;1.jpg&quot;</div><div class="line"></div><div class="line">// 文件主体</div><div class="line">let data = UIImagePNGRepresentation(UIImage.init(named: key)!);</div><div class="line"></div><div class="line">let file = &quot;file&quot;</div><div class="line">// 传入最后一个参数</div><div class="line">body.append(String(format:&quot;Content-Disposition:form-data;name=\&quot;%@\&quot;;filename=\&quot;\(key)\&quot;\r\n&quot;, file).data(using: .utf8)!)</div><div class="line"></div><div class="line">// 文件类型</div><div class="line">body.append(&quot;Content-Type:image/jpeg\r\n\r\n&quot;.data(using: .utf8)!)</div><div class="line"></div><div class="line">// 添加文件主体</div><div class="line">body.append(data)</div><div class="line"></div><div class="line">// 使用\r\n来表示这个这个值的结束符</div><div class="line">body.append(&quot;\r\n&quot;.data(using: .utf8)!)</div><div class="line"></div><div class="line">// --分隔线-- 为整个表单的结束符</div><div class="line">body.append(String(format:&quot;--%@--\r\n&quot;,boundary).data(using: .utf8)!)</div><div class="line"></div><div class="line">// 上传表单</div><div class="line">URLSession.shared.uploadTask(with: request, from: body) &#123; (data, resp, error) in</div><div class="line"></div><div class="line">	do&#123;</div><div class="line">	    let d = try JSONSerialization.jsonObject(with: data!, options: .mutableContainers)</div><div class="line">	    print(d)</div><div class="line">	&#125;catch&#123;</div><div class="line">	    print(error)</div><div class="line">	&#125;</div><div class="line">&#125;.resume()</div></pre></td></tr></table></figure>
<p>上面的代码在OS上是没问题的，但是在Linux上就会报错（更新于2017.9.6）</p>
<blockquote>
<p>fatal error: shared is not yet implemented: file Foundation/NSURLSession/NSURLSession.swift </p>
</blockquote>
<p>这是由于使用的URLSession.shared在Linux上还没有被实现，<a href="https://developerslogblog.wordpress.com/2017/04/14/swift-3-on-linux-software-development/" target="_blank" rel="external">这里</a>有说道原因。如果想了解还有那些在Linux上缺失的可以点<a href="https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Status.md" target="_blank" rel="external">这里</a>。shared不能使用，我们就换个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 生成body的方法和上面的一样</div><div class="line">request.httpBody = body</div><div class="line"></div><div class="line">// 使用URLSessionConfiguration.default来生成URLSession</div><div class="line">let session = URLSession(</div><div class="line">        configuration:URLSessionConfiguration.default, delegate: nil, delegateQueue: nil)</div><div class="line"></div><div class="line">let dataTask = session.dataTask(with: request, completionHandler: &#123;[weak self] (data, response, error) -&gt; Void in</div><div class="line">            let tuple = self?.c(data: data, response: response, err: error);</div><div class="line">            completion((tuple?.0)!,tuple?.1)</div><div class="line">        &#125;)</div><div class="line">dataTask.resume()</div></pre></td></tr></table></figure>
<p>以上就是一个很全面的一次表单多参数上传的示例了，还有不明白的童鞋可以私信博主。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1610969-c87e0a95952f5395.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;pic.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在使用Vapor遇到很多的问题，坑也填了不少，下面就来说说由这个坑引发一系列的问题。&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;在应用里，需要使用保存用户的上传头像，那么问题来了，如果发布到heroku上，空间是有限的，然而用户量是不可估计的，所以在对比了国内几家的OSS后，选择了&lt;a href=&quot;https://portal.qiniu.com/signup?code=3lcfmuw7yntci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七牛对象存储&lt;/a&gt;做为图片的存储空间，上传的图片的库已经找好，用的是Alamofire。&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://agoninemo.github.io/blog/tags/swift/"/>
    
      <category term="文件上传" scheme="http://agoninemo.github.io/blog/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>blog首界面实现</title>
    <link href="http://agoninemo.github.io/blog/2017/07/29/blog%E9%A6%96%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
    <id>http://agoninemo.github.io/blog/2017/07/29/blog首界面实现/</id>
    <published>2017-07-29T04:40:32.000Z</published>
    <updated>2017-08-05T04:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>非常感谢一个不知名的博主（偶然间看到的一个博客，发现进入他的博客前，有一个动画界面，非常的好看，点<a href="https://agoninemo.github.io/">这里</a>观看）</p>
<p>开始我们的正题，首先我们要去git上创建一个放首界面的仓库，命名规则是：用户名+github.io<br><a id="more"></a></p>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/git.png" alt="git"></p>
<p>把<a href="https://git.oschina.net/AgoniNemo/backup" target="_blank" rel="external">备份</a>下载下来，按照下面的方式修改为自己的<br><img src="https://git.oschina.net/AgoniNemo/backup/raw/master/html.png" alt="修改html"></p>
<p>备份文件夹里有个favicon.ico图片，把它换为自己的头像就行。当然，你也可以修改html文件里的33行。<br></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">把favicon.ico修改为一个网络地址图片</div><div class="line">&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</div><div class="line"></div><div class="line">修改后（https://git.oschina.net/AgoniNemo/backup/raw/master/html.png为网络图片地址）</div><div class="line">&lt;link rel=&quot;icon&quot; href=&quot;https://git.oschina.net/AgoniNemo/backup/raw/master/html.png&quot; type=&quot;image/x-icon&quot;&gt;</div></pre></td></tr></table></figure>
<p>修改完成后，上传到刚刚创建的git创建去（这个步骤不会的可以自行百度）。</p>
<p>好了首界面就搭建完成了，下面来说说要hexo里要修改的东西,打开根项目的_config.yml文件，修改内容如下：</p>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/blogPic.png" alt="_config.yml修改"></p>
<p>PS:这里要特别的说明下，因为博主的主界面在git上创建的仓库是blog(真正的地址是用户名 + github.io/blog，也就是说第一张图里的Respository name博主填写的是blog)，所以root则是/blog/</p>
<p>好了主要过程就是这样，有什么不明白的可以在下面留言（评论系统需要翻墙，哇嘎嘎）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;非常感谢一个不知名的博主（偶然间看到的一个博客，发现进入他的博客前，有一个动画界面，非常的好看，点&lt;a href=&quot;https://agoninemo.github.io/&quot;&gt;这里&lt;/a&gt;观看）&lt;/p&gt;
&lt;p&gt;开始我们的正题，首先我们要去git上创建一个放首界面的仓库，命名规则是：用户名+github.io&lt;br&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://agoninemo.github.io/blog/tags/blog/"/>
    
      <category term="html" scheme="http://agoninemo.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>用七牛做hexo图床</title>
    <link href="http://agoninemo.github.io/blog/2017/06/18/%E7%94%A8%E4%B8%83%E7%89%9B%E5%81%9Ahexo%E5%9B%BE%E5%BA%8A/"/>
    <id>http://agoninemo.github.io/blog/2017/06/18/用七牛做hexo图床/</id>
    <published>2017-06-18T03:04:35.000Z</published>
    <updated>2017-06-18T04:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>博主用的是Mac系统，下面的命令在windows上有些不同,原理上是一样的，可以在下载七牛命令工具的那个网页查找windows下的命令<br><br>为什么要用七牛做图床，博主觉得以下两点就行了：</p>
<p><ul><br>    <li>它是免费的</li><br>    <li>它有10G的空间</li><br></ul><br><a id="more"></a><br>现在先去做注册了七牛：<a href="https://portal.qiniu.com/signup?code=3lcfmuw7yntci" target="_blank" rel="external">点这里注册</a></p>
<p>注册好了，登录以后点对象存储：<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/1qn.png" alt=""></p>
<p>新建存储空间（创建好了在存储空间列表里可以看到，博主的是blog,还可以在右边的内容管理里看到上传的文件）<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/2qn.png" alt=""><br><br></p>
<p>下面来说说怎样上传，先<a href="https://github.com/qiniu/qshell?ref=developer.qiniu.com" target="_blank" rel="external">点这里</a>去到git上下载七牛的命令工具。<br>下载好以后，找到这个文件，给他重命名为qshell。</p>
<p>打开终端,输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv qshell的绝对路径 /usr/local/bin/（比如：mv /Users/xxxx/Downloads/qsshell /usr/local/bin/）</div></pre></td></tr></table></figure>
<p>再输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x /usr/local/bin/qshell</div></pre></td></tr></table></figure></p>
<p>这个命令就是给qshell这个文件执行权限，完成后再输入下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qshell account AK SK</div></pre></td></tr></table></figure>
<p>上面的AK，SK可以在七牛的这个界面找到:</p>
<p><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/3qn.png" alt=""><br><br></p>
<p>下面需要一个json文件，新建文件（比如：新建qnConf.json放在桌面）<br>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">            &quot;bucket&quot;: &quot;blog&quot;,</div><div class="line">            &quot;src_dir&quot;: &quot;/Users/xxx/Documents/Blog/qImg&quot;,</div><div class="line">            &quot;overwrite&quot;: true,</div><div class="line">            &quot;rescan_local&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>bucket的值填上七牛上存储空间的名字（博主的是blog），src_dir是本地要上传到七牛空间的图片，都放这个qImg文件夹。其他两个key不要管，如果想了解可以<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md" target="_blank" rel="external">点这里</a>。</p>
<p>打开终端，输入命令上传图片，图片少就快<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qshell qupload 10  /Users/xxx/Documents/Blog/qnConf.json</div></pre></td></tr></table></figure></p>
<p>后面的路径要修改为你创建的qnConf.json绝对路径，那个数字10是指并发上传的协程数量，默认为1，即文件一个个上传，对于大量小文件来说，可以通过提高该参数值来提升同步速度。<br></p>
<p>觉得麻烦的童鞋<a href="https://github.com/AgoniNemo/other" target="_blank" rel="external">点这里</a>下载博主已经写好的脚本。<br>最后说下图片地址，从下面的界面找到测试域名：<br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/4qn.png" alt=""><br><br><br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">域名是这样的</div><div class="line">17lz.bkt.clouddn.com</div><div class="line"></div><div class="line">图片地址是这样</div><div class="line">http://17lz.bkt.clouddn.com/avatar.png</div></pre></td></tr></table></figure>
<p>后面的avatar.png是图片名字，如果在你上面的文件夹里还是文件夹，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/Users/xxx/Documents/Blog/qImg是同步的文件</div><div class="line">qimg里面有个image文件夹里面有个1.pgn图片</div><div class="line">在七牛的图片地址是：</div><div class="line">http://17lz.bkt.clouddn.com/image/1.png</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博主用的是Mac系统，下面的命令在windows上有些不同,原理上是一样的，可以在下载七牛命令工具的那个网页查找windows下的命令&lt;br&gt;&lt;br&gt;为什么要用七牛做图床，博主觉得以下两点就行了：&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;它是免费的&lt;/li&gt;&lt;br&gt;    &lt;li&gt;它有10G的空间&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="sh" scheme="http://agoninemo.github.io/blog/tags/sh/"/>
    
      <category term="hexo" scheme="http://agoninemo.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我与ps</title>
    <link href="http://agoninemo.github.io/blog/2017/06/12/%E6%88%91%E4%B8%8Eps/"/>
    <id>http://agoninemo.github.io/blog/2017/06/12/我与ps/</id>
    <published>2017-06-12T12:54:09.000Z</published>
    <updated>2017-06-16T11:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160; 第一次搞Ps的时候，还是比较的早，那时的版本好像还是4.0没有现在这么强大，也没有这么多的功能。<br>&#160; &#160; &#160; &#160; 博主当时还在念初中，还记得那个时候是在QQ的一个bbs模块里看到别人的教程的，当时是给一个长得很漂亮的女生染发、美瞳。那对当初的博主来说，是多么的神奇，于是，博主就走了为期两个月的学习之旅。当然，现在已经没有当初那种感觉了，下面是博主最新的一个设计，也是前年的了，人呀，就是懒呀！<br><a id="more"></a><br><img src="http://orfd017lz.bkt.clouddn.com/assets/inset/icon.png" alt="程序猿专用"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 第一次搞Ps的时候，还是比较的早，那时的版本好像还是4.0没有现在这么强大，也没有这么多的功能。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 博主当时还在念初中，还记得那个时候是在QQ的一个bbs模块里看到别人的教程的，当时是给一个长得很漂亮的女生染发、美瞳。那对当初的博主来说，是多么的神奇，于是，博主就走了为期两个月的学习之旅。当然，现在已经没有当初那种感觉了，下面是博主最新的一个设计，也是前年的了，人呀，就是懒呀！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://agoninemo.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>不能说的秘密</title>
    <link href="http://agoninemo.github.io/blog/2017/06/11/%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://agoninemo.github.io/blog/2017/06/11/不能说的秘密/</id>
    <published>2017-06-11T10:13:53.000Z</published>
    <updated>2017-11-15T15:04:53.771Z</updated>
    
    <content type="html"><![CDATA[<script src=/blog/js/crypto-js.js></script><script>
function doDecrypt(pwd, onError) {
	console.log("in doDecrypt");
	var txt = document.getElementById("enc_content").innerHTML;
	var plantext;
	try {
	  	var bytes = CryptoJS.AES.decrypt(txt, pwd);
		plaintext = bytes.toString(CryptoJS.enc.Utf8);
	} catch(err) {
		if(onError) {onError(err);}
		return;
	}
	document.getElementById("enc_content").innerHTML = plaintext;
	document.getElementById("enc_content").style.display = "block";
   document.getElementById("enc_passwd").style.display = "none";
}
</script>
<div id="enc_content" style="display:none">U2FsdGVkX19Rr/76mlQYGJVjCmL3kvN/QREty7ZojLtSjB6pOUJV5AoZUaRs/vqho52x+3kTOXbg8IpX+cnoHhssdSrF8EoFjm6vKE6hEqU0cbZxFZ+xJamEyo4naQwMt9LfF/BNwGUaQy7+XPO5MG4YvpNlFT+CrdPXDWwbFmIezO74HL0oWQwcv7b8o5wkQrsq9C8ANFup0Wy0fVl03e+L/dQREgYmgPK5HzVx6ttm7nhPuoAlweYpjk8x4RC7k76/rLi1pwZ4fbbtgMExjhngWSqIP0ANo/EmNukCiWGp4evlxQnnI4lelIYn5cax95zfSS9sW/iKiobYEtuC+R0vAy8mpOL8Z531IkAQsJFU+qlk+HAwVOUr2RM7ny1rBbLWp+rYIp+fJJG1/c3SYIA8UDgGbDzTASXHXn6NOMktSQzGtJyYpLfwvZGu8sjYbG4iQ4WL08AYkSd0wJqHl1GKlOrr0/VailccVPZXfvZ+t+DgW1nGDKmeBWKjVuIVG11ce2kj0NfuBsIZILOo9ZhFAKbOtoiAjpY/0yRolzg=</div><div id="enc_passwd"> <input id="enc_pwd_input" type="text" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div>
<script>
var onError = function(error) {
	document.getElementById("enc_error").innerHTML = "password error!"
};
function decrypt() {
var passwd = document.getElementById("enc_pwd_input").value;
console.log(passwd);
doDecrypt(passwd, onError);
}
</script>
</div>]]></content>
    
    <summary type="html">
    
      &lt;script src=/blog/js/crypto-js.js&gt;&lt;/script&gt;&lt;script&gt;
function doDecrypt(pwd, onError) {
	console.log(&quot;in doDecrypt&quot;);
	var txt = document.get
    
    </summary>
    
    
      <category term="能看到吗？" scheme="http://agoninemo.github.io/blog/tags/%E8%83%BD%E7%9C%8B%E5%88%B0%E5%90%97%EF%BC%9F/"/>
    
  </entry>
  
</feed>
